%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: ghostbusters w name.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Patricia
%%CreationDate: 5/14/08
%%BoundingBox: 0 0 498 500
%%HiResBoundingBox: 0 0 497.3340 499.3330
%%CropBox: 0 0 497.3340 499.3330
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 27006 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD7F277DF8272027F8272027F8272027F8272027F8272027F82720%27F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8%272027F8272027F8272027F8272027F8272027F8272027F8272027F82720%27F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8%272027F8272027F8272027F827207D272027272720272727202727272027%272720272727202727272027272720272727202727272027272720272727%202727272027272720272727202727272027272720272727202727272027%272720272727202727272027272720272727202727272027272720272727%202727272027272720272727202727272027272720277DF827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%7DFD7F277D2027F8272027F8272027F8272027F8272027F8272027F82720%27F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8%272027F8272027F8272027F8272027F8272027F8272027F8272027F82720%27F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8%272027F8272027F8272027F87D2727272027272720272727202727272027%272720272727202727272027272720272727202727272027272720272727%202727272027272720272727202727272027272720272727202727272027%272720272727202727272027272720272727202727272027272720272727%20272727202727272027272720272727202727277DF827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F87DFD%7F277DF8272027F8272027F8272027F8272027F8272027F8272027F82720%27F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8%272027F8272027F8272027F8272027F8272027F8272027F8272027F82720%27F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8%272027F8272027F827207D27202727272027272720272727202727272027%272720272727202727272027272720272752522727272027272720272727%202727272027272720272727202727272027272720272727202727272027%272720272727202727272027272720272727202727272027272720272727%2027272720272727202727272027272720277DF827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F82727527D524B52F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F87DFD1127%52A8A87D7D27527D7D52277D7D7D5227277D7DA876B59399FD042752A8A8%7D5252FD0C7D525227277D7D7D52277D7D7D5227277DA8A87D5252FD0D7D%27FD057D52FD04277D7DA87D7DFD0E277D2027F8272027F8272027F82720%27F827A8FFFFA8FFFFF87DFFFF272752FFFF5227757DFFA87D27768D9327%277DFFA8A8A8FF52FD07FF52FFFFAFA8FFFF7EF8A8FFFF272752FFFF5227%FFA8A8A8FF84A8FD06FF52FD06FF277DFFA8AFFFFFA827F8A8FFA884FFFF%27F8272027F8272027F8272027F87D272727202727272027272720272727%A8FFA8522052FF2752FFFF272052FFFF207675A8A8FFA8A87D998D7627FF%A82720277D5252277DFF7D277D27FFFF7D277DFFFF5252FFFF272027A8FF%207DFF532027277D522752FFA8275252FFFF522752FF277DFFA82753FFFF%7D52FF7D272727A827272027272720272727202727277DF827F827F827F8%27F827F827F82727FFFF52F827F852F852FFFFF82728FFFF27937684A8A8%FFA1B5939A5252FFFF5227F827F827F87DFF7DF827F8FFFF7DF87DFFFF27%52FFFFF827F8A8FF277DFF7D27F827F827F852FFA8F827F8FFFF52F82752%277DFF7D2727FFFF7D52FFA852F827F827F827F827F827F827F827F827F8%7DFD0E277DFFFFFD062752FFFF7D7DA8A8525276A8FFFFFFBBB59AFFA8A8%52A8FFFFA8A8FD04277DFF7D272727FFFFA8A8FFFF7D2752FFFF272727A8%FF277DFFFFFFA85227272752FFA8272727FFFFFD047D277DFFA8277DFFFF%2752FFFFFFAF5952FD0E277DF8272027F8272027F8272027F8277DFFA827%2059597D7D52FFFFA8A8A8FF52FFFFA852C393B5A1A8527D525227A8FD04%FF5227F87DFF7DF82720FD05FFA87D2752FFFF2027F8A8FF27F87DFD04FF%A827F852FFA8F82720FD05FF59277DFFA8FFFFA8F8272059A8FFFFFFA827%2027F8272027F8272027F827207D27202727272027272720272727207DFF%FF202727FFFFA852FFFF272752FFFF5252759A8DC2CFFFFFFF93B5272720%7DA8FFFFFF27277DFF7D272027FFFF7D2752FFFF8452FFFF272727A8FF27%2720527DFFFFFF522752FFA8272027FFFF52272727207DFFA87DFFFF5220%27272752FFFFFF7D272727202727272027272720277DF827F827F827F827%F827F827F82752FFFF52F827FFFF2852FFFFF82752FFFF274BB58D5152A8%FFFFA1B56F522727F82752FFA827F87DFF7DF827F8FFFF7DF827A8FF7D52%FFFF272727FFA8275227F82727A8FF7DF852FFA8F827F8FFFF52F827527D%52FFA827A8FFA8275227F827F8A8FF7DF827F827F827F827F827F827F87D%FD0F27A8FFFF7D7DFFFF5252FFFF272752FFFF272793B59AA8A8FFA0B593%5252FF7D5252A8FF7D27277DFF7D272727FFFF7D5252FFFF7D27FFFFA852%7EFF7D27A8A87D277DFFFF272752FFA8272727FFFF7D527DFF7D7DFFA827%7DFFFF59A8FF7D2752A8FFFD0E277D2027F8272027F8272027F8272027F8%52A8FD04FFA827A8FFFF52277DFFFF7D204B6FB58DB58DB5934BF852A8FD%04FFA8F82720A8FFA8202759FD06FF7EF82727A8FFFFFF7EF8277DFD05FF%5227207DFFFF272752FD06FF7EA8FFA828F8A8FFFFA8FD05FF7D27F82720%27F8272027F8272027F87D2727272027272720272727202727272027FD04%5227272027272720272727202727274B76939A4B2727272027FD04522727%202727272027272720272727202727272027272752522727202727525252%2727202727272027272720272727202727272027272720FD0427525252FD%04272027272720272727202727277DF827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F87DFD7F277DF82720%27F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8%272027F8272027F8272027F8272027F8272027F8272027F8272759597D27%27F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8%272027F8272027F8272027F8272027F8272027F8272027F8272027F82720%27F827207D27202727272027272720272727202727272027272720272727%202727272027272720272727202727272027272720272727202727272027%27277DFD05FF272720272727202727272027272720272727202727272027%272720272727202727272027272720272727202727272027272720272727%202727272027272720277DF827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F852A8FD06FF7DF827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F87DFD362752FD09FF7D277DA852FD3A%277D2027F8272027F8272027F8272027F8272027F8272027F8272027F827%2027F8272027F8272027F8272027F8272027F8272027F82727597DFD0AFF%A8A8FF2727F8272027F8272027F8272027F8272027F8272027F8272027F8%272027F8272027F8272027F8272027F8272027F8272027F8272027F82720%27F87D272727202727272027272720272727202727272027272720272727%2027272720272727202727272027272720272727202727527DFD0FFFFD04%272027272720272727202727272027272720272727202727272027272720%2727272027272720272727202727272027272720272727202727277DF827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F82727A8FD0EFF7D52F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F87DFD3027FD0F%FF52767576757675764B52FD36277DF8272027F8272027F8272027F82720%27F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8%27207DFD08FFA8A8FD04FFA8278DB58DB58DB58DB58DB56F7527272027F8%272027F8272027F8272027F8272027F8272027F8272027F8272027F82720%27F8272027F8272027F8272027F827207D27202727272027272720272727%202727272027272720272727202727272027272720272727202727272027%27272027FD0AFF7DFD05FF52B58DB58DB58DB58DB58DB58DB5939A512720%272727202727272027272720272727202727272027272720272727202727%2720272727202727272027272720277DF827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F82752FFFFFFA8FD07FFA8FD04FF7D6FB58CB58DB58CB58DB58CB58DB58C%B593752727F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F87DFD2E27FD11FF7D768DB593%B58DB593B58DB593B58DB593B58DB57552FD2A277D2027F8272027F82720%27F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8%272027F8272028FD04FF7DFD05FFA8A8FD05FFA84BB58DB58DB58DB58DB5%8DB58DB58DB58DB58DB58D7527272027F8272027F8272027F8272027F827%2027F8272027F8272027F8272027F8272027F8272027F87D272727202727%272027272720272727202727272027272720272727202727272027272720%2727272027272720277DFD04FF527DFD04FF527DFD05FFA8768DB58DB58D%B58DB58DB58DB58DB58DB58DB58DB58DB54B272727202727272027272720%2727272027272720272727202727272027272720272727202727277DF827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F82727A8FD04FF52A8FD04FF287DFD05FFA84BB5%8DB58CB58DB58CB58DB58CB58DB58CB58DB58CB58DB56F27F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F87DFD2A27529352FD13FF4B93B58DB593B58DB593B58DB593B58DB593B5%8DB593B58DB59352FD24277DF8272027F8272027F8272027F8272027F827%2027F8272027F8272027F8272027F8272027F8272027F852934B7DFD13FF%52998DB58DB58DB58DB58DB58DB58DB58DB58DB58DB58DB58DB59352F827%2027F8272027F8272027F8272027F8272027F8272027F8272027F8272027%F827207D2720272727202727272027272720272727202727272027272720%2727272027272720272727202727768D7652FD15FF27B58DB58DB58DB58D%B58DB58DB58DB58DB58DB58DB58DB58DB58D762027272720272727202727%27202727272027272720272727202727272027272720277DF827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F8528D9927FD16FF7D6FB58DB58CB58DB58CB58DB58CB58DB58CB58D%B58CB58DB58CB58D51F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F87DFD26277693B527FD18FF5227524B7675B5%8DB593B58DB593B58DB593B58DB593B58DB593B58D76FD20277D2027F827%2027F8272027F8272027F8272027F8272027F8272027F8272027F8272027%F82720528DB54B7DFD18FFA8272027F82720274B938DB58DB58DB58DB58D%B58DB58DB58DB58DB58D762027F8272027F8272027F8272027F8272027F8%272027F8272027F8272027F87D2727272027272720272727202727272027%272720272727202727272027272720272727205293B59327FD0CFFA8A8FD%0CFF5227272720272727205275B58DB58DB58DB58DB58DB58DB58DB58DB5%935227272027272720272727202727272027272720272727202727272027%27277DF827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F82793B58D5152FD1AFFA8F827F827F827F827F8272799%8CB58DB58CB58DB58CB58DB58CB58DB59327F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F87DFD23276FB593B527FD1CFFFD%0C275293B58DB593B58DB593B58DB593B58DB575FD1D277DF8272027F827%2027F8272027F8272027F8272027F8272027F8272027F8272027F8274BB5%8DB56F52FD1CFF277D7DA884A87D5927272027F82793B58DB58DB58DB58D%B58DB58DB58DB54B27F8272027F8272027F8272027F8272027F8272027F8%272027F827207D2720272727202727272027272720272727202727272027%27272027272720FD0427B58DB58D9A52FD0DFF7DFD0EFF7DFD08FFA88427%27202793B58DB58DB58DB58DB58DB58DB58DB52727202727272027272720%27272720272727202727272027272720277DF827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F8758CB58DB56F7DFD0C%FFA82727FD0DFF7DFD0BFF7D526FB58DB58CB58DB58CB58DB58CB58DB58C%75F827F827F827F827F827F827F827F827F827F827F827F827F827F87DFD%2027528DB593B58D9A52FD0CFF7D2727A8FD0BFFA8A8FD0BFFCA93B593B5%8DB593B58DB593B58DB593B58DB59352FD1A277D2027F8272027F8272027%F8272027F8272027F8272027F8272027F8272027F8276FB58DB58DB58D27%A8FD0BFFA827F8A8FD0BFFA8FD0BFFC38DB58DB58DB58DB58DB58DB58DB5%8DB58DB58DB56F27F8272027F8272027F8272027F8272027F8272027F827%2027F87D2727272027272720272727202727272027272720272727202727%2720FD0427B58DB58DB58DB54B7DFD0CFFA87DFD0CFF7DFD0AFFBC8DB58D%B58DB58DB58DB58DB58DB58DB58DB58DB58DB52727202727272027272720%2727272027272720272727202727277DF827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F8758CB58DB58CB58DB527FD19FF%A8FD09FFA1B58DB58CB58DB58CB58DB58CB58DB58CB58DB58CB58DB58C75%F827527DF827F827F827F827F827F827F827F827F827F827F87DFD1F2793%B593B58DB593B58D9A52FD21FFA0B593B58DB593B58DB593B58DB593B58D%B593B58DB593B58D9A52A8FFFFFFFD15277DF8272027F8272027F8272027%F8272027F8272027F8272027F8272027F8274BB58DB58DB58DB58DB58D51%52FD1FFF99B58DB58DB58DB58DB58DB58DB58DB58DB58DB58DB58DB59352%7DFD04FF7D2027F8272027F8272027F8272027F8272027F827207D272027%2727202727272027272720272727202727272027272720272727209A8DB5%8DB58DB58DB5934B7DFFA8FD0AFFA8FD11FFCA93B58DB58DB58DB58DB58D%B58DB58DB58DB58DB58DB58DB56F76A8FD04FFA820272727202727272027%2727202727272027272720277DF827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F8278CB58DB58CB58DB58C4B7DFD1EFFC28DB5%8CB58DB58CB58DB58CB58DB58CB58DB58DB58DB58C934B7DFD05FFA8F827%F827F827F827F827F827F827F827F827F827F827F87DFD1D2751B593B58D%B593B58D767DFD1DFFCABC93B58DB593B58DB593B58DB593B58DB593B599%7D4B52524B52FD06FFA8FD18277D2027F8272027F8272027F8272027F827%2027F8272027F8272027F82720758DB58DB58DB58D9927FD1DFFA1B58DB5%8DB58DB58DB58DB58DB58DB58DB58DB5A0FF84A8FFFFA8FD06FFAF4B7620%27F8272027F8272027F8272027F8272027F8272027F87D27272720272727%2027272720272727202727272027272720272727202793B58DB58DB58DB5%27A8FD1CFFA0B58DB58DB58DB58DB58DB58DB58DB58DB58DB5A1FD0DFF52%B59327272720272727202727272027272720272727202727277DF827F827%F827F827F827F827F827F827F827F827F827F827F827F827F8B58DB58CB5%8DB54B52FD1CFF93B58CB58DB58CB58DB58CB58DB58CB58DB58CBCA8FD0D%FFA8768DB5F827F827F827F827F827F827F827F827F827F827F827F87DFD%1C275293B58DB593B59352FD1BFFCAB5B58DB593B58DB593B58DB593B58D%B593B58DC3FD0FFFA87D7D5252FD16277DF8272027F8272027F8272027F8%272027F8272027F8272027F82720274BB58DB58DB59327A8FD1AFFC28DB5%8DB58DB58DB58DB58DB58DB58DB58DB593CAFD10FFA8FD04FFA87D7D2727%2027F8272027F8272027F8272027F827207D272027272720272727202727%27202727272027272720272727202727768DB58DB59352A8FD19FFA8BC8D%B58DB58DB58DB58DB58DB58DB58DB58DB599FD1BFF522727272027272720%2727272027272720277DF827F827F827F827F827F827F852FD04FF7D7D27%27F827F827F8274BB58CB5934BA8FD19FFA1B58CB58DB58CB58DB58CB58D%B58CB58DB58CB5A0A852FD1BFF2727F827F827F827F827F827F827F827F8%7DFD0D2752FD07FF7D52FD0527768DB593517DFD19FFC2B58DB593B58DB5%93B58DB593B58DB593B58DB6CAFFFFFF7D7EFD12FF7D7D7DA8A8A8FD1227%7D2027F8272027F8272027F8272027277DA8FD06FFA85227F8276FB58D52%7DFD18FFCA93B58DB58DB58DB58DB58DB58DB58DB58DB58DBCA8FD04FFA8%A8FD11FF27936F27F8272027F8272027F8272027F8272027F8272027F87D%272727202727272027272720272727202752FD07FFA87D207693527DFD18%FFC993B58DB58DB58DB58DB58DB58DB58DB58DB58DC3FD06FF7DFD12FFA8%4B9A272720272727202727272027272720272727202727277DF827F827F8%27F827F827F827F827F827F87DA8FD09FF7D5252A8FD16FFA8C28CB58DB5%8CB58DB58CB58DB58CB58DB58CB593CAFD06FF7DA8FD06FFA8A8FFFFFF7D%527D7DFD04FFA82727F827F827F827F827F827F827F827F827F827F827F8%7DFD1027A8FD24FFCABC8DB593B58DB593B58DB593B58DB593B58DB59AFD%08FF7DFD06FF7D7DFFFF7D5275BB939A52FD05FF52FD15277DF8272027F8%272027F8272027F82727A8FD24FFA0B58DB58DB58DB58DB58DB58DB58DB5%8DB58DB5A0FD09FF7DFD04FFA87DA8A8A875938DB58DB58DB54B7DA8FFFF%7D2027F8272027F8272027F8272027F8272027F827207D27202727272027%27272027272720A8FD1DFFA852A8FD04FF9AB58DB58DB58DB58DB58DB58D%B58DB58DB58DBCCAFD0AFF7DA8A87DA8FD05FFBC8DB58DB58DB58DB59376%527DFD04272027272720272727202727272027272720277DF827F827F827%F827F827F827F827A8A87D7D7DFD17FF7D27F82752FFFFCA93B58DB58CB5%8DB58CB58DB58CB58DB58CB58DBCA8FD0BFFA87D7DA8FD06FF93B58CB58D%B58CB58DB58CB54B27F827F827F827F827F827F827F827F827F827F827F8%7DFD13277DAFFD14FF52FD0527A8C98DB593B58DB593B58DB593B58DB593%B58DB593C9FD17FFB58DB593B58DB593B58DB59352FD16277D2027F82720%27F8272027F8272027F827202727FD14FFA82727F8272027209A8DB58DB5%8DB58DB58DB58DB58DB58DB58DB593CAFD17FFCA8DB58DB58DB58DB58DB5%8DB52727F8272027F8272027F8272027F8272027F8272027F87D27272720%2727272027272720272727202727FD14FFA827997527202727998DB58DB5%8DB58DB58DB58DB58DB58DB58DB59AFD19FFA0B58DB58DB58DB58DB58DB5%9327272720272727202727272027272720272727202727277DF827F827F8%27F827F827F827F827F827F87DFFFFA82752A8FD0AFFA8FFFF7D27938C93%F8274BB58DB58CB58DB58CB58DB58CB58DB58CB58DB5A0FD1AFFB58CB58D%B58CB58DB58CB58D75F827F827F827F827F827F827F827F827F827F827F8%27F87DFD112752A852FD04277DA8FFA8FD06FFA87D5275B58DB593766FB5%93B58DB593B58DB593B58DB593B58DB593BCA8FD1AFFCA8DB593B58DB593%B58DB593B551FD17277DF8272027F8272027F8272027F8272027F8272027%F8272027F827272827A8FD04FF27758DB58DB58DB58DB58DB58DB58DB58D%B58DB58DB58DB58DB58DC2CAFD1BFF9AB58DB58DB58DB58DB58DB58D27F8%272027F8272027F8272027F8272027F8272027F827207D27202727272027%2727202727272027272720272727202727272027272720A8FFFFFFA875B5%8DB58DB58DB58DB58DB58DB58DB58DB58DB58DB58DB593C9FD1CFFA8B58D%B58DB58DB58DB58DB58D9A27272027272720272727202727272027272720%27272720277DF827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827277DFFFFA84B8DB58CB58DB58CB58DB58CB58DB58CB58DB5%8CB58DB593CAFD1DFFBC8CB58DB58CB58DB58CB58DB54B27F827F827F827%F827F827F827F827F827F827F827F827F87DFD1E275293527EA851B58DB5%93B58DB593B58DB593B58DB593B58DB593B59AFD1EFFCA8DB593B58DB593%B58DB593B58D52FD18277D2027F8272027F8272027F8272027F8272027F8%272027F8272027F8272027F8998D756FB58DB58DB58DB58DB58DB58DB58D%B58DB58DB58DB54B287DFD1DFF93B58DB58DB58DB58DB58DB58D75F82720%27F8272027F8272027F8272027F8272027F8272027F87D27272720272727%2027272720272727202727272027272720272727202727274BB58DB58DB5%8DB58DB58DB58DB58DB58DB58DB58DB58D9927272752527DA8FD19FF9AB5%8DB58DB58DB58DB58DB58DB54B2720272727202727272027272720272727%20272727202727277DF827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F8276FB58DB58CB58DB58CB58DB58CB58DB58CB58D%B58C762027F827A8FFA8A8527D52A8A8FD13FFA1B58CB58DB58CB58DB58C%B58DB56F27F827F827F827F827F827F827F827F827F827F827F827F827F8%7DFD20275293B58DB593B58DB593B58DB593B58DB593B59376FD042752FD%07FFFD05A8FD0FFFA1B58DB593B58DB593B58DB593B58D52FD1A277DF827%2027F8272027F8272027F8272027F8272027F8272027F8272027F8272027%F8998DB58DB58DB58DB58DB58DB58DB58DB59327F827202727FD1BFFA1B5%8DB58DB58DB58DB58DB58DB58D99F8272027F8272027F8272027F8272027%F8272027F8272027F827207D272027272720272727202727272027272720%272727202727272027272720FD0427B58DB58DB58DB58DB58DB58DB58DB5%93272727202727A8FD1AFFA1B58DB58DB58DB58DB58DB58DB58DB5272720%272727202727272027272720272727202727272027272720277DF827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%4BB58DB58CB58DB58CB58DB58CB58DB54B27F82727FD1BFFA0B58DB58CB5%8DB58CB58DB58CB58DB54B27F827F827F827F827F827F827F827F827F827%F827F827F827F827F87DFD232793B58DB593B58DB593B58DB593B58DB599%5252FD1BFF99B593B58DB593B58DB593B58DB593B593FD1D277D2027F827%2027F8272027F8272027F8272027F8272027F8272027F8272027F8272027%F85293B58DB58DB58DB58DB58DB58DB58DB593A1FD19FFC393B58DB58DB5%8DB58DB58DB58DB58DB5934BF8272027F8272027F8272027F8272027F827%2027F8272027F8272027F87D272727202727272027272720272727202727%272027272720272727202727272027272720768DB58DB58DB58DB58DB58D%B58DB58DB58DBBA1FD15FFA1BB8DB58DB58DB58DB58DB58DB58DB58DB58D%762727202727272027272720272727202727272027272720272727202727%277DF827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F8768DB58CB58DB58CB58DB58CB58DB58CB58DB593C2%A8FD0FFFA1C293B58DB58CB58DB58CB58DB58CB58DB58CB58D75F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F87DFD26%27768DB593B58DB593B58DB593B58DB593B58DB593B593C2A1CAA8FD04FF%CAA8C9A0BC93B58DB593B58DB593B58DB593B58DB593B58DB59376FD2027%7DF8272027F8272027F8272027F8272027F8272027F8272027F8272027F8%272027F8272027F82720758DB58DB58DB58DB58DB58DB58DB58DB58DB58D%B58DB58DB58DB58DB58DB58DB58DB58DB58DB58DB58DB58DB58DB58DB58D%B58DB58D762027F8272027F8272027F8272027F8272027F8272027F82720%27F8272027F827207D272027272720272727202727272027272720272727%20272727202727272027272720272727202727768DB58DB58DB58DB58DB5%8DB58DB58DB58DB58DB58DB58DB58DB58DB58DB58DB58DB58DB58DB58DB5%8DB58DB58DB58DB58DB58D76202727272027272720272727202727272027%272720272727202727272027272720277DF827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F8758C%B58DB58CB58DB58CB58DB58CB58DB58CB58DB58CB58DB58CB58DB58CB58D%B58CB58DB58CB58DB58CB58DB58CB58DB58C76F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F87DFD2A277693%B58DB593B58DB593B58DB593B58DB593B58DB593B58DB593B58DB593B58D%B593B58DB593B58DB593B58DB593B59376FD24277D2027F8272027F82720%27F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8%272027F85293B58DB58DB58DB58DB58DB58DB58DB58DB58DB58DB58DB58D%B58DB58DB58DB58DB58DB58DB58DB58DB58DB5934BF8272027F8272027F8%272027F8272027F8272027F8272027F8272027F8272027F8272027F87D27%272720272727202727272027272720272727202727272027272720272727%202727272027272720272727202775B58DB58DB58DB58DB58DB58DB58DB5%8DB58DB58DB58DB58DB58DB58DB58DB58DB58DB58DB58DB58DB56F272727%202727272027272720272727202727272027272720272727202727272027%2727202727277DF827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F82727998CB58DB58C%B58DB58CB58DB58CB58DB58CB58DB58CB58DB58CB58DB58CB58DB58CB58D%B58C992727F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F87DFD30277693B58DB593B58DB593B58D%B593B58DB593B58DB593B58DB593B58DB593B58DB593B59376FD2A277DF8%272027F8272027F8272027F8272027F8272027F8272027F8272027F82720%27F8272027F8272027F8272027F8272027F8274B998DB58DB58DB58DB58D%B58DB58DB58DB58DB58DB58DB58DB58DB58DB58D994B27F8272027F82720%27F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8%272027F827207D2720272727202727272027272720272727202727272027%27272027272720272727202727272027272720272727202727272027274B%6F998DB58DB58DB58DB58DB58DB58DB58DB58DB58DB58DB58D99754B2027%272720272727202727272027272720272727202727272027272720272727%20272727202727272027272720277DF827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F8514B758DB58DB58CB58DB58CB58DB58CB58DB58D%994B4BF827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F87DFD3C27524B7675%766F9A999A75767552FD36277D2027F8272027F8272027F8272027F82720%27F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8%272027F8272027F8272027F8272027F8272027F8272027F8272027F82720%27F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8%272027F8272027F8272027F8272027F8272027F87D272727202727272027%272720272727202727272027272720272727202727272027272720272727%202727272027272720272727202727272027272720272727202727272027%272720272727202727272027272720272727202727272027272720272727%202727272027272720272727202727272027272720272727202727277DF8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F87DFD7F277DF8272027F8272027F8272027F8272027F82720%27F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8%272027F8272027F8272027F8272027F8272027F8272027F8272027F82720%27F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8%272027F8272027F8272027F8272027F827207D2720272727202727272027%272720272727202727272027272720272727202727272027272720272727%202727272027272720272727202727272027272720272727202727272027%272720272727202727272027272720272727202727272027272720272727%20272727202727272027272720272727202727272027272720277DF827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F87DFD7F277D2027F8272027F8272027F8272027F8272027F82720%27F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8%272027F8272027F8272027F8272027F8272027F8272027F8272027F82720%27F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8%272027F8272027F8272027F8272027F87D27272720272727202727272027%272720272727202727272027272720272727202727272027272720272727%202727272027272720272727202727272027272720272727202727272027%272720272727202727272027272720272727202727272027272720272727%2027272720272727202727272027272720272727202727277DF827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F87DFD7F277DF8272027F8272027F8272027F8272027F8272027F82720%27F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8%272027F8272027F8272027F8272027F8272027F8272027F8272027F82720%27F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8%272027F8272027F8272027F827207D272027272720272727202727272027%272720272727202727272027272720272727202727272027272720272727%202727272027272720272727202727272027272720272727202727272027%272720272727202727272027272720272727202727272027272720272727%202727272027272720272727202727272027272720277DF827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%7DFD7F277D2027F8272027F8272027F8272027F8272027F8272027F82720%27F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8%272027F8272027F8272027F8272027F8272027F8272027F8272027F82720%27F8272027F8272027F8272027F8272027F8272027F8272027F8272027F8%272027F8272027F8272027F87D2727272027272720272727202727272027%272720272727202727272027272720272727202727272027272720272727%202727272027272720272727202727272027272720272727202727272027%272720272727202727272027272720272727202727272027272720272727%20272727202727272027272720272727202727277DF827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F87D%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2008-05-14T17:06:17-05:00</xap:CreateDate>
         <xap:ModifyDate>2008-05-14T17:13:16-05:00</xap:ModifyDate>
         <xap:MetadataDate>2008-05-14T17:13:16-05:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A4PgZOxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ksk/LT/wAmP5U/7bGn&#xA;/wDUVHirG8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVZJ+Wn/AJMfyp/22NP/AOoqPFWN4q7FXYq7FXYq7FXYq7FVexsLy/u47Oziae5mPGKJ&#xA;erHwwqnvmTyB5h8vPDHepHJPInqSQ2z+s0W5+GXgCAwpvvt3yJkAaJbI4ZyiZCJMR1rb5sbwtbsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirJPy0/wDJj+VP+2xp/wD1FR4qxvFX&#xA;Yq7FWQeQvJt/5y81WPl+yYRPdMTLOwqsUSDlJIRUVoo2Hc7YUPZPPeu/lz+U97B5Y8v+V7HWtagi&#xA;STUtR1VBOymReSruK8mU8jx4qAR17KsS84edfIWu3HkzVtE8v2FhqMdxOnmLSFt0WCQ8oBHyCqqu&#xA;jgycT1G9cVZJ/wA5Q6B5a8ujQdP0PRbHTlu/XuLie3hWOZjFxRU5r+x+8JI8aeGKhNr/AEfyrH/z&#xA;jePNi+X9LGvvaRp9Y+qxg1e8W0aUD+fg9a/zb+2KEP8A849eT7OJ9UvrjTpLq7gsZUjlZKwmWRaP&#xA;EX4SfFxPFQFbbkSOmU4p8RJ6dHY6/SjBGEbBnKPFLvF8h8vxVMl/OfyhDM1pqwvbXSY7awRfQuUY&#xA;fWZmkZykQiAkVwCeZMRAqu3WlepjCrkd3P7A1WrhkMcEeIHmDy999PxzeEav5UutTIuLOE+qrJ68&#xA;pBVPTkYIJHPQUZhv/ZleknI7dHYe0+j08CMkDGOS6lAHy519/fzetefrLQfya07SLXSvJ9nrj3MZ&#xA;N55g1SH1wZgaGMbfuywqQoIFPHfM549hF9+Zf5ZanPomrXHk20sr6xuJm1fTrWNFtruEwOIqUUKP&#xA;3pFeSkjrU4pejeSL/wDLfzJ+XnmTzdN5D0q0bQlnMdoEWQSmG3Eygv6a8eTHj0xQxHyf5o8heb/z&#xA;C8r2Fp5N07Torr61bavYvDHNEw9MSwyxvxjIYGMjddveuKsj/MLUfIXlT8zNN8q/4G0i60u+S2M8&#xA;wgC3K/WZGiPAj4fhpUCn04qlX5uflz5T8jee/KepaPZQPp+rXLQ3eiXVZ4SFaNHZVk5HiyzePwtQ&#xA;jFKj/wA5Q6B5b8u/oGw0PRrHTku/Xnnnt4FjmYxcUVOY/Y/eEkeNPDFQstv8OT/8463vmY+XtLOv&#xA;QT/o764LSNSA0qJ6lAPtiOTY+O+KE11Dyxon5V/lvo2vQeVrXzPq+oqkmo6lfoZ4LUyRiRAqUIVa&#xA;txVhSvc7gYqxSX81fy21q0guNZ8mWNjq1leQTubCFBFd2ytWaJlotGIAHxkj3GKaeh/lfdflx530&#xA;TzDqjeQtLsRoqh44giS+oDG70ZvTSn93TpihinkzzX+XPnLzb5b0uHyVp2mXM11PFqFv6STQy25t&#xA;2dGVuMZV0kToR+ugVTL8xfN35Z+SvPU3l6f8vNMvLKBYXlukCJLxljDnihjK1Xl/Nv7Yq3+WOm+Q&#xA;PMX5y+ZdNtdI02/8sTWEeoacpgRvSZRbLwT+T+/YSL/MPbFUbpWp/lhqH5tX35f3nkjTIrYTTWtp&#xA;fwxUkMsKlqOANgwVhVT1xVKIfyH8rv8AntN5ZDyf4dhsBrBsy7c+HqLF9X9T7VPUatevHatd8U2g&#xA;fM35paP5W8zXfl6f8s9Hi0qznaM2tzbKLmaNG4rL6jIynmFDBuLfM9cVeWef9Q8saj5svb7yxafU&#xA;NEnWB7azK8fSb6vH6y0qw2m59DTw2xVj2BLsVZJ+Wn/kx/Kn/bY0/wD6io8VY3irsVdir2f/AJxQ&#xA;mto/zLuklIEk2lzpbg9S4mgc09+CthQWPfnpZtZ/nFrZ1SOV7eeaKcCNlR3geJKcGIkXanGtD0xU&#xA;Mp/NL8mvKvkGx0W/sru/ur3UL2KKKO5MKpGoo7lwiAk9qA4ot6T/AM5CefdM8rXmiR3vlfTPMJuo&#xA;52R9SiSUxcGQER8legblv8sVQmtax5dm/KbQvPl95ds20yCKS3uPL0CJHAYbq49KkRC/CUdQ4969&#xA;98KpQ/56vpUC2/lXTLTTdBSNmjFzzklLybrK0hkUU36EHt8XbMKeoo8MA9TpOwePGNRqMgjjO56n&#xA;y38/n058pT5P/LiLzP6nmDzbqT6nq00dVsXDoLb1ATGZYnETinUJxVfnjj0xJ4p811nb8YQ8HRjw&#xA;8f8AO/iP47/q9zDPzb89ahHa3PlGD6pqkdkbaCG4jt+DPcoPS4KrPLvWQg0NdjSmTjmufCBt+P7H&#xA;Cy9kmGjGpnKpSO0e+/P5l3kv/nJ2KGyGg/mDpclw8I+rz3saK7PxPE/WbaTj8Qp8RB/2OZLpKa/P&#xA;L8uPIF15Bi/MHydHDaw8omkFsPTgnhnk9OohIXhIkjDYAdwRtsqEF+UP/rPn5g/9HP8A1CJipYB+&#xA;Qn/k3fLn/GaX/qHkxUvbPzZ/NXQ/Jn5oWYvfKtnqk0drDN+lWC/XYlZ3FImdWA4UqOnXqMUJd+eH&#xA;kf173y7+YFtq9zfWs15ZRNbXRUpHDO4eN4AqoEX+ZSO9a4ql/wDzmDFL9d8sTcT6Rju05025BojS&#xA;vyxSEksUaH/nFLUTKOAudWUwV/bAmiBp9MbfdivVF/l1/wA5F6l5UsYvK/nTTJru0skEMU6ALdRw&#xA;8RwjeKTisi8COJ5D4adcVpk35keSPyv87flrf+efKMMNndWMclwZreP0A5hoZoZ4QFHPj0NK1oak&#xA;HFCUf84yf8oR57/4xL/1DzYhS81/IT/ybvlz/jNL/wBQ8mKS9c/OH81vLflzz/d6be+RtK1u6gjg&#xA;c6ldpEZ25Rqygs0MjfD0HxYoSn/nHOC/P5uarql1ZNYRa5pF1qdjC1P9559QiCFaAfDyRgDQVpXp&#xA;TFLPvJeleQ9R/MHzjqejWptvPml3F1EZL2Rp4A83JFuY41MfwMfhcDcDau9SoeAt50/M/QvzM1Pz&#xA;PeI83mDTHaPV43jLQLDUR+kwX7MJ+EKQfA1ril7Z5Z/O38sPzHmtPL/mjRUg1G7ZYbeK8jjuLdpn&#xA;2CRTU5ozNstVXem9cUPFvz4/LvTfI/nNbTSiw0vUIBd2sLsWaGrsjRcjuQCvwk70OKQ83wJdirJP&#xA;y0/8mP5U/wC2xp//AFFR4qxvFXYq7FUw8v69qmgazaazpcxgv7KQSwSUqK9CCD1VlJDDuMKvY9a/&#xA;Pn8vvN1rZyedfJP17U7Ifupre5aND3IqOD8Cf2GLDFFJJ+YP58N501fR5L7Q0j0XSLoXQsVuD605&#xA;FPhefgVVTToI/pxWkF+b/wCcNl+Y0OnMdCfS73TmcRzi8+sI0UoHNDH6EW/JVIbl47GuyqYXX54a&#xA;JcflgPy/byvL9RS3WKO8OoAyiVH9ZZafVaf3u5Xw2xWmBaD5pn00xpIX4RHlDNEaSRmtdtxXf3GY&#xA;2bT8RsbF33ZnbctPA4skRkwn+E9Pd+r7md3f57+aLmwNtPrl20LrxeNEVJCCKEF1CE+/xZUcOUii&#xA;XYjtHsqB44YZGXny/wB0R9jAJvM1xJqlpeenSGzmjnS35faZGDVZqdTSnTb765GHCIB0nanauTWT&#xA;uW0Ryj3ftep6v+dP5WeaHF55r8gCfVKASXNrcmMuR05PGIXP+yJy51dMa/Mj86L7zZpFr5c0zTot&#xA;C8sWXH0dOhbmz+mKR83og4qNwoHXck7YrSI8k/nDo3lv8v8AUPJ0/lyS/i1YznUb1b4QO3roIx6a&#xA;/VpeHCNVpVm3qe9MVpjH5b+cLDyf5pt/MF1pr6pNZhjaQLcfVlWR1KcnPpTFhxY7bb4q9A8w/nx5&#xA;E8x6omqa5+XMN/foixrNLqUn2EJKqVFuFIqx6jFaY9+aH54a/wCe7O30w2kOlaNbSLLHZwMzszqC&#xA;ql5CFqFB+EBQPworTJrL/nIXRtY8sQ6D+YflpfMH1YKI72OQJI5XYMwoCj06sjivhitMQ/Mj82Lj&#xA;zZY2Oh6bp0WheVtM3s9JgPIFxUCSRgqVNGNBTua1O+K0yyf87vy88wabZ2nnHyMt9cWMK28V5BcF&#xA;JSiAKo5qIpBsOnMiuK0k/nL87kv/ACkPJnlLRY/Lnlo/DNGJDNPKvLmVLkDiGb7e7FvGlRitKf5X&#xA;/nJpvkXy/qWlN5ffU5NWY/XLg3voApwKKiIIJONAx35YrTGPy+84WHlHzlb+Y20179LMyNaWf1j0&#xA;SrOpRS8gik5cVY/sip+7FXoev/n35F8waomq61+XFvfX8aiMTS6gxqq1oGUWwVqV/aBxWl9n/wA5&#xA;HafbedpvNaeVWFw2mxaRbWi34WKG3jlMrUAtv2m402FKe+K0xS2/Nx9P/NSXz5pOnPaLdSM99pb3&#xA;IlEolH75PV9JOKs1GHwHicVpmUv/ADknoUnmZvMX+CUXUbi1bT792vuaz2rMr8XT6uqllMYCse1R&#xA;4UVpCWv5v/k/peqJr2j/AJe+hrsJLW7G6KwRuQaMsY5Rgg9KRg+FMVp5r568763508wza5q7L67q&#xA;I4YYwRHDChJWNASTQcid+pJOKsfwJdirJPy0/wDJj+VP+2xp/wD1FR4qxvFXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FV0UUksiRRI0ksjBY41BLMxNAABuSTir3DyF/wA4s+Y9XhS+80XP6EtXAZLJFEl2&#xA;wP8AOCeEX01PiBhRaafmd/zjFp2h+V7nWfK17eXc9gvrXVld+nI0kS/baIxRxUKD4qEGoritvnnA&#xA;l2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVkn5af+TH8qf9tjT/APqKjxVjeKuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxVnn5efkt5188AXNhAtnpNaNqd1VIiQaERgAtIR/kiniRhRb6H/Lr/nHPRfJ2qQ6&#xA;ydYubzVoVKo6xW6QjkKNRJUuGB7cg4NMUPXsVU5p7eGKSWeRI4YlLSu5CqqgVJYnYCnjirwLWNe/&#xA;5xw8meYbzzBp6Q6vq8oJj0yzVLm1SatfUidlMcLE7Hi9B2XFXzXrWpHVNZv9TaJIGvriW5MEQoiG&#xA;Zy/BB/KvKgxZIPArsVdirsVdirsVdirsVdirsVdirsVdirJPy0/8mP5U/wC2xp//AFFR4qxvFXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FWY/lJ5H/xp560/R5AfqIJudRYVBFtDQuKjpzJCA+JwoL7aiv7e01a1&#xA;8u2NmRFDa+tI6AJDbwKfShQbbs7KQqjoFJPaqhNsVSaxvPMia5c2WpWkT6bLyk03UbXkAqgj9xcx&#xA;uWKyU3Dr8Lf5JoCqxP8APjQJtR/L7Uby2d0l05EurqFD8NxaQSLLNDKOhUKnMe4p0LYCLDKBAIJ3&#xA;fMR03TSa/VYDXuI0p+AzUeJMdS+vYuz9JKIlHHjMSLHpHL5NnT9PK8fqkFP+MUdfvpXEZZjqWvJ2&#xA;Ho5c8cfht9yEm8uaPIpAhMTE1LxswPWuwYso+7LBqphwM/srpJ/TxQ9x/XaXXPlDqbW4HXZJR0H+&#xA;utan/YjL46wdQ6HVeyOaO+KQn5H0n9X2hJLzTb6zP+kwsgJoH2Kk9aBlqv45lQnGXIvNajS5cMuH&#xA;JExPmhsk47sVdirsVdirsVdirsVdirsVZJ+Wn/kx/Kn/AG2NP/6io8VY3irsVdirsVdirsVdirsV&#xA;dirsVcASaDrir6h/5xK8qTWmk615iuYij3kq2NtyFGCW9WlNCOhdwvzXCEF6B+a3nnXfLF55VttL&#xA;jiEWt6pFY3l1MjSiNHZRQKCu7cievRdvEKHoGKvPvyf88+YPOdnrep6jHBDaW2pz2VlbxKyyRpCk&#xA;bDmxZhIW9XrRaEd6/CqybzwiyeSvMCModX028VlIqCDA4oRir47s6fVIKGo9NKE71HEb1zTZPqPv&#xA;fZOzP8Vxf8Lj/uQq5BznYq7FXEBlKsAysKMpFQR4EHY4Qa5NWbBDLHhmBKPmkepeV7eYGSyIhl6+&#xA;ka+mx9u6/q+WZeLVkbSeN7T9lBvPT/6U/oP6/mxi4t57eZoZ0Mci9VP+e498zhIEWHicmOUJGMhU&#xA;h0U8LB2KuxV2KuxV2KuxV2Ksk/LT/wAmP5U/7bGn/wDUVHirG8VdirsVdirsVdirsVdirsVXwwyz&#xA;SrFEpeRzRVHUnEmkxiZEACyWb+V/KF7calZ6Zpsf1rX9Rf0rfascIArJKetEjX4mb6B3zEEjllQ+&#xA;j73pMukj2diEp0dTP6R0h/S/rd3S+XJ9oeUfLVl5Y8t6foVkS0FjEI/Ub7Ujn4pJG93clj88zHmE&#xA;0khhl4+oivwYOnIA8WHRhXoRiq/FVG0sbKzjaOzt47aN3eV0hRYw0kh5O5CgVZmNSe+KqksUcsbx&#xA;SqHjkUq6MKgqRQgj3xV8hecvKNx5R8x3WhScjbwn1NNlap9Szcn0jU9TH/dt7rXuM1uqx1K+hfRf&#xA;ZTtAZMJwn6ocv6p/Uf0JJmK9a7FXYq7FXYqhtQ021v4fTnFGH93Kv2kPt7eI/wBvLcWUwOzp+1ex&#xA;8WsjvtkHKX6D3j8Bheo6dcWE/pTCoO6SD7LDxGbPHkEhYfMdZo8mmyHHkFEfb5hC5NxXYq7FXYq7&#xA;FXYq7FWSflp/5Mfyp/22NP8A+oqPFWN4q7FXYq7FXYq7FXYq7FXAEkACpOwAxVmeiaTHp1u009Bc&#xA;spaZzuI0AqQKe32j/mddnzGZ4Ry+99A7E7Kjo8R1Of6qv+qP+KP7H0r/AM4/eRxpmgHzTfxcdW11&#xA;A1urj4oLAGsMYr0Mn941OtR4Zn48YhGniNdrJanNLJLmfsHQPWcm4jsVSG/v/OI1+2srHSrY6Ozq&#xA;1zq8tzVliAq6C2Cq3qE/Cp5FR1P8uKp9irsVedfnr5KPmTyNd3FmWj1rR43u7CeMlXKoOU0NQQaS&#xA;IvT+YL4YDEHYsoTlE2DRfGCa1qySCT63KzDp6jGQfc/IZX4MO4OZj7R1EPpyTH+cUwtfNt2lBcxL&#xA;MN6svwNU/Kq7f6uUy0kTy2d1pfarVY/rrIPPY/MfpBT2w1iwviFhkpKf90uOL/R1B+g5iZMEo+56&#xA;zs/2i0+oqJPBPuP6Dy+4+SNyl3zsVdiqhfWMF7bNBMNjujj7SN/MMsxZDA2HVdrdlw1mLhO0h9J7&#xA;j+rvYLeWk1pcPBMKOh6joR2I9jm2jISFh8pz4J4pmExUoqOFqdirsVdirsVdirJPy0/8mP5U/wC2&#xA;xp//AFFR4qxvFXYq7FXYq7FXYq7FXYqyHytpnN/r8o+GM0twf5x1f/Y9vf5ZiarLQ4R1ep9meyvH&#xA;yeLMeiH2y/Zz+TJWshfyQWBJUXtxb2xYGlBNOkbb/JjmPpRcw9H7VZTHRkD+KQH6f0PtiCCGCCOC&#xA;FBHDEoSNF2CqooAPkM2j5ivxV2KsKsPze8m33n258kQzSjWLcunqOgEEksY5SRRvyLF0ANaqBsaH&#xA;FWa4q7FVsgjMbCSnp0PPlTjxpvWvbFXz1+Xf/ONXkfWfKWna1qlzqDz6jF9YSNJI40WJyTFQekWq&#xA;UoTU4raeX3/OJv5eTR0tL7UrWUA0b1YZF+lWiB+5hitvO/NX/OKHm/T0efy/fwa1Eu4t3H1W4Pso&#xA;ZmiP0uPlim2C2Nv5nsbybTdcspraa3JDtcoY5AaVCkNQvXsw/VTNfqscRuOb3Hsx2jqpy8MgzxDr&#xA;/N+PX3fLYI/MN7l2KuxVK/MOli9tDLGP9JgBKeLIN2T+I/tzJ02XhNHkXk/afsrxcfjQHrhz84/s&#xA;+5hmbJ87dirsVdirsVdirJPy0/8AJj+VP+2xp/8A1FR4qxvFXYq7FXYq7FXYq7FVW2t5Lm4jgj+3&#xA;KwVa9BXufYd8EjQss8WOU5CMd5SNBn8EEVvBHBEKRxKFXx27mnc9T75p5yMjZfYdBpI6fDHHH+Ef&#xA;M9T82rhJ3hYQSGKccXhkFNpI2Dxnf/LUZLFPhkC43bOjOo00oR+rmPeP18n195D83Wfm3ytY63bf&#xA;C8ycLuD9qG5T4ZomHUcW6V7UPfNw+REUyDFXYq8Oi/ILVoPzt/xjBeQroLXb6o68m+sevIS7Q8aU&#xA;4tIxNeX2dsVe44q7FUh86y3jaFLptgeOpav/AKBaOBX0zOCJJj7Qxc5P9jTqcVTfT7G20+wtrC1X&#xA;hbWkSQQJ4JGoRR9wxVXxV5f+Yv51adogk03QSl9qwqsk/wBqCA9N6fbceA2HfwzDzaoDaPN6nsf2&#xA;bnnqeX04/tl+ofgd75/1LU9Q1S9lvtQuHubuY1kmkNSf6AdgMwCbNl9DwYIYoCEBwxHRC4G52Kux&#xA;VsEg1HXFBFsL17TTa6kVhT91cfHCqjoWNCgAHZug8KZtcGTij5vknbOg/K6iUB9POPuP6uSFv9J1&#xA;XTjGuoWc9m0y84hcRPEXX+ZeYFR7jL3VoXArsVdirsVZJ+Wn/kx/Kn/bY0//AKio8VY3irsVdirs&#xA;VdirsVdiqf8AlK0D3Mt0w2hXgnY8nruP9iCD88xdXOo13vTeyuk8TU8Z5YxfxOw/SfgyjNc+lNSS&#xA;RxRtJIwSNAWdz0AGEAk0GjU6iGGBnM1GL2b8lfKf5haCk/mP0Fg0fUlRpfL8u13MoG10oJCRS8SK&#xA;Ix+IfaoaHNvhgYxol8i7S1UNRnlkjHhEj+D7y90VgyhhWhFRUEH7jljgt4qxzzDrfm6zuFtdH8un&#xA;Umn+GG9N1DFbxVG7XAeko4nekaNUd6mmKsgtxOsEazsrzhVEroOKl6fEQpJoCe1cVX4qsMMRmWcq&#xA;DKqlFc9QrEFgPCpUV+QxVR1LU9P0yylvtQuEtrSEcpJpDRQP4nwAyMpCIstuHDPLIQgOKR6PAPzF&#xA;/Oq/1r1NN0AvZaUarLcfZnmHTt9hD4dT38M1ubUGew2D6D2P7NQw1kzerJ3dB+s/Z97y3Md6x2Ku&#xA;xVuh+7rii3AEmg64qTTKfI/5c+Y/N84axjEGlq1JtVnB9EU6rGBQzOPBTQdGZTmVi0pludg8j2r7&#xA;UwxXDB65fzv4R+v7ve988u+QPI/kTTpNTdY/WtYzJd61e8TIqqPiKsQFiX/JQCvepzYQgIig8Hqd&#xA;Vkzz48kjKX4+T5g/PP8ANuPz/rNtFYQmHRdKMq2buKSzNIVDysP2QQi8V7d/aTSHmOBLsVdirsVZ&#xA;J+Wn/kx/Kn/bY0//AKio8VY3irsVdirsVdirsVdirM/LMKx6PEwNfWZ5G9jXhT7kzW6qVzrufR/Z&#xA;PT8GmM63nL7Bt99ppmM9Sz38lvJCeaPNZv7yP1NE0FlkmRqFJr0isUR23EQ/eMPHiDmw0mKhxHq+&#xA;ce1PafjZfBgfRDn5y/Zy99vp3Mx5R2KuxV2KuxV2KsZ87fmDoHlG0El/J6t5IK21hEQZX9z/ACr/&#xA;AJR+ip2ynLnEPe7Ps3snNq5VAVEc5HkP1nyfN/nPz7r3m299bUJOFtGSbayjqIowfb9pqdWP6ts1&#xA;mTIZmy+mdm9k4dJGoD1HnI8z+zyY3kHZuxV2Ksk8meQtf82Xvo6fFwtUI+s30gIijB9/2m8FGTx4&#xA;zM0HV9pdrYdJG5m5dIjmf1Dze2n8hPJUmk2enztcH6vMLm4uYnWKaeQI0YDSBS6RhXb4EYe9c2eP&#xA;BGIrm+ba/tjPqcgmTw8P0gfw/t81eP8AIn8uxfw3Mtk80NuKQ2Uk88kB6byiR3aU/wCseP8Ak5YI&#xA;Acg67JmnM3Ik+8s/gggt4Ugt41hgiULHFGoVFUbAKooABkmt86fnz5yk1/WLjyrbycdJ04+lcUqB&#xA;LdlfiZugKwcqKOnPkey0xdRn4SAHo+xexvzOLJll/CCIj+lX6NnzZmS887FXYq7FXYqyT8tP/Jj+&#xA;VP8Atsaf/wBRUeKsbxV2KuxVlvlH8qPP/m6za90DSWurJHMTXLSQwpzABIUzOnKld+NcKFfW/wAm&#xA;PzR0WFp7/wAu3QhQVeS34XQUeJNu0tBitsMZSpKsKEbEHqDgS1ir0DTgo060C9PQiP0lAT+OajMb&#xA;mfe+tdh4+DR4x/Rv57/pT7yn5S1vzZrS6Ro68XAD3t868obSEn+8f+Z2/wB1x9zufhGW6fBxGz9L&#xA;q/aHt38uPCxH96eZ/m/t+7n3Pq3yr5W0jyvodvo2kxGO1twSWY8pJJGNXlkb9p3O5P8ADNm+bpti&#xA;rsVdirsVdiryn8xPzusdJ9XTPLpS81IVSW8PxQQnp8P+/HH/AAI9+mYWbVVtH5vWdj+zM81ZM3px&#xA;93U/qH2/e8Dv9QvtQvJb2+ne5upm5SzSEszH5nMAm30HDhhjiIwHDEdAh8W12KuxV6B5A/Lmy1PX&#xA;LW18zXf6M+sxC5stNk5RXF5HUisRYBabbhSWpvQDfMnDpjLc8nku2PaaGG8eH1ZO/oP1n7PufR+l&#xA;WOl2NjHaaZFHDZwVjSOGnEFCVYbdwwIau9eubGMREUHz7NmnkkZTPFI9UXkmt2KuxViM35V+S7uO&#xA;5XUdNhuJLm5ubl7hA9vMxupnnYPJCyM3FpCASelMjKIPMNuLPPGbhIxPkaYnqv8Azi/+Vt7zMEV7&#xA;p7vU8oLlnoSa/wDHwJq5Jqt4B+cv5O3H5eXto8d8L7S9RMgtJGHCZWiCllkUbH7Yow6+AxS83wJd&#xA;irsVZJ+Wn/kx/Kn/AG2NP/6io8VY3irsVdirK/J35p+evJ8Zh0HVHgs2cyPZuqSwMxABPCQNQmgq&#xA;VocKH1H+TP5wap52sT+mtIawlD+lb6lCj/UriRRVo1Zq8JAN+PI18e2KE/8AO35PeQfOAeTVNOWK&#xA;/bpqNrSG4rvuzAUfr+2Dir5+87f84tecdJZ7jy5Mmu2Q3EPwwXSj/UY8H/2LVP8ALim0l07y9qs2&#xA;s2Plz6u2majcssKJqKPbJEqgcncyhKhB2WpY7L45gDTSMzfJ7mftLjxaOEMJvKIiPL6aFX5+X29z&#xA;6x8k+TNJ8oaDDpOnAtx/eXV0/wDezzN9uWQ+J7DsNhmeBTw8pGRJJslPsWLsVdirsVQmq6vpuk2M&#xA;l/qNwltaRCryuaD2A7knsBkZzERZbcGCeWYhAcUi+ffzF/OfUtf9XTdG52OjklXk+zPOvT4iPsof&#xA;5R9Phmtzagz2GwfROx/ZuGCsmX1ZPsj+s+fy73mWY71LsVdiqK03TNQ1O9isdPt3ubuY0jhjFWP9&#xA;AO5OECzQac+eGKBnM8MR1fQH5dfktp2ienqWvBL7Vtmjg+1BAeuwP23Hidh28cz8OlA3lzfPO2Pa&#xA;SeovHi9OP7ZfqHl8+5kn5jWukajpUGi3dnHe6jqkv1fSUcVaGbiWa6Vx8cYt0BkLKQduINWGZjyy&#xA;e6Bo1vouj2ul27ySx2qcTPMxeWRySzyyMftPI5LMfE4qiLzULCxiEt7cxWsTMEWSZ1jUsegqxAqc&#xA;VW6lqmm6ZZyXupXUNlZxbyXFw6xxr82YgYqlmj+efJuszi30rW7K9uDusEM8bSEeIQHkR8sVYr+c&#xA;9h5+m0q3ufLF1cLaw8xqNlYlo7pg1Ck0ckZWVuFCDGhqa1+KlMryCVenm5ehlhjlBzAyx9afLV9+&#xA;Z35jadqtxFa+aNU4xuBxlvJpgCvUUlZ+h64YE0L5sdWMfiy8P+74jw+69vNjWueY9e166F3rWoXG&#xA;o3AHFZLmRpCq9eK8ieI9hk2hLsCuxV2Ksk/LT/yY/lT/ALbGn/8AUVHirG8VdirsVeifkt+XWjec&#xA;dcuX13UI7HRNKRJrxWkWKSbmSFRWYjivwnm3bp1NQUF9caJ5q/LiOO20XRda0jhAFitdPtbq2YqF&#xA;NAqxo5PX2xQyXFXYqtkjjkXjIodag0YAio3HXFV2KuxVI/Nnnfyr5Ssfrmv6jFZRN/dI1WlkI7Rx&#xA;KGdvoG3fFWH+Q/z48ued/NUmhaRaywrHE8y3F4wieUIQCIokEgPWvxOp4706jFWReefzF0HyjaVu&#xA;n+sahIK2+nxkeo3+U38ie5+iuUZc4h73a9mdj5tZL07QHOR5ftPk+b/N/nfX/NV8bnU5v3KEm3s0&#xA;2hiB7Kvc+LHfNbPIZGy+l9ndl4dJCoDfqep/Hcx/IOydirsVZP5J/L7XvN156dino2UZAub+QH0k&#xA;9h/O/wDkj6aDfLMeIzOzqu0+18Ojj6t5nlEcz+oef3vpHyb5D0DynZ+jp0XK5kAFzeyUMshHif2V&#xA;r0UbZs8WEQG3N8z7R7UzaufFM7dB0H472RZa65hHnSbVdI83aH5ki0u61fS7a1vbG8hsYzPcQNct&#xA;BIk6Qj4nH+jlG47iuKoy180eYtbBTRtDuNNiP2tR1uM26rX+S0DfWJD7N6Y/yu2KoGX8p9OudZi1&#xA;691jUrjXI4zGL13gZVDEE+jDJDJHANtvTANOpO5Kr5w8w6xqGr6k89/ez6h6UjfVpLmRpeChjxKA&#xA;/Chp/IBmolqJy5l9U0Hs/pcMQTHinXOW/wBnL7EuqagnchgwPgymob5g7g5XGRBsO11GkxZocGSI&#xA;lH8cu74PS/KP57+Z9GjW01aIa1ZIKJJI5ju0A6D1OLiUf69G8XOZ2PVjlJ4ftH2TyRlxac8Uf5pN&#xA;EfHkXk35zectG83edH1bS9NbTQIVgvI5PT5yXEbvzlb06rupVevbMwG93kDEg0WC4q7FXYq7FWSf&#xA;lp/5Mfyp/wBtjT/+oqPFWN4q7FXYq7FXs/8Azjd+Vq+ZtdfzHqaK+iaPJxWBwGW4uitRGwII4IrB&#xA;mr1qB44UF9IWHnb8vLHVj5UttZtotQt9lsXmY8S24jjeQlSR0Eat8PSgxQyrFXYqtMkYkWMsBIwJ&#xA;VCRUhaVIHtUYqwD8yPzf0byrFJp9iyaj5kdf3VkprHBXYSXTL9hR14/bbsO4hOYiLLlaPR5NRkEM&#xA;YuR/Fl8kfmBd6tqmrLq2p3cl9eXYKyzydeSGtFQfCiUaiqvSmVYM3Hbse2eyfyUoC74o8/6V719i&#xA;I8mWmraHq1rrsMzWd/aNztQoHIEgqeYYEUKkgr9+VZtVW0XZ9j+zUs1ZM/ph3dT+ofb96e3l7d31&#xA;1Ld3kz3FzM3KWaRizsx7knMB9AxYo44iMRUR0Chi2OxV2KvV/wAu/wAkb3VvS1PzGHs9NNHisx8M&#xA;8w6jl/vtD/wR9uuZWHTGW52DyHbHtPHFePB6p/zug93efs973yw0+y0+zis7GBLe1gXjFDGAqqPk&#xA;M2MYgCg8BlyyySMpG5Hqr4Wt2KuxV2KpF561hNH8oatqDEBorZ1iqaVkkHCMf8GwyrPKoEud2Zpv&#xA;G1EId8hfu5n7HyFmofZHYq4tGgLSNxjXd2PZR1OECzTTqMvh45T/AJsSfkLedSyPLK8rmruxZj7k&#xA;1Obp8VJW4q7FXYq7FWSflp/5Mfyp/wBtjT/+oqPFWN4q7FXYq7FU303zf5o0vSbnSNO1W5s9NvG5&#xA;3NrBK0aOxAUk8SOqgA+I64UJRgSzPQ/zi/MrRNLl0uw124WyljaJY5OMrRhhSsLyBniIrtwYUwop&#xA;7R+Tn/OSEl9Kmh+dnVZqAW+tgBUO4UC6AAVNyP3g2/mp1xtaZX/zkDFrdvpGm69pGoz2kEUhsNQW&#xA;2f02kgvWThSRaMo9WNA3FhUH2yGQkRJHNydFHHLNEZb4CaNPn6ONI14ooUE8jTux6sfEnuTmolIy&#xA;Nl9e0ujxaePDjiIj8czzPxXEA0qAeJ5LUA0IqKjwO+AEhsy6fHkMTKIJibF9C7A3OxV2KozSdI1L&#xA;V7+Ow023e5u5TRIkFT7k9gB3JwgEmg0ajU48MDPIeGIfQX5c/kzp2gelqWtcL7WAAyR05QQHr8IP&#xA;23H8x+jxzYYdMBvLm+d9se0c9RcMfoxfbL3+Xl83pmZbzDsVdirsVdirsVeI/wDOQnm1WNr5Ytnq&#xA;UIutQoehp+6Q/QSx+jNfq8lnh7nufZHs/wCrUSH9GP6T+j5vE8w3uXYqgNeuvq+lTsDRpR6KbVqZ&#xA;NmH/AAHLL9NG5jyec9p9V4ekMesyB+k/dXxYPm0fMnYq7FXYq7FWSflp/wCTH8qf9tjT/wDqKjxV&#xA;jeKuxV2KuxV2KuxV2KovSb36nfxTn+7B4yjr8DbNt7dR75DJDiiQ5Oj1Hg5YzqwOY7xyI+I2ekya&#xA;5rM2kx6RJqE8ukxMjw2TSs0KsjckKKSQAp+yo+EdhmuOonXCX0XB7O6IzjmgCRtIC/T3g9/2oLKH&#xA;onYq7FXYqhdR1O1sIuczVciscQ+03b6B7/7WW4sJnydP2r21i0Yo+rJ0j+vuH4DOPyA84fmHPq+p&#xA;23l7SbDULSKMXF5HcH6vIF5BEjjugG+Jt2AcFdj0zZYsUYcnzTtDtLNqp8WQ+4dB7nusP5q6bakR&#xA;+aNK1HyzPuGkvLdpbQsOvG7tvWhp7sVy1wGQ6b5v8qanGJNO1mxvEYVBhuIn+/ixpiqYRXtnM/CG&#xA;eOR6V4o6safIHFVbFXYq7FWP+ePONh5U0KXUbkhpzVLO2JoZZSNh40HVj4ZVmyiAvq7Dszs+eryi&#xA;EeXU9w/HJ8n6nqV5qeoXGoXshlurpzJNIe7Mf1eGakm9y+uYMEcUBCAqMRSFwNzsVYr5rvhLdR2q&#xA;GqwCr0/nb5eC0/HNlpcdRvvfMvafXeNqeAfTj2+P8X6vgkWZLzjsVdirsVdirJPy0/8AJj+VP+2x&#xA;p/8A1FR4qxvFXYq7FXYq7FXYq7FXYqy7yzqX1m0+rSGs1uAFr3j6D/gen3Zr9Vio8Q6vfeynafFD&#xA;8vI7x3j7uo+H3e5OcxHsnYq7FUDrN7c2dkZreL1G6M/URjszDv7dvHwN+DHGUqJee9oO0s+mxg4o&#xA;8/4v5vw7/fsxzQ9B8w+a9bj0/S7eS/1K5NeK70UUBZ2OyIvidhm0AA2D5lPJKRMpGyX2n+UP5a2v&#xA;kHyqmnllm1W6In1W6SvF5aUCJWh4RjZfpPfC1s4xVLLvyv5ZvJPVu9IsriTrzlt4nbf3ZT4Yqq6d&#xA;oOh6a7Pp2nWtk7ji7W8McRI60JQLXpiqOxV2KpH5u85aJ5W0xr3UpQGIIt7VSDLM4/ZRf1noMqy5&#xA;RAbudoOzsuqycGMe89B73y95x846v5q1d9Q1B6KKrbWyk+nDHX7K/wAT3zV5MhkbL6p2b2bj0mPg&#xA;h8T1J/HIJFkHYOxVDajfR2Nm9w9CV2jQ/tOfsj+J9stxY+OVOo7a7SGkwGQ+uW0ff3/BgckjySNJ&#xA;IxZ3JZ2PUkmpObYB8mJvcrcVdirsVdirsVZJ+Wn/AJMfyp/22NP/AOoqPFWN4q7FXYq7FXYq7FXY&#xA;q7FVW0uprW5juITSSM1Feh7EH2I2OCURIUWzDmlimJwNSjyZ3Y3sF7bLPD9k7Mp6qw6qc1OTGYGi&#xA;+s9ldpw1eLjH1D6h3H9R6K+VuzdireLGURIURYLPfyl/MDQfJMlzDNo0YjvnDXGoWwpcUGwUqx4l&#xA;B14rx+nMvHqyNju8f2j7JwncsB4T/NPL4HmPt+D6B0Hzt5V15FOl6lDPIwB+rluEwr4xvxf8MzIZ&#xA;oy5F4zVdm6jTn95Ax8+nz5J3lrhOxV2KoDVtf0TSIjLql9BZpSo9Z1Ukf5Kk1b6MhPJGPMt+DS5c&#xA;xrHEyPkHlvm7/nILToFe28s25u5twL64UpEPdIzR2/2XHMTJrP5r1fZ/slkl6s54R/NG5+fIfa8U&#xA;1nW9W1q/e/1S5e6upOsjnoP5VA2VR4DbMKUiTZe402lx4IcGMcMUDgch2KtMyorO5CooLMx6ADcn&#xA;CASaDTnzwxQM5mox5sK1vVW1C5BUFbeKohU9aHqx92pm1w4uAeb5P2r2lLV5jM7R5RHcP196XZa6&#xA;12KuxV2KuxV2Ksk/LT/yY/lT/tsaf/1FR4qxvFXYq7FXYq7FXYq7FXYq7FUZpeqT6fcepH8UbbSx&#xA;HYMP4Edj/DK8mMTFFzNBr8mlyDJD4+Y7ma2l5b3kAnt25Ietdip8GHY5q8mMwNF9T7O7SxavHxQO&#xA;/UdR+OhVsg7F2KuxVsEggg0I3BGKE7sPO/nDT14Wes3kUfaP1nKf8CxK/hkhOQ5EuBl7K0uT6scP&#xA;kEyX82PzEVQo1uag23WMn7ytcn48+9xT7PaL/Ux85frQV5+YPne7ThPrl6UPVVmeMH5hCtcicku8&#xA;/NyMfY+khyxw+Iv70hlmlmkaWZ2kkbdnclmJ9ycg7CMREUBQWYsnYq7FWndUUu7BUUVZiaAD3Jwg&#xA;Emg1Z88MUDOZ4YjqxLXddN4fq9vVbRTu3QyEdz4KOw+k+2ywYODc83zHtrtqWslUdsQ5Dv8AM/jZ&#xA;JsyHROxV2KuxV2KuxV2Ksk/LT/yY/lT/ALbGn/8AUVHirG8VdirsVdirsVdirsVdirsVdiqJsdQu&#xA;rGb1bd+JOzod1YeDDIzgJCi36bVZMExPGeGQZbpeuWl/SOvpXP8Avlj9o/5B2r8uv6812XTmO43D&#xA;6H2X7S4s9Ry+jJ/sT7j09x+aY5jvTOxV2KuxV2KuxV2KuxV2Koe+1C0sYw9w/Gv2EG7t8l/idssx&#xA;4pT5Op7S7ZwaQeo3P+aOfx7mI6rrl1fnh/dWw3EINanxY7cjmyxYRD3vnHaXa2bVyue0RyiOQ/b5&#xA;pdlrrHYq7FXYq7FXYq7FXYqyT8tP/Jj+VP8Atsaf/wBRUeKsbxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KptYeZdQtgElP1mIdnPxgez9fvrlGTTxl5F3Gg7d1Om2ieKH82W4+HUfBPbTzJpc4AdzbyGgKSD&#xA;ap8GFRQeJpmJPSyHLd6/Se1mnybZAcZ+Y+zf7EzidJULwssqDq6EMv3rUZjyiRzDvsGuwZfonGXx&#xA;3+XNvA5bsVdirdDQt2XcnsMQLasuaGMXOQiPM0gLnXNKtx8VwsjUBCxfvCR7Ffhr8yMvhp5npTpN&#xA;V7S6TFyPHL+j+vl8rSS982XL1S0jEK9PUajv9A+yKj5/PMqGkiOe7ymu9qNRm2x/u4+XP5/qpI5J&#xA;ZJZGkldpJG3Z2JJJ9ycygKebJJNnmtxQ7FXYq7FXYq7FXYq7FXYqyT8tP/Jj+VP+2xp//UVHirG8&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVRQ1XVAvEXk4X+USPT9eROOJ5gN2PU5IfTKUfcSFS&#xA;PXNWjUKtyxA/mox+9gTkfBh3Byf5U1X+q5P9Mf1rX1nVWfn9blVunwMU/BaYfCh3BhPtLUyFHJMj&#xA;+sf1oea4uJ25zyvK/Tk7Fj95yYFOIZE81PFDsVdirsVdirsVdirsVdirsVdirsVZJ+Wn/kx/Kn/b&#xA;Y0//AKio8VY3irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirJPy0/8AJj+VP+2xp/8A1FR4qxvFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWSflp/wCTH8qf9tjT/wDqKjxVjeKuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ksk/LT/AMmP&#xA;5U/7bGn/APUVHirG8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVZJ+Wn/kx/Kn/bY0/wD6io8Vf//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:B2A0AE39236911DD8A9DF94249265D57</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:B2A0AE3B236911DD8A9DF94249265D57</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>11.000000</stDim:w>
            <stDim:h>8.500000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -499.333 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 499.333 li
497.334 499.333 li
497.334 0 li
cp
clp
[1 0 0 1 0 0 ]ct
497.334 499.333 mo
0 499.333 li
0 0 li
497.334 0 li
497.334 499.333 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
407.511 268.921 mo
398.355 268.954 399.637 271.544 399.637 271.544 cv
401.632 274.876 406.974 278.407 407.773 278.929 cv
407.836 276.2 407.814 273.462 407.721 270.706 cv
407.611 269.624 407.511 268.921 407.511 268.921 cv
cp
391.515 285.095 mo
389.525 283.632 384.35 281.202 383.106 280.759 cv
381.865 280.313 379.418 280.093 377.152 280.405 cv
374.891 280.714 371.355 282.063 369.667 282.866 cv
367.979 283.669 359.691 286.19 359.691 286.19 cv
358.281 302.997 352.398 330.833 321.576 356.302 cv
301.822 372.636 270.733 381.62 239.036 375.7 cv
211.44 370.554 194.237 353.417 194.237 353.417 cv
354.475 233.941 li
355.924 235.448 356.97 236.713 356.97 236.713 cv
361.885 235.796 li
361.885 235.796 369.365 235.091 372.975 234.679 cv
381.569 228.608 395.189 220.624 396.933 219.603 cv
373.299 161.36 314.066 122.411 248.044 127.477 cv
247.941 127.484 247.836 127.499 247.731 127.507 cv
247.815 128.616 248.307 133.583 250.473 138.638 cv
251.965 142.111 250.416 150.318 251.079 153.544 cv
253.239 164.147 260.396 173.161 260.396 173.161 cv
271.721 173.369 278.197 173.542 295.658 180.019 cv
313.124 186.481 324.18 197.212 324.18 197.212 cv
166.241 314.896 li
163.249 309.339 161.355 300.466 161.355 300.466 cv
148.621 311.675 li
135.408 318.479 li
135.408 318.479 138.268 322.429 138.732 324.96 cv
139.195 327.479 139.131 328.437 138.31 329.97 cv
137.483 331.513 134.615 332.679 132.324 332.716 cv
130.044 332.761 126.361 330.485 125.365 329.753 cv
124.365 329.019 119.599 324.81 119.599 324.81 cv
119.599 324.81 119.925 326.067 120.687 328.298 cv
136.869 370.827 171.865 403.505 214.835 417.042 cv
223.435 419.653 229.005 420.501 229.005 420.501 cv
247.045 423.517 263.674 424.294 279.52 422.483 cv
341.723 414.03 390.543 367.606 404.069 308.735 cv
404.1 308.579 404.135 308.423 404.168 308.267 cv
404.302 307.677 404.428 307.081 404.555 306.495 cv
404.824 305.2 405.072 303.96 405.295 302.79 cv
405.301 302.757 405.309 302.722 405.313 302.688 cv
405.415 302.138 405.519 301.604 405.61 301.085 cv
406.133 298.077 406.562 295.044 406.896 291.983 cv
406.164 291.958 400.91 291.692 397.213 289.101 cv
393.225 286.313 393.509 286.558 391.515 285.095 cv
cp
405.973 252.169 mo
405.217 247.376 404.238 242.663 403.04 238.044 cv
402.686 236.872 402.445 236.184 402.445 236.184 cv
395.733 243.433 395.25 247.778 394.485 249.993 cv
398.764 251.312 405.238 252.083 405.973 252.169 cv
cp
141.582 250.72 mo
144.149 247.286 147.685 241.144 149.199 238.339 cv
150.79 235.392 153.75 231.889 155.439 230.144 cv
157.125 228.399 158.769 227.179 162.565 224.059 cv
159.932 221.53 155.325 214.476 153.761 211.097 cv
152.196 207.722 151.707 204.659 151.399 200.64 cv
151.091 196.629 151.92 191.108 153.619 186.935 cv
155.318 182.771 161.248 173.227 161.248 173.227 cv
161.248 173.227 170.684 160.863 171.563 159.185 cv
172.095 158.168 172.686 156.472 173.076 155.275 cv
173.076 155.273 173.079 155.269 173.079 155.267 cv
174.041 154.068 li
174.041 154.068 174.051 154.047 174.067 154.018 cv
173.813 154.195 173.559 154.378 173.306 154.559 cv
173.305 154.555 173.307 154.546 173.311 154.54 cv
173.132 154.67 172.957 154.8 172.778 154.926 cv
172.666 155.009 172.547 155.087 172.433 155.174 cv
172.438 155.174 172.438 155.175 172.438 155.179 cv
142.881 176.587 121.734 208.523 114.11 245.029 cv
112.118 254.901 111.052 265.298 110.996 276.38 cv
110.996 276.38 114.556 277.999 117.363 277.784 cv
120.469 273.503 139.026 254.144 141.582 250.72 cv
cp
0 1 1 0 cmyk
f
197.933 132.709 mo
195.083 133.83 192.434 138.247 192.546 139.714 cv
192.661 141.191 194.446 142.002 195.26 140.315 cv
195.26 140.315 195.987 137.167 199.713 133.108 cv
200.068 132.411 199.631 132.035 197.933 132.709 cv
cp
227.824 137.952 mo
227.824 137.952 229.225 138.655 229.72 138.077 cv
230.21 137.502 229.465 136.482 229.465 136.482 cv
229.465 136.482 225.899 132.175 223.209 130.499 cv
221.986 130.32 li
219.815 131.837 li
220.005 132.627 li
220.005 132.627 225.055 135.202 227.824 137.952 cv
cp
218.648 151.719 mo
218.722 157.909 220.353 158.158 221.835 158.18 cv
221.835 158.18 224.93 158.107 224.539 153.016 cv
224.149 147.93 224.87 148.547 225.403 148.506 cv
225.939 148.465 226.176 151.548 227.108 151.475 cv
227.645 151.435 227.594 150.362 227.409 149.7 cv
227.409 149.7 226.343 144.963 222.997 145.22 cv
222.997 145.22 218.572 145.533 218.648 151.719 cv
cp
426.368 256.298 mo
424.309 255.659 423.365 254.013 406.023 252.022 cv
406.03 252.073 406.033 252.122 406.041 252.177 cv
406.041 252.177 399.027 251.397 394.485 249.993 cv
395.25 247.778 395.733 243.433 402.445 236.184 cv
402.445 236.184 402.469 236.247 402.5 236.347 cv
403.795 235.146 409.365 229.938 412.441 226.856 cv
415.94 223.353 416.279 218.911 414.516 217.155 cv
412.777 215.412 410.605 214.093 408.074 214.556 cv
405.693 214.995 403.207 215.854 397.018 219.261 cv
397.055 219.339 397.09 219.415 397.121 219.495 cv
397.121 219.495 382.17 228.183 372.975 234.679 cv
369.365 235.091 361.885 235.796 361.885 235.796 cv
356.97 236.713 li
356.97 236.713 355.924 235.448 354.475 233.941 cv
352.449 235.455 li
352.465 235.563 li
352.5 235.537 li
352.845 237.906 li
352.845 237.906 350.299 238.909 350.565 239.696 cv
350.565 239.696 350.727 240.962 352.322 240.704 cv
352.322 240.704 354.71 240.252 356.398 239.452 cv
358.089 238.648 363.113 237.452 366.217 237.62 cv
366.544 238.266 li
366.544 238.266 364.313 239.108 362.884 239.759 cv
361.452 240.408 359.477 240.966 359.123 241.667 cv
359.123 241.667 363.805 241.198 367.197 239.859 cv
367.197 239.859 372.832 237.784 377.82 234.306 cv
382.803 230.829 395.078 222.346 401.593 219.557 cv
408.11 216.768 412.531 216.429 413.424 219.317 cv
414.326 222.212 411.295 224.866 409.397 226.497 cv
407.499 228.124 397.629 236.291 393.375 245.769 cv
389.122 255.253 393.691 258.669 396.338 258.062 cv
396.338 258.062 392.816 256.046 394.199 251.362 cv
394.199 251.362 397.805 252.565 400.934 253.132 cv
404.084 253.696 420.224 255.288 423.459 257.06 cv
426.693 258.833 429.785 260.479 429.586 263.19 cv
429.39 265.896 424.91 267.183 422.256 267.655 cv
419.598 268.124 411 266.632 407.771 266.743 cv
404.549 266.858 399.961 266.671 395.626 271.585 cv
395.626 271.585 395.438 272.677 397.287 272.267 cv
397.287 272.267 400.362 277.151 402.73 278.175 cv
405.1 279.206 409.236 282.253 410.844 283.884 cv
412.447 285.515 412.09 287.96 411.478 288.677 cv
410.857 289.399 408.111 290.423 403.289 289.038 cv
398.468 287.661 392.072 283.169 389.66 281.599 cv
387.254 280.034 378.029 275.733 370.631 279.396 cv
370.631 279.396 360.232 286.013 352.783 283.622 cv
352.783 283.622 355.084 281.966 357.35 281.659 cv
359.613 281.353 358.637 279.134 357.424 279.226 cv
356.225 279.317 352.977 279.161 346.967 283.263 cv
340.955 287.358 335.023 290.909 328.729 291.261 cv
322.427 291.606 321.479 286.292 322.546 282.577 cv
323.603 278.86 328.062 272.054 330.324 269.86 cv
330.324 269.86 331.815 266.511 331.485 263.983 cv
331.16 261.448 329.474 264.14 329.535 264.94 cv
329.598 265.741 329.408 266.696 328.754 267.022 cv
328.101 267.339 319.741 261.956 319.172 260.786 cv
316.765 262.702 li
316.765 262.702 319.249 266.001 326.076 268.978 cv
326.076 268.978 326.96 269.985 326.514 271.095 cv
326.055 272.21 322.031 275.882 320.328 280.058 cv
318.632 284.22 317.759 292.239 323.704 294.202 cv
329.648 296.171 334.784 292.948 335.957 292.458 cv
337.133 291.96 346.828 286.774 348.365 285.71 cv
348.365 285.71 353.732 287.589 359.691 286.19 cv
359.691 286.19 367.979 283.669 369.667 282.866 cv
371.355 282.063 374.891 280.714 377.152 280.405 cv
379.418 280.093 381.865 280.313 383.106 280.759 cv
384.35 281.202 389.525 283.632 391.515 285.095 cv
393.509 286.558 393.225 286.313 397.213 289.101 cv
401.197 291.892 406.991 291.987 406.991 291.987 cv
406.991 291.987 406.984 292.03 406.978 292.101 cv
409.805 291.999 413.229 291.483 413.697 289.591 cv
414.512 286.339 414.785 284.563 407.881 278.964 cv
407.877 278.978 407.878 278.985 407.877 278.995 cv
407.877 278.995 401.795 275.147 399.637 271.544 cv
399.637 271.544 398.355 268.954 407.511 268.921 cv
407.511 268.921 407.516 268.946 407.521 268.995 cv
408.719 269.009 410.816 269.093 413.775 269.435 cv
418.666 270.003 424.594 270.056 426.537 269.099 cv
428.485 268.144 431.418 266.009 431.482 263.312 cv
431.54 260.618 428.43 256.952 426.368 256.298 cv
cp
319.285 200.859 mo
324.18 197.212 li
324.18 197.212 313.124 186.481 295.658 180.019 cv
278.197 173.542 271.721 173.369 260.396 173.161 cv
260.396 173.161 253.239 164.147 251.079 153.544 cv
250.416 150.318 251.965 142.111 250.473 138.638 cv
248.016 132.901 247.713 127.273 247.713 127.273 cv
247.713 127.273 247.923 127.232 248.343 127.173 cv
248.648 126.9 250.123 125.667 252.81 124.863 cv
255.832 123.959 264.826 121.784 266.822 117.995 cv
268.828 114.201 269.825 109.688 267.719 108.637 cv
265.626 107.586 263.316 107.355 262.927 107.52 cv
262.533 107.684 257.703 111.424 254.724 111.249 cv
254.724 111.249 250.795 109.125 248.908 105.639 cv
247.023 102.141 245.164 97.1172 240.041 97.1074 cv
240.041 97.1074 234.351 96.6533 229.635 98.3618 cv
224.917 100.071 213.483 107.275 210.293 111.292 cv
210.293 111.292 210.014 112.93 210.192 113.452 cv
210.192 113.452 202.972 114.141 198.197 116.799 cv
193.415 119.455 188.01 120.948 182.601 131.191 cv
177.191 141.434 177.801 145.835 176.906 148.187 cv
176.01 150.544 174.041 154.068 174.041 154.068 cv
173.079 155.267 li
172.688 156.461 172.095 158.167 171.563 159.185 cv
170.684 160.863 161.248 173.227 161.248 173.227 cv
161.248 173.227 155.318 182.771 153.619 186.935 cv
151.92 191.108 151.091 196.629 151.399 200.64 cv
151.707 204.659 152.196 207.722 153.761 211.097 cv
155.325 214.476 159.932 221.53 162.565 224.059 cv
158.769 227.179 157.125 228.399 155.439 230.144 cv
153.75 231.889 150.79 235.392 149.199 238.339 cv
147.685 241.144 144.149 247.286 141.582 250.72 cv
139.026 254.144 120.469 273.503 117.363 277.784 cv
114.556 277.999 110.996 276.38 110.996 276.38 cv
110.998 276.253 111 276.134 111.001 276.013 cv
108.276 275.06 98.0464 271.362 84.4883 265.241 cv
68.395 257.97 60.2583 256.517 50.6323 261.021 cv
50.6323 261.021 46.2988 266.978 52.9219 269.737 cv
60.0156 272.694 61.8066 271.474 68.7554 276.062 cv
68.7554 276.062 58.562 283.579 54.4897 288.464 cv
50.4214 293.354 52.6167 299.108 59.2676 298.065 cv
65.9155 297.015 69.98 295.489 73.7544 297.356 cv
73.7544 297.356 73.8174 299.913 72.3242 301.503 cv
70.8291 303.099 65.4277 308.091 65.7813 311.026 cv
66.1436 313.962 66.0288 317.741 73.4551 316.231 cv
73.4551 316.231 78.0464 314.665 84.4604 310.54 cv
84.4604 310.54 93.1035 314.323 97.5801 316.532 cv
102.059 318.753 108.289 319.212 109.617 317.226 cv
109.617 317.226 115.66 320.532 120.627 325.536 cv
121.092 326.122 li
122.581 327.427 124.731 329.288 125.365 329.753 cv
126.361 330.485 130.044 332.761 132.324 332.716 cv
134.615 332.679 137.483 331.513 138.31 329.97 cv
139.131 328.437 139.195 327.479 138.732 324.96 cv
138.268 322.429 135.408 318.479 135.408 318.479 cv
148.621 311.675 li
161.355 300.466 li
161.355 300.466 163.249 309.339 166.241 314.896 cv
183.648 301.925 li
185.508 300.542 li
180.523 290.862 li
183.765 290.259 li
183.765 290.259 184.321 288.737 183.248 288.821 cv
182.177 288.903 173.273 288.642 160.987 296.989 cv
160.987 296.989 156.409 300.575 152.664 304.36 cv
148.916 308.153 141.992 312.722 133.857 315.499 cv
133.857 315.499 134.353 311.425 135.303 309.737 cv
135.303 309.737 128.379 312.554 134.044 321.413 cv
134.044 321.413 137.088 326.021 135.234 329.946 cv
135.234 329.946 132.642 331.214 129.283 329.593 cv
125.927 327.958 112.462 313.915 106.245 313.585 cv
106.245 313.585 109.226 317.388 103.73 315.927 cv
98.231 314.466 84.4126 306.368 81.5723 307.935 cv
81.5723 307.935 83.8335 309.37 81.4868 310.364 cv
79.1392 311.349 76.0107 312.665 74.2153 313.882 cv
72.4219 315.095 66.5146 315.28 69.0693 309.972 cv
71.6206 304.659 75.7842 302.72 75.9536 297.862 cv
75.9536 297.862 80.9365 299.634 82.375 300.868 cv
83.814 302.103 83.0933 299.735 83.0933 299.735 cv
83.0933 299.735 75.1465 290.921 59.5977 295.343 cv
59.5977 295.343 52.4937 297.509 56.04 291.036 cv
56.04 291.036 64.7856 282.286 70.394 278.091 cv
70.394 278.091 72.3687 279.286 75.3135 282.56 cv
75.3135 282.56 76.6938 282.989 75.7681 281.44 cv
74.8418 279.903 72.3721 275.782 69.2173 273.335 cv
66.0703 270.878 57.5439 268.569 54.5176 267.728 cv
51.4907 266.882 51.2607 263.499 54.1069 262.37 cv
57.8945 260.87 65.8247 260.667 76.6196 264.417 cv
76.6196 264.417 88.8677 269.673 99.207 274.534 cv
109.545 279.39 123.592 283.431 125.524 280.595 cv
120.008 278.862 li
120.008 278.862 124.021 275.048 125.978 272.479 cv
127.938 269.903 133.425 264.263 136.165 261.356 cv
136.165 261.356 143.939 253.862 146.579 249.62 cv
149.216 245.382 152.052 239.272 155.436 235.155 cv
159.992 229.608 165.371 226.743 165.371 226.743 cv
165.371 226.743 169.567 229.812 173.934 234.055 cv
173.934 234.055 173.475 231.669 172 229.902 cv
170.509 228.13 155.955 213.896 155.031 201.843 cv
154.107 189.797 163.299 176.167 166.736 171.86 cv
170.177 167.561 172.996 163.246 174.642 160.163 cv
174.642 160.163 177.651 152.711 178.973 148.837 cv
178.973 148.837 183.282 131.274 190.095 125.366 cv
196.915 119.453 207.647 115.401 220.723 113.857 cv
220.723 113.857 217.704 113.011 213.925 113.029 cv
213.925 113.029 212.137 112.521 214.572 110.855 cv
215.86 109.967 227.483 100.15 237.408 99.6494 cv
237.408 99.6494 243.012 98.9595 245.893 104.924 cv
249.024 111.414 255.242 116.271 260.438 115.471 cv
258.389 113.396 li
258.389 113.396 257.391 112.659 259.65 112.219 cv
259.65 112.219 262.02 111.495 263.291 110.591 cv
264.575 109.687 267.533 109.726 266.977 113.003 cv
266.422 116.275 263.779 118.336 260.381 119.676 cv
256.982 121.013 251.973 122.248 249.309 123.112 cv
245.496 124.34 245.025 126.941 245.127 128.277 cv
245.127 128.277 239.998 122.88 237.83 122.781 cv
237.83 122.781 246.67 130.849 247.594 141.153 cv
248.462 150.798 246.207 153.917 250.92 162.712 cv
250.92 162.712 254.307 169 256.713 172.228 cv
258.514 174.651 265.856 184.319 265.314 196.615 cv
264.754 209.429 256.001 222.645 254.23 224.132 cv
254.23 224.132 267.352 216.116 268.898 194.188 cv
268.898 194.188 288.814 187.444 317.073 202.511 cv
319.285 200.859 li
cp
211.553 213.669 mo
214.208 213.196 216.619 209.507 216.152 205.229 cv
215.695 200.958 212.927 196.46 209.446 196.726 cv
205.692 197.015 204.14 201.31 204.631 205.985 cv
205.123 210.653 208.897 214.14 211.553 213.669 cv
cp
274.225 342.565 mo
270.452 342.595 253.938 345.108 224.053 331.239 cv
224.068 331.231 li
224.056 331.224 224.039 331.214 224.021 331.212 cv
220.551 333.804 li
221.123 333.37 li
194.237 353.417 li
194.237 353.417 198.274 357.44 205.58 362.171 cv
206.396 362.702 207.265 363.243 208.161 363.786 cv
208.353 363.534 211.027 360.021 213.478 358.136 cv
216.024 356.187 219.226 354.06 220.709 352.329 cv
222.191 350.599 227.553 343.19 229.147 337.685 cv
229.147 337.685 253.365 347.94 274.369 344.448 cv
274.369 344.448 277.996 342.55 274.225 342.565 cv
cp
205.821 226.765 mo
206.154 227.548 210.074 231.281 213.934 230.721 cv
217.798 230.152 219.694 226.781 220.064 224.591 cv
220.435 222.409 218.542 224.042 218.542 224.042 cv
213.021 229.306 208.152 227.138 207.135 226.257 cv
206.407 225.64 205.495 225.981 205.821 226.765 cv
cp
198.496 145.293 mo
198.496 145.293 194.397 146.309 195.204 151.5 cv
196.001 156.692 197.702 157.77 199.679 157.216 cv
201.654 156.66 202.289 154.325 201.222 151.039 cv
201.222 151.039 199.771 147.917 200.812 147.433 cv
201.851 146.948 202.521 150.401 203.285 149.802 cv
203.755 149.434 203.324 148.588 203.324 148.588 cv
203.324 148.588 202.057 144.345 198.496 145.293 cv
cp
214.659 176.936 mo
212.05 181.576 207.121 178.729 207.121 178.729 cv
206.421 178.379 205.412 179.263 206.008 180.028 cv
206.604 180.786 209.541 183.93 212.443 183.165 cv
215.344 182.405 216.459 179.354 216.316 177.482 cv
216.172 175.606 214.659 176.936 214.659 176.936 cv
cp
0 0 0 1 cmyk
f
423.459 257.06 mo
420.224 255.288 404.084 253.696 400.934 253.132 cv
397.805 252.565 394.199 251.362 394.199 251.362 cv
392.816 256.046 396.338 258.062 396.338 258.062 cv
393.691 258.669 389.122 255.253 393.375 245.769 cv
397.629 236.291 407.499 228.124 409.397 226.497 cv
411.295 224.866 414.326 222.212 413.424 219.317 cv
412.531 216.429 408.11 216.768 401.593 219.557 cv
395.078 222.346 382.803 230.829 377.82 234.306 cv
372.832 237.784 367.197 239.859 367.197 239.859 cv
363.805 241.198 359.123 241.667 359.123 241.667 cv
359.477 240.966 361.452 240.408 362.884 239.759 cv
364.313 239.108 366.544 238.266 366.544 238.266 cv
366.217 237.62 li
363.113 237.452 358.089 238.648 356.398 239.452 cv
354.71 240.252 352.322 240.704 352.322 240.704 cv
350.727 240.962 350.565 239.696 350.565 239.696 cv
350.299 238.909 352.845 237.906 352.845 237.906 cv
352.5 235.537 li
224.068 331.231 li
224.053 331.239 li
253.938 345.108 270.452 342.595 274.225 342.565 cv
277.996 342.55 274.369 344.448 274.369 344.448 cv
253.365 347.94 229.147 337.685 229.147 337.685 cv
227.553 343.19 222.191 350.599 220.709 352.329 cv
219.226 354.06 216.024 356.187 213.478 358.136 cv
211.684 359.513 209.781 361.753 208.809 362.966 cv
208.758 363.03 208.702 363.097 208.656 363.151 cv
208.597 363.228 208.553 363.282 208.505 363.349 cv
208.283 363.63 208.145 363.813 208.145 363.813 cv
231.298 378.167 257.56 379.376 277.246 376.009 cv
293.711 373.194 310.754 366.056 324.76 353.646 cv
340.262 339.915 348.892 325.708 354.321 311.585 cv
358.809 299.94 359.691 286.19 359.691 286.19 cv
353.732 287.589 348.365 285.71 348.365 285.71 cv
346.828 286.774 337.133 291.96 335.957 292.458 cv
334.784 292.948 329.648 296.171 323.704 294.202 cv
317.759 292.239 318.632 284.22 320.328 280.058 cv
322.031 275.882 326.055 272.21 326.514 271.095 cv
326.96 269.985 326.076 268.978 326.076 268.978 cv
319.249 266.001 316.765 262.702 316.765 262.702 cv
319.172 260.786 li
319.741 261.956 328.101 267.339 328.754 267.022 cv
329.408 266.696 329.598 265.741 329.535 264.94 cv
329.474 264.14 331.16 261.448 331.485 263.983 cv
331.815 266.511 330.324 269.86 330.324 269.86 cv
328.062 272.054 323.603 278.86 322.546 282.577 cv
321.479 286.292 322.427 291.606 328.729 291.261 cv
335.023 290.909 340.955 287.358 346.967 283.263 cv
352.977 279.161 356.225 279.317 357.424 279.226 cv
358.637 279.134 359.613 281.353 357.35 281.659 cv
355.084 281.966 352.783 283.622 352.783 283.622 cv
360.232 286.013 370.631 279.396 370.631 279.396 cv
378.029 275.733 387.254 280.034 389.66 281.599 cv
392.072 283.169 398.468 287.661 403.289 289.038 cv
408.111 290.423 410.857 289.399 411.478 288.677 cv
412.09 287.96 412.447 285.515 410.844 283.884 cv
409.236 282.253 405.1 279.206 402.73 278.175 cv
400.362 277.151 397.287 272.267 397.287 272.267 cv
395.438 272.677 395.626 271.585 395.626 271.585 cv
399.961 266.671 404.549 266.858 407.771 266.743 cv
411 266.632 419.598 268.124 422.256 267.655 cv
424.91 267.183 429.39 265.896 429.586 263.19 cv
429.785 260.479 426.693 258.833 423.459 257.06 cv
cp
229.72 138.077 mo
229.225 138.655 227.824 137.952 227.824 137.952 cv
225.055 135.202 220.005 132.627 220.005 132.627 cv
219.815 131.837 li
221.986 130.32 li
223.209 130.499 li
225.899 132.175 229.465 136.482 229.465 136.482 cv
229.465 136.482 230.21 137.502 229.72 138.077 cv
cp
227.108 151.475 mo
226.176 151.548 225.939 148.465 225.403 148.506 cv
224.87 148.547 224.149 147.93 224.539 153.016 cv
224.93 158.107 221.835 158.18 221.835 158.18 cv
220.353 158.158 218.722 157.909 218.648 151.719 cv
218.572 145.533 222.997 145.22 222.997 145.22 cv
226.343 144.963 227.409 149.7 227.409 149.7 cv
227.594 150.362 227.645 151.435 227.108 151.475 cv
cp
220.064 224.591 mo
219.694 226.781 217.798 230.152 213.934 230.721 cv
210.074 231.281 206.154 227.548 205.821 226.765 cv
205.495 225.981 206.407 225.64 207.135 226.257 cv
208.152 227.138 213.021 229.306 218.542 224.042 cv
218.542 224.042 220.435 222.409 220.064 224.591 cv
cp
195.204 151.5 mo
194.397 146.309 198.496 145.293 198.496 145.293 cv
202.057 144.345 203.324 148.588 203.324 148.588 cv
203.324 148.588 203.755 149.434 203.285 149.802 cv
202.521 150.401 201.851 146.948 200.812 147.433 cv
199.771 147.917 201.222 151.039 201.222 151.039 cv
202.289 154.325 201.654 156.66 199.679 157.216 cv
197.702 157.77 196.001 156.692 195.204 151.5 cv
cp
192.546 139.714 mo
192.434 138.247 195.083 133.83 197.933 132.709 cv
199.631 132.035 200.068 132.411 199.713 133.108 cv
195.987 137.167 195.26 140.315 195.26 140.315 cv
194.446 142.002 192.661 141.191 192.546 139.714 cv
cp
216.152 205.229 mo
216.619 209.507 214.208 213.196 211.553 213.669 cv
208.897 214.14 205.123 210.653 204.631 205.985 cv
204.14 201.31 205.692 197.015 209.446 196.726 cv
212.927 196.46 215.695 200.958 216.152 205.229 cv
cp
207.121 178.729 mo
207.121 178.729 212.05 181.576 214.659 176.936 cv
214.659 176.936 216.172 175.606 216.316 177.482 cv
216.459 179.354 215.344 182.405 212.443 183.165 cv
209.541 183.93 206.604 180.786 206.008 180.028 cv
205.412 179.263 206.421 178.379 207.121 178.729 cv
cp
316.514 202.224 mo
288.553 187.544 268.898 194.188 268.898 194.188 cv
267.352 216.116 254.23 224.132 254.23 224.132 cv
256.001 222.645 264.754 209.429 265.314 196.615 cv
265.856 184.319 258.514 174.651 256.713 172.228 cv
254.307 169 250.92 162.712 250.92 162.712 cv
246.207 153.917 248.462 150.798 247.594 141.153 cv
246.67 130.849 237.83 122.781 237.83 122.781 cv
239.998 122.88 245.127 128.277 245.127 128.277 cv
245.025 126.941 245.496 124.34 249.309 123.112 cv
251.973 122.248 256.982 121.013 260.381 119.676 cv
263.779 118.336 266.422 116.275 266.977 113.003 cv
267.533 109.726 264.575 109.687 263.291 110.591 cv
262.02 111.495 259.65 112.219 259.65 112.219 cv
257.391 112.659 258.389 113.396 258.389 113.396 cv
260.438 115.471 li
255.242 116.271 249.024 111.414 245.893 104.924 cv
243.012 98.9595 237.408 99.6494 237.408 99.6494 cv
227.483 100.15 215.86 109.967 214.572 110.855 cv
212.137 112.521 213.925 113.029 213.925 113.029 cv
217.704 113.011 220.723 113.857 220.723 113.857 cv
207.647 115.401 196.915 119.453 190.095 125.366 cv
183.282 131.274 178.973 148.837 178.973 148.837 cv
177.651 152.711 174.642 160.163 174.642 160.163 cv
172.996 163.246 170.177 167.561 166.736 171.86 cv
163.299 176.167 154.107 189.797 155.031 201.843 cv
155.955 213.896 170.509 228.13 172 229.902 cv
173.475 231.669 173.934 234.055 173.934 234.055 cv
169.567 229.812 165.371 226.743 165.371 226.743 cv
165.371 226.743 159.992 229.608 155.436 235.155 cv
152.052 239.272 149.216 245.382 146.579 249.62 cv
143.939 253.862 136.165 261.356 136.165 261.356 cv
133.425 264.263 127.938 269.903 125.978 272.479 cv
124.021 275.048 120.008 278.862 120.008 278.862 cv
125.524 280.595 li
123.592 283.431 109.545 279.39 99.207 274.534 cv
88.8677 269.673 76.6196 264.417 76.6196 264.417 cv
65.8247 260.667 57.8945 260.87 54.1069 262.37 cv
51.2607 263.499 51.4907 266.882 54.5176 267.728 cv
57.5439 268.569 66.0703 270.878 69.2173 273.335 cv
72.3721 275.782 74.8418 279.903 75.7681 281.44 cv
76.6938 282.989 75.3135 282.56 75.3135 282.56 cv
72.3687 279.286 70.394 278.091 70.394 278.091 cv
64.7856 282.286 56.04 291.036 56.04 291.036 cv
52.4937 297.509 59.5977 295.343 59.5977 295.343 cv
75.1465 290.921 83.0933 299.735 83.0933 299.735 cv
83.0933 299.735 83.814 302.103 82.375 300.868 cv
80.9365 299.634 75.9536 297.862 75.9536 297.862 cv
75.7842 302.72 71.6206 304.659 69.0693 309.972 cv
66.5146 315.28 72.4219 315.095 74.2153 313.882 cv
76.0107 312.665 79.1392 311.349 81.4868 310.364 cv
83.8335 309.37 81.5723 307.935 81.5723 307.935 cv
84.4126 306.368 98.231 314.466 103.73 315.927 cv
109.226 317.388 106.245 313.585 106.245 313.585 cv
112.462 313.915 125.927 327.958 129.283 329.593 cv
132.642 331.214 135.234 329.946 135.234 329.946 cv
137.088 326.021 134.044 321.413 134.044 321.413 cv
128.379 312.554 135.303 309.737 135.303 309.737 cv
134.353 311.425 133.857 315.499 133.857 315.499 cv
141.992 312.722 148.916 308.153 152.664 304.36 cv
156.409 300.575 160.987 296.989 160.987 296.989 cv
173.273 288.642 182.177 288.903 183.248 288.821 cv
184.321 288.737 183.765 290.259 183.765 290.259 cv
180.523 290.862 li
185.103 299.751 li
185.291 300.083 185.452 300.356 185.559 300.536 cv
317.26 202.609 li
317.008 202.474 316.761 202.349 316.514 202.224 cv
cp
206.391 362.677 mo
206.389 362.679 206.386 362.683 206.385 362.683 cv
206.963 363.046 207.553 363.413 208.161 363.786 cv
207.546 363.415 206.971 363.044 206.391 362.677 cv
cp
0 0 0 0 cmyk
f
113.047 69.1357 mo
113.047 79.5972 li
113.047 81.0562 112.982 82.0342 112.852 82.5332 cv
112.59 83.6362 111.986 84.1875 111.04 84.1875 cv
110.55 84.1875 li
110.55 85.6816 li
122.889 85.6816 li
122.889 84.1875 li
122.399 84.1875 li
121.453 84.1875 120.849 83.6362 120.588 82.5332 cv
120.457 82.0342 120.391 81.0562 120.391 79.5972 cv
120.391 75.5762 120.424 71.5728 120.489 67.5879 cv
120.636 55.5786 li
120.669 54.084 120.734 53.1055 120.832 52.6436 cv
121.126 51.54 121.73 50.9878 122.645 50.9878 cv
123.133 50.9878 li
123.133 49.4937 li
110.55 49.4937 li
110.55 50.9878 li
111.04 50.9878 li
111.986 50.9878 112.59 51.54 112.852 52.6436 cv
112.982 53.1411 113.047 54.1196 113.047 55.5786 cv
113.047 64.7051 li
100.659 64.7051 li
100.659 61.2183 100.692 58.1763 100.757 55.5786 cv
100.79 54.0483 100.855 53.0703 100.953 52.6436 cv
101.255 51.54 101.875 50.9878 102.805 50.9878 cv
103.303 50.9878 li
103.303 49.4937 li
90.7202 49.4937 li
90.7202 50.9878 li
91.209 50.9878 li
92.1558 50.9878 92.7598 51.54 93.0205 52.6436 cv
93.1519 53.1411 93.2168 54.1196 93.2168 55.5786 cv
93.2168 79.5972 li
93.2168 81.0562 93.1519 82.0342 93.0205 82.5332 cv
92.7598 83.6362 92.1558 84.1875 91.209 84.1875 cv
90.7202 84.1875 li
90.7202 85.6816 li
103.059 85.6816 li
103.059 84.1875 li
102.568 84.1875 li
101.622 84.1875 101.018 83.6362 100.757 82.5332 cv
100.626 82.0342 100.562 81.0562 100.562 79.5972 cv
100.562 74.0464 li
100.562 72.5874 100.594 70.9502 100.659 69.1357 cv
113.047 69.1357 li
113.047 69.1357 li
cp
196.012 50.0273 mo
195.974 50.0273 195.783 50.0991 195.437 50.2412 cv
195.091 50.3833 194.765 50.4189 194.458 50.3481 cv
193.958 50.0635 193.113 49.7251 191.923 49.3335 cv
189.311 48.8711 187.122 48.6401 185.356 48.6401 cv
180.824 48.6401 177.253 49.8145 174.641 52.1626 cv
172.261 54.2974 171.07 56.6992 171.07 59.3682 cv
171.07 62.4282 172.126 64.937 174.238 66.8936 cv
175.775 68.3169 178.29 69.7583 181.784 71.2178 cv
182.745 71.4307 184.05 71.8223 185.701 72.3921 cv
186.508 72.7119 187.545 73.228 188.813 73.939 cv
189.925 74.9004 190.598 75.6294 190.828 76.1274 cv
191.135 76.7681 191.154 77.4263 190.886 78.1025 cv
190.463 79.1704 189.771 80.1128 188.813 80.9316 cv
187.737 81.8208 186.085 82.2656 183.858 82.2656 cv
183.282 82.2656 182.053 82.0342 180.171 81.5723 cv
179.557 81.4292 178.5 81.0386 177.003 80.397 cv
175.775 79.8994 174.719 79.188 173.835 78.2632 cv
173.375 77.8711 172.396 77.0527 170.897 75.8076 cv
171.013 79.9175 li
171.013 84.9873 li
171.089 84.9873 171.397 84.9165 171.935 84.7744 cv
172.357 84.668 172.722 84.6499 173.028 84.7212 cv
173.566 85.0054 174.431 85.3438 175.621 85.7354 cv
178.54 86.2329 181.17 86.4819 183.512 86.4819 cv
187.891 86.4819 191.48 85.4238 194.285 83.3062 cv
197.088 81.189 198.489 78.6006 198.489 75.541 cv
198.489 71.626 196.319 68.4063 191.98 65.8799 cv
191.442 65.5601 190.502 65.2212 189.157 64.8657 cv
187.583 64.4385 186.508 64.1006 185.932 63.8516 cv
184.896 63.4956 183.512 62.9438 181.784 62.1968 cv
180.978 61.7705 179.979 61.147 178.79 60.3286 cv
178.443 60.0083 178.06 59.2612 177.637 58.0874 cv
177.522 57.8027 177.522 57.376 177.637 56.8062 cv
177.713 56.2725 177.868 55.8633 178.098 55.5786 cv
178.79 54.7251 179.201 54.2354 179.337 54.1108 cv
179.47 53.9863 179.845 53.7817 180.459 53.4971 cv
181.728 52.8921 183.129 52.5898 184.664 52.5898 cv
186.047 52.5898 187.353 52.7671 188.582 53.1235 cv
190.04 53.5503 191.346 54.1196 192.499 54.8311 cv
193.842 55.6494 195.015 56.6816 196.012 57.9272 cv
196.012 50.0273 li
196.012 50.0273 li
cp
346.687 54.084 mo
345.747 54.0483 344.221 53.9951 342.108 53.9238 cv
342.08 55.3472 342.05 56.9131 342.021 58.6206 cv
341.963 61.0049 341.918 65.8086 341.889 73.0317 cv
341.845 79.5972 li
341.845 81.0562 341.902 82.0342 342.021 82.5332 cv
342.256 83.6362 342.799 84.1875 343.648 84.1875 cv
344.09 84.1875 li
344.09 85.6816 li
332.998 85.6816 li
332.998 84.1875 li
333.438 84.1875 li
334.289 84.1875 334.832 83.6362 335.066 82.5332 cv
335.184 82.0342 335.242 81.0562 335.242 79.5972 cv
335.242 53.9238 li
334.656 53.96 333.43 53.9771 331.574 53.9771 cv
330.306 53.9771 329.418 54.0308 328.92 54.1377 cv
328.186 54.2798 327.444 54.6538 326.711 55.2583 cv
326.389 55.5073 326.133 55.7388 325.956 55.9517 cv
325.662 56.3076 325.516 56.6816 325.516 57.0737 cv
325.472 54.7773 li
325.472 49.4937 li
351.703 49.4937 li
351.66 52.9629 li
351.66 57.3936 li
350.75 55.4717 349.752 54.4224 348.666 54.2446 cv
346.687 54.084 li
346.687 54.084 li
cp
440.512 50.0273 mo
440.474 50.0273 440.283 50.0991 439.937 50.2412 cv
439.591 50.3833 439.265 50.4189 438.957 50.3481 cv
438.458 50.0635 437.613 49.7251 436.423 49.3335 cv
433.811 48.8711 431.621 48.6401 429.855 48.6401 cv
425.324 48.6401 421.753 49.8145 419.141 52.1626 cv
416.762 54.2974 415.57 56.6992 415.57 59.3682 cv
415.57 62.4282 416.627 64.937 418.738 66.8936 cv
420.275 68.3169 422.789 69.7583 426.284 71.2178 cv
427.244 71.4307 428.55 71.8223 430.201 72.3921 cv
431.008 72.7119 432.045 73.228 433.313 73.939 cv
434.426 74.9004 435.098 75.6294 435.328 76.1274 cv
435.635 76.7681 435.654 77.4263 435.387 78.1025 cv
434.963 79.1704 434.271 80.1128 433.313 80.9316 cv
432.236 81.8208 430.585 82.2656 428.358 82.2656 cv
427.782 82.2656 426.553 82.0342 424.671 81.5723 cv
424.057 81.4292 423 81.0386 421.504 80.397 cv
420.275 79.8994 419.219 79.188 418.336 78.2632 cv
417.875 77.8711 416.896 77.0527 415.396 75.8076 cv
415.514 79.9175 li
415.514 84.9873 li
415.59 84.9873 415.896 84.9165 416.436 84.7744 cv
416.857 84.668 417.223 84.6499 417.528 84.7212 cv
418.066 85.0054 418.931 85.3438 420.121 85.7354 cv
423.039 86.2329 425.67 86.4819 428.012 86.4819 cv
432.391 86.4819 435.98 85.4238 438.785 83.3062 cv
441.588 81.189 442.989 78.6006 442.989 75.541 cv
442.989 71.626 440.819 68.4063 436.48 65.8799 cv
435.942 65.5601 435.002 65.2212 433.657 64.8657 cv
432.083 64.4385 431.008 64.1006 430.432 63.8516 cv
429.396 63.4956 428.012 62.9438 426.284 62.1968 cv
425.478 61.7705 424.479 61.147 423.289 60.3286 cv
422.943 60.0083 422.561 59.2612 422.137 58.0874 cv
422.021 57.8027 422.021 57.376 422.137 56.8062 cv
422.213 56.2725 422.367 55.8633 422.598 55.5786 cv
423.289 54.7251 423.701 54.2354 423.837 54.1108 cv
423.971 53.9863 424.345 53.7817 424.959 53.4971 cv
426.228 52.8921 427.629 52.5898 429.164 52.5898 cv
430.547 52.5898 431.854 52.7671 433.082 53.1235 cv
434.54 53.5503 435.846 54.1196 436.998 54.8311 cv
438.342 55.6494 439.515 56.6816 440.512 57.9272 cv
440.512 50.0273 li
440.512 50.0273 li
cp
322.762 50.0273 mo
322.724 50.0273 322.533 50.0991 322.187 50.2412 cv
321.841 50.3833 321.515 50.4189 321.207 50.3481 cv
320.708 50.0635 319.863 49.7251 318.673 49.3335 cv
316.061 48.8711 313.871 48.6401 312.105 48.6401 cv
307.574 48.6401 304.003 49.8145 301.391 52.1626 cv
299.012 54.2974 297.82 56.6992 297.82 59.3682 cv
297.82 62.4282 298.877 64.937 300.988 66.8936 cv
302.525 68.3169 305.039 69.7583 308.534 71.2178 cv
309.494 71.4307 310.8 71.8223 312.451 72.3921 cv
313.258 72.7119 314.295 73.228 315.563 73.939 cv
316.676 74.9004 317.348 75.6294 317.578 76.1274 cv
317.885 76.7681 317.904 77.4263 317.637 78.1025 cv
317.213 79.1704 316.521 80.1128 315.563 80.9316 cv
314.486 81.8208 312.835 82.2656 310.608 82.2656 cv
310.032 82.2656 308.803 82.0342 306.921 81.5723 cv
306.307 81.4292 305.25 81.0386 303.754 80.397 cv
302.525 79.8994 301.469 79.188 300.586 78.2632 cv
300.125 77.8711 299.146 77.0527 297.646 75.8076 cv
297.764 79.9175 li
297.764 84.9873 li
297.84 84.9873 298.146 84.9165 298.686 84.7744 cv
299.107 84.668 299.473 84.6499 299.778 84.7212 cv
300.316 85.0054 301.181 85.3438 302.371 85.7354 cv
305.289 86.2329 307.92 86.4819 310.262 86.4819 cv
314.641 86.4819 318.23 85.4238 321.035 83.3062 cv
323.838 81.189 325.239 78.6006 325.239 75.541 cv
325.239 71.626 323.069 68.4063 318.73 65.8799 cv
318.192 65.5601 317.252 65.2212 315.907 64.8657 cv
314.333 64.4385 313.258 64.1006 312.682 63.8516 cv
311.646 63.4956 310.262 62.9438 308.534 62.1968 cv
307.728 61.7705 306.729 61.147 305.539 60.3286 cv
305.193 60.0083 304.811 59.2612 304.387 58.0874 cv
304.271 57.8027 304.271 57.376 304.387 56.8062 cv
304.463 56.2725 304.617 55.8633 304.848 55.5786 cv
305.539 54.7251 305.951 54.2354 306.087 54.1108 cv
306.221 53.9863 306.595 53.7817 307.209 53.4971 cv
308.478 52.8921 309.879 52.5898 311.414 52.5898 cv
312.797 52.5898 314.104 52.7671 315.332 53.1235 cv
316.79 53.5503 318.096 54.1196 319.248 54.8311 cv
320.592 55.6494 321.765 56.6816 322.762 57.9272 cv
322.762 50.0273 li
322.762 50.0273 li
cp
220.687 54.084 mo
219.747 54.0483 218.221 53.9951 216.108 53.9238 cv
216.08 55.3472 216.05 56.9131 216.021 58.6206 cv
215.962 61.0049 215.918 65.8086 215.889 73.0317 cv
215.845 79.5972 li
215.845 81.0562 215.903 82.0342 216.021 82.5332 cv
216.255 83.6362 216.798 84.1875 217.649 84.1875 cv
218.089 84.1875 li
218.089 85.6816 li
206.998 85.6816 li
206.998 84.1875 li
207.438 84.1875 li
208.289 84.1875 208.832 83.6362 209.066 82.5332 cv
209.184 82.0342 209.242 81.0562 209.242 79.5972 cv
209.242 53.9238 li
208.656 53.96 207.43 53.9771 205.574 53.9771 cv
204.306 53.9771 203.418 54.0308 202.92 54.1377 cv
202.186 54.2798 201.444 54.6538 200.711 55.2583 cv
200.389 55.5073 200.132 55.7388 199.956 55.9517 cv
199.662 56.3076 199.516 56.6816 199.516 57.0737 cv
199.472 54.7773 li
199.472 49.4937 li
225.704 49.4937 li
225.66 52.9629 li
225.66 57.3936 li
224.75 55.4717 223.752 54.4224 222.666 54.2446 cv
220.687 54.084 li
220.687 54.084 li
cp
346.687 54.084 mo
345.747 54.0483 344.221 53.9951 342.108 53.9238 cv
342.08 55.3472 342.05 56.9131 342.021 58.6206 cv
341.963 61.0049 341.918 65.8086 341.889 73.0317 cv
341.845 79.5972 li
341.845 81.0562 341.902 82.0342 342.021 82.5332 cv
342.256 83.6362 342.799 84.1875 343.648 84.1875 cv
344.09 84.1875 li
344.09 85.6816 li
332.998 85.6816 li
332.998 84.1875 li
333.438 84.1875 li
334.289 84.1875 334.832 83.6362 335.066 82.5332 cv
335.184 82.0342 335.242 81.0562 335.242 79.5972 cv
335.242 53.9238 li
334.656 53.96 333.43 53.9771 331.574 53.9771 cv
330.306 53.9771 329.418 54.0308 328.92 54.1377 cv
328.186 54.2798 327.444 54.6538 326.711 55.2583 cv
326.389 55.5073 326.133 55.7388 325.956 55.9517 cv
325.662 56.3076 325.516 56.6816 325.516 57.0737 cv
325.472 54.7773 li
325.472 49.4937 li
351.703 49.4937 li
351.66 52.9629 li
351.66 57.3936 li
350.75 55.4717 349.752 54.4224 348.666 54.2446 cv
346.687 54.084 li
346.687 54.084 li
cp
239.193 77.5688 mo
239.193 76.9282 239.193 76.4307 239.193 76.0737 cv
239.085 75.6831 239.031 75.1851 239.031 74.5796 cv
239.031 72.6938 239.085 70.8081 239.193 68.9224 cv
241.796 68.9224 li
245.207 68.9224 247.729 69.7944 249.357 71.5376 cv
250.102 72.3564 250.62 73.2368 250.896 74.1797 cv
251.184 75.1226 251.327 75.8608 251.327 76.395 cv
251.327 77.5332 251.184 78.3872 250.896 78.9565 cv
250.682 79.3833 250.236 79.9351 249.556 80.6113 cv
248.695 81.4292 246.924 81.8389 244.239 81.8389 cv
243.094 81.8389 241.43 81.856 239.246 81.8921 cv
239.21 79.8994 239.193 78.4585 239.193 77.5688 cv
239.193 77.5688 li
cp
239.193 64.8657 mo
239.193 58.4609 239.21 54.4932 239.246 52.9629 cv
240.499 52.7852 241.555 52.6963 242.415 52.6963 cv
244.776 52.6963 246.549 53.4087 247.729 54.8311 cv
248.267 55.4717 248.65 56.2188 248.885 57.0737 cv
249.117 57.9272 249.232 58.4961 249.232 58.7808 cv
249.232 59.4219 249.18 59.9907 249.072 60.4888 cv
248.463 63.4067 246.53 64.8657 243.273 64.8657 cv
239.193 64.8657 li
239.193 64.8657 li
cp
228.186 85.6816 mo
245.475 85.6816 li
250.629 85.6816 254.422 84.8101 256.857 83.0664 cv
258.968 81.5366 260.023 79.3481 260.023 76.5015 cv
260.023 72.4097 257.912 69.5449 253.688 67.9087 cv
252.187 67.3389 250.361 66.9829 248.213 66.8403 cv
248.213 66.4136 li
250.861 66.2715 253.027 65.6133 254.709 64.4385 cv
256.678 63.0151 257.662 61.0762 257.662 58.6206 cv
257.662 54.4575 255.174 51.6646 250.199 50.2412 cv
248.445 49.7427 246.352 49.4937 243.918 49.4937 cv
228.186 49.4937 li
228.186 50.9878 li
228.724 50.9878 li
229.762 50.9878 230.424 51.54 230.71 52.6436 cv
230.854 53.1411 230.925 54.1196 230.925 55.5786 cv
230.925 79.5972 li
230.925 81.0562 230.854 82.0342 230.71 82.5332 cv
230.424 83.6362 229.762 84.1875 228.724 84.1875 cv
228.186 84.1875 li
228.186 85.6816 li
228.186 85.6816 li
cp
286.285 57.7666 mo
286.285 73.1387 li
286.285 76.0566 285.464 78.3516 283.82 80.0239 cv
283.07 80.771 282.215 81.3228 281.258 81.6782 cv
280.641 81.9282 280.025 82.0527 279.408 82.0527 cv
278.726 82.0527 278.143 81.9634 277.664 81.7852 cv
275.92 81.1807 274.561 80.1572 273.585 78.7168 cv
272.61 77.2749 272.121 75.6118 272.121 73.7261 cv
272.121 68.2109 272.191 62.1611 272.326 55.5786 cv
272.36 54.084 272.432 53.1055 272.532 52.6436 cv
272.842 51.54 273.473 50.9878 274.43 50.9878 cv
274.944 50.9878 li
274.944 49.4404 li
261.756 49.4404 li
261.756 50.9878 li
262.271 50.9878 li
263.261 50.9878 263.896 51.54 264.169 52.6436 cv
264.307 53.1411 264.373 54.1196 264.373 55.5786 cv
264.373 72.9248 li
264.373 77.231 265.793 80.6294 268.633 83.1196 cv
271.198 85.397 274.311 86.5352 277.971 86.5352 cv
281.941 86.5352 285.232 85.2725 287.851 82.7456 cv
290.466 80.2192 291.775 76.9458 291.775 72.9248 cv
291.775 58.3008 li
291.775 55.4897 292.031 53.5146 292.546 52.3765 cv
292.957 51.4507 293.537 50.9878 294.291 50.9878 cv
294.803 50.9878 li
294.803 49.4937 li
281.924 49.4404 li
281.924 50.9355 li
283.155 50.9355 li
284.627 50.9355 285.584 52.0737 286.027 54.3506 cv
286.199 55.2402 286.285 56.3794 286.285 57.7666 cv
286.285 57.7666 li
cp
375.75 70.3101 mo
375.75 63.105 li
374.867 63.9053 li
373.984 64.2783 li
373.954 64.2783 373.938 64.2783 373.938 64.2783 cv
373.938 64.2783 373.931 64.2783 373.914 64.2783 cv
373.9 64.2783 373.877 64.2783 373.846 64.2783 cv
373.752 64.2783 373.582 64.3228 373.333 64.4121 cv
373.086 64.5015 367.789 64.5454 365.466 64.5454 cv
363.098 64.5454 li
363.098 63.6201 363.098 61.9307 363.098 59.4746 cv
363.098 58.9414 363.129 57.02 363.189 53.7109 cv
367.373 53.7109 li
370.376 53.7109 372.635 54.4575 374.152 55.9517 cv
374.742 56.4858 375.33 57.0376 375.918 57.6064 cv
376.352 58.105 376.602 58.8877 376.662 59.9551 cv
377.964 59.9551 li
377.73 49.4937 li
353.575 49.4937 li
353.575 50.9878 li
354.039 50.9878 li
354.938 50.9878 355.51 51.54 355.757 52.6436 cv
355.882 53.1411 355.943 54.1196 355.943 55.5786 cv
355.943 79.5972 li
355.943 81.0562 355.882 82.0342 355.757 82.5332 cv
355.51 83.6362 354.938 84.1875 354.039 84.1875 cv
353.575 84.1875 li
353.575 85.6816 li
379.588 85.6816 li
380.054 74.7397 li
378.752 74.7397 li
378.691 75.167 378.566 75.4692 378.38 75.647 cv
378.103 75.896 377.9 76.1631 377.777 76.4482 cv
376.724 78.6895 375.006 80.2554 372.621 81.145 cv
371.35 81.6074 369.879 81.8389 368.207 81.8389 cv
366.443 81.8389 365.188 81.6074 364.445 81.145 cv
363.423 80.5049 362.912 79.2588 362.912 77.4087 cv
362.912 74.0996 li
362.912 73.1387 362.926 71.6621 362.959 69.6694 cv
373.566 69.4561 li
375.75 70.3101 li
375.75 70.3101 li
cp
392.416 67.4282 mo
392.416 62.2505 li
392.449 60.6138 392.482 59.1016 392.519 57.7134 cv
392.553 57.3936 392.586 56.7354 392.619 55.7388 cv
392.652 54.7427 392.686 53.9771 392.72 53.4438 cv
393.671 53.2656 394.619 53.1763 395.571 53.1763 cv
397.979 53.1763 399.795 53.9424 401.016 55.4717 cv
401.591 56.2188 402.017 57.0913 402.287 58.0874 cv
402.49 58.8345 402.592 59.3862 402.592 59.7412 cv
402.592 62.6597 401.906 64.7773 400.523 66.0933 cv
399.387 67.1606 397.709 67.6948 395.486 67.6948 cv
394.715 67.6948 393.697 67.606 392.416 67.4282 cv
392.416 67.4282 li
cp
397.605 73.7793 mo
399.268 76.875 400.897 79.668 402.49 82.1587 cv
403.203 83.2979 403.559 84.063 403.559 84.4541 cv
403.559 84.8101 403.439 85.2192 403.203 85.6816 cv
415.314 85.6816 li
415.314 84.1875 li
414.67 84.1875 413.584 83.3511 412.059 81.6782 cv
409.377 78.7969 406.357 74.4019 402.999 68.4946 cv
406.766 67.3213 409.24 65.3101 410.429 62.4634 cv
410.803 61.5391 410.988 60.5601 410.988 59.5283 cv
410.988 54.9019 408.784 51.8062 404.373 50.2412 cv
402.916 49.7427 401.201 49.4937 399.234 49.4937 cv
382.036 49.4937 li
382.036 50.9878 li
382.544 50.9878 li
383.529 50.9878 384.155 51.54 384.426 52.6436 cv
384.563 53.1411 384.629 54.1196 384.629 55.5786 cv
384.629 79.5972 li
384.629 81.0562 384.563 82.0342 384.426 82.5332 cv
384.155 83.6362 383.529 84.1875 382.544 84.1875 cv
382.036 84.1875 li
382.036 85.6816 li
394.857 85.6816 li
394.857 84.1875 li
394.35 84.1875 li
393.364 84.1875 392.738 83.6362 392.467 82.5332 cv
392.33 82.0342 392.264 81.0562 392.264 79.5972 cv
392.264 74.9536 li
392.264 73.1748 392.279 71.3774 392.314 69.563 cv
393.061 69.6694 393.723 69.9004 394.298 70.2563 cv
397.605 73.7793 li
397.605 73.7793 li
cp
75.2764 69.082 mo
75.7441 69.082 76.0869 69.1621 76.3042 69.3228 cv
76.5215 69.4829 76.7471 69.6338 76.9805 69.7759 cv
77.4487 70.0259 77.7075 70.2031 77.7578 70.3101 cv
77.8076 70.4165 77.8496 70.5234 77.8833 70.6304 cv
78.1509 71.0215 78.3262 71.3506 78.4097 71.6177 cv
78.4932 71.8843 78.5513 72.1245 78.585 72.3379 cv
78.6182 72.4097 78.6182 72.9609 78.585 73.9927 cv
78.3843 79.2769 li
78.3179 81.376 77.1812 82.4258 74.9761 82.4258 cv
71.9351 82.4258 69.4956 80.8955 67.6572 77.8354 cv
67.3228 77.3735 66.9976 76.9106 66.6797 76.4482 cv
66.3618 75.9854 66.103 75.3447 65.9028 74.5269 cv
65.4351 72.5342 65.2012 70.3276 65.2012 67.9087 cv
65.2012 63.6025 66.1704 59.9995 68.1079 57.0996 cv
70.0464 54.1997 72.7534 52.7495 76.2285 52.7495 cv
78.4014 52.7495 80.2388 53.6572 81.7422 55.4717 cv
82.2109 56.0054 83.0293 56.9839 84.1992 58.4072 cv
84.2656 58.5854 84.3496 58.6738 84.4497 58.6738 cv
84.8174 58.6738 84.9844 58.6919 84.9502 58.7275 cv
84.9175 58.7637 84.9014 58.7808 84.9014 58.7808 cv
85.3687 58.7808 85.603 58.6563 85.603 58.4072 cv
85.7529 49.9204 li
85.7529 49.9204 84.6167 49.6899 82.3442 49.2271 cv
80.2388 48.8354 78.1836 48.6401 76.1782 48.6401 cv
70.999 48.6401 66.5542 50.3657 62.8452 53.8169 cv
58.7349 57.6245 56.6797 62.6772 56.6797 68.9751 cv
56.6797 74.064 58.0669 78.2095 60.8403 81.4116 cv
63.7144 84.8281 67.5742 86.5352 72.4194 86.5352 cv
76.3291 86.5352 79.8545 85.9131 82.9956 84.668 cv
84.166 84.2051 85.3857 83.6362 86.6553 82.96 cv
86.6553 73.7793 li
86.6553 71.7158 87.5576 70.1494 89.3618 69.082 cv
75.2764 69.082 li
75.2764 69.082 li
cp
f
168.21 66.96 mo
166.88 66.8843 167.043 67.272 167.043 67.272 cv
167.303 67.7729 168.047 68.333 168.159 68.4155 cv
168.191 68.0205 168.213 67.6226 168.225 67.2222 cv
168.218 67.064 168.21 66.96 168.21 66.96 cv
cp
165.745 69.1665 mo
165.469 68.9365 164.739 68.5376 164.563 68.4629 cv
164.387 68.3862 164.033 68.3325 163.702 68.3589 cv
163.371 68.3833 162.846 68.5479 162.593 68.6499 cv
162.342 68.7515 161.117 69.042 161.117 69.042 cv
160.762 71.4697 159.663 75.457 154.963 78.8804 cv
151.952 81.0767 147.36 82.104 142.813 80.9639 cv
138.853 79.9727 136.508 77.3325 136.508 77.3325 cv
160.822 61.4141 li
161.02 61.6455 161.161 61.8379 161.161 61.8379 cv
161.881 61.7485 li
161.881 61.7485 162.974 61.7124 163.501 61.6855 cv
164.802 60.8809 166.849 59.8428 167.111 59.7095 cv
164.198 51.0483 155.947 44.8701 146.32 45.0205 cv
146.305 45.019 146.29 45.021 146.274 45.022 cv
146.277 45.1836 146.304 45.9082 146.574 46.6616 cv
146.759 47.1782 146.462 48.3545 146.529 48.8301 cv
146.749 50.3882 147.708 51.7593 147.708 51.7593 cv
149.35 51.8901 150.288 51.9727 152.765 53.0674 cv
155.242 54.1602 156.751 55.8154 156.751 55.8154 cv
132.787 71.4937 li
132.402 70.6611 132.206 69.3569 132.206 69.3569 cv
130.258 70.8701 li
128.28 71.7417 li
128.28 71.7417 128.66 72.3398 128.705 72.7119 cv
128.75 73.0825 128.732 73.2192 128.6 73.4351 cv
128.465 73.6523 128.039 73.7954 127.706 73.7798 cv
127.375 73.7661 126.861 73.4038 126.723 73.2896 cv
126.583 73.1724 125.93 72.52 125.93 72.52 cv
125.93 72.52 125.966 72.7051 126.057 73.0356 cv
128.028 79.3511 132.817 84.4038 138.934 86.75 cv
140.159 87.2046 140.96 87.3774 140.96 87.3774 cv
143.551 87.9746 145.958 88.2344 148.273 88.1128 cv
157.375 87.4375 164.872 81.1313 167.357 72.7085 cv
167.363 72.6865 167.369 72.6641 167.376 72.6416 cv
167.4 72.5576 167.424 72.4717 167.447 72.3877 cv
167.498 72.2017 167.545 72.0254 167.587 71.8574 cv
167.589 71.8516 167.59 71.8467 167.591 71.8428 cv
167.611 71.7627 167.63 71.6875 167.648 71.6113 cv
167.751 71.1802 167.84 70.7432 167.916 70.3022 cv
167.81 70.293 167.05 70.207 166.536 69.7993 cv
165.981 69.3584 166.021 69.3965 165.745 69.1665 cv
cp
168.135 64.5156 mo
168.067 63.814 167.967 63.1201 167.834 62.4404 cv
167.793 62.2671 167.764 62.165 167.764 62.165 cv
166.726 63.1567 166.617 63.7832 166.487 64.0981 cv
167.096 64.3281 168.029 64.4976 168.135 64.5156 cv
cp
129.777 61.9619 mo
130.18 61.4868 130.748 60.627 130.993 60.2339 cv
131.25 59.8193 131.71 59.3374 131.97 59.0996 cv
132.23 58.8608 132.48 58.6982 133.059 58.2788 cv
132.699 57.8887 132.093 56.8242 131.896 56.3193 cv
131.699 55.8154 131.654 55.3677 131.646 54.7808 cv
131.637 54.1958 131.806 53.4023 132.089 52.811 cv
132.373 52.2217 133.318 50.8892 133.318 50.8892 cv
133.318 50.8892 134.797 49.1797 134.939 48.9424 cv
135.025 48.8013 135.126 48.5601 135.193 48.3901 cv
135.193 48.3901 135.194 48.3892 135.194 48.3882 cv
135.345 48.2227 li
135.345 48.2227 135.346 48.2197 135.348 48.2158 cv
135.311 48.2397 135.271 48.2642 135.233 48.2871 cv
135.233 48.2871 135.234 48.2861 135.234 48.2842 cv
135.208 48.3027 135.181 48.3193 135.153 48.3364 cv
135.137 48.3481 135.119 48.3579 135.101 48.3696 cv
135.102 48.3696 135.102 48.3696 135.102 48.3696 cv
130.623 51.2148 127.27 55.6631 125.84 60.8931 cv
125.464 62.3076 125.217 63.8076 125.11 65.4141 cv
125.11 65.4141 125.612 65.6816 126.022 65.6753 cv
126.511 65.0815 129.375 62.436 129.777 61.9619 cv
cp
0 1 1 0 cmyk
f
170.629 65.3813 mo
170.175 65.0942 167.847 64.7207 167.395 64.6104 cv
166.946 64.5015 166.432 64.2939 166.432 64.2939 cv
166.19 64.9624 166.685 65.2856 166.685 65.2856 cv
166.294 65.3501 165.662 64.8149 166.363 63.4751 cv
167.065 62.1367 168.569 61.0405 168.859 60.8208 cv
169.148 60.6006 169.613 60.2432 169.508 59.8149 cv
169.404 59.3872 168.759 59.3979 167.788 59.7446 cv
166.818 60.0913 164.962 61.2134 164.208 61.6733 cv
163.452 62.1343 162.616 62.3853 162.616 62.3853 cv
162.112 62.5503 161.428 62.5767 161.428 62.5767 cv
161.487 62.4775 161.778 62.4136 161.992 62.332 cv
162.205 62.251 162.536 62.1494 162.536 62.1494 cv
162.494 62.0522 li
162.044 62 161.305 62.1284 161.053 62.23 cv
160.801 62.3315 160.451 62.376 160.451 62.376 cv
160.216 62.3989 160.204 62.2144 160.204 62.2144 cv
160.173 62.0977 160.55 61.9751 160.55 61.9751 cv
160.522 61.6284 li
141.034 74.3789 li
141.032 74.3799 li
145.247 76.6563 147.665 76.4375 148.213 76.4673 cv
148.76 76.4985 148.217 76.7417 148.217 76.7417 cv
145.138 77.063 141.714 75.3589 141.714 75.3589 cv
141.434 76.1436 140.59 77.1724 140.36 77.4092 cv
140.129 77.647 139.646 77.9277 139.259 78.189 cv
138.986 78.373 138.69 78.6807 138.538 78.8481 cv
138.531 78.8569 138.522 78.8662 138.514 78.8735 cv
138.505 78.8843 138.499 78.8921 138.491 78.9004 cv
138.456 78.9395 138.435 78.9658 138.435 78.9658 cv
141.667 81.2529 145.468 81.6621 148.355 81.3477 cv
150.77 81.0845 153.306 80.1997 155.449 78.5234 cv
157.82 76.668 159.199 74.6831 160.111 72.6812 cv
160.866 71.0308 161.117 69.042 161.117 69.042 cv
160.239 69.1929 159.478 68.8726 159.478 68.8726 cv
159.245 69.0146 157.792 69.6812 157.617 69.7427 cv
157.442 69.8042 156.667 70.2241 155.822 69.8877 cv
154.978 69.5503 155.175 68.3931 155.458 67.8047 cv
155.742 67.2124 156.359 66.7148 156.435 66.5586 cv
156.51 66.4014 156.39 66.2471 156.39 66.2471 cv
155.426 65.7549 155.094 65.2544 155.094 65.2544 cv
155.461 64.9976 li
155.534 65.1724 156.699 66.0273 156.796 65.9868 cv
156.895 65.9463 156.93 65.8081 156.928 65.6914 cv
156.927 65.5742 157.195 65.2002 157.22 65.5693 cv
157.245 65.9395 156.999 66.4136 156.999 66.4136 cv
156.651 66.7114 155.944 67.6602 155.757 68.189 cv
155.57 68.7192 155.66 69.4985 156.578 69.5059 cv
157.495 69.5093 158.387 69.0464 159.296 68.5049 cv
160.204 67.9639 160.674 68.0146 160.849 68.0122 cv
161.026 68.0098 161.148 68.3408 160.817 68.3643 cv
160.485 68.3887 160.136 68.6094 160.136 68.6094 cv
161.196 69.022 162.764 68.1538 162.764 68.1538 cv
163.871 67.6885 165.171 68.3945 165.506 68.6421 cv
165.842 68.8911 166.731 69.6006 167.419 69.8433 cv
168.106 70.0869 168.514 69.9634 168.61 69.8633 cv
168.706 69.7651 168.779 69.4126 168.561 69.1626 cv
168.342 68.9111 167.768 68.4321 167.434 68.2622 cv
167.1 68.0923 166.696 67.3555 166.696 67.3555 cv
166.424 67.3994 166.461 67.2417 166.461 67.2417 cv
167.134 66.5679 167.798 66.6348 168.266 66.6465 cv
168.736 66.6597 169.971 66.9521 170.361 66.9077 cv
170.751 66.8618 171.412 66.7148 171.464 66.3242 cv
171.517 65.9326 171.083 65.666 170.629 65.3813 cv
cp
143.567 46.3955 mo
143.49 46.4761 143.293 46.3623 143.293 46.3623 cv
142.915 45.937 142.206 45.5181 142.206 45.5181 cv
142.185 45.4023 li
142.513 45.2017 li
142.689 45.2383 li
143.065 45.5054 143.544 46.1626 143.544 46.1626 cv
143.544 46.1626 143.643 46.3174 143.567 46.3955 cv
cp
143.068 48.3169 mo
142.933 48.3193 142.926 47.8691 142.848 47.8716 cv
142.77 47.8721 142.67 47.7773 142.683 48.5181 cv
142.694 49.2603 142.244 49.2441 142.244 49.2441 cv
142.03 49.2271 141.794 49.1758 141.838 48.2778 cv
141.883 47.3789 142.528 47.3735 142.528 47.3735 cv
143.016 47.3643 143.128 48.0615 143.128 48.0615 cv
143.149 48.1597 143.147 48.3159 143.068 48.3169 cv
cp
141.399 58.8662 mo
141.325 59.1807 141.02 59.6523 140.455 59.7012 cv
139.889 59.7485 139.353 59.1709 139.312 59.0552 cv
139.272 58.939 139.407 58.897 139.507 58.9932 cv
139.647 59.1304 140.334 59.4883 141.183 58.7734 cv
141.183 58.7734 141.472 58.5522 141.399 58.8662 cv
cp
138.438 48.0371 mo
138.367 47.2778 138.972 47.166 138.972 47.166 cv
139.497 47.0605 139.643 47.6885 139.643 47.6885 cv
139.643 47.6885 139.698 47.813 139.626 47.8628 cv
139.51 47.9429 139.444 47.4365 139.288 47.4971 cv
139.132 47.5596 139.316 48.0249 139.316 48.0249 cv
139.442 48.5103 139.329 48.8442 139.038 48.9067 cv
138.745 48.9692 138.508 48.7979 138.438 48.0371 cv
cp
138.157 46.3042 mo
138.154 46.0903 138.578 45.4727 139.001 45.335 cv
139.253 45.252 139.313 45.3105 139.256 45.4082 cv
138.679 45.9653 138.546 46.416 138.546 46.416 cv
138.413 46.6538 138.161 46.52 138.157 46.3042 cv
cp
141.002 56.0205 mo
141.032 56.646 140.649 57.1597 140.26 57.2051 cv
139.871 57.2495 139.354 56.7104 139.324 56.0273 cv
139.294 55.3467 139.558 54.7358 140.104 54.7275 cv
140.612 54.7197 140.974 55.3975 141.002 56.0205 cv
cp
139.927 52.0942 mo
139.927 52.0942 140.617 52.5518 141.037 51.9009 cv
141.037 51.9009 141.268 51.7217 141.272 51.9956 cv
141.276 52.2686 141.088 52.7007 140.659 52.7856 cv
140.232 52.8711 139.833 52.3892 139.754 52.2739 cv
139.674 52.1567 139.828 52.0386 139.927 52.0942 cv
cp
155.595 56.4746 mo
151.667 54.0962 148.755 54.8862 148.755 54.8862 cv
148.336 58.0552 146.361 59.1025 146.361 59.1025 cv
146.631 58.9028 148.019 57.062 148.214 55.207 cv
148.401 53.4272 147.421 51.9585 147.182 51.5908 cv
146.861 51.1011 146.425 50.1587 146.425 50.1587 cv
145.819 48.8408 146.173 48.4087 146.133 47 cv
146.091 45.4966 144.878 44.2471 144.878 44.2471 cv
145.192 44.2822 145.889 45.1104 145.889 45.1104 cv
145.887 44.9155 145.978 44.5415 146.543 44.3975 cv
146.937 44.2954 147.674 44.1597 148.179 43.9966 cv
148.685 43.8325 149.086 43.5566 149.196 43.0864 cv
149.306 42.6162 148.877 42.5845 148.683 42.7041 cv
148.49 42.8242 148.14 42.9072 148.14 42.9072 cv
147.808 42.9526 147.946 43.0684 147.946 43.0684 cv
148.225 43.3872 li
147.464 43.4565 146.604 42.6982 146.208 41.728 cv
145.843 40.8364 145.023 40.8862 145.023 40.8862 cv
143.578 40.8716 141.805 42.1929 141.609 42.3105 cv
141.242 42.5303 141.497 42.6206 141.497 42.6206 cv
142.045 42.6509 142.476 42.8003 142.476 42.8003 cv
140.564 42.9082 138.971 43.4019 137.928 44.2007 cv
136.888 44.9966 136.106 47.5078 136.106 47.5078 cv
135.881 48.0591 135.377 49.1118 135.377 49.1118 cv
135.111 49.5454 134.665 50.1475 134.126 50.7407 cv
133.589 51.335 132.134 53.2324 132.162 54.9878 cv
132.189 56.7451 134.175 58.9395 134.375 59.21 cv
134.574 59.4805 134.62 59.8301 134.62 59.8301 cv
134.024 59.1753 133.441 58.6938 133.441 58.6938 cv
133.441 58.6938 132.636 59.0615 131.925 59.8262 cv
131.398 60.394 130.933 61.2544 130.512 61.8457 cv
130.091 62.439 128.896 63.4575 128.896 63.4575 cv
128.473 63.855 127.626 64.6255 127.32 64.9819 cv
127.013 65.3374 126.396 65.8555 126.396 65.8555 cv
127.182 66.1558 li
126.876 66.5498 124.874 65.8394 123.416 65.0425 cv
121.958 64.2451 120.228 63.3745 120.228 63.3745 cv
118.694 62.7344 117.542 62.6938 116.979 62.8774 cv
116.555 63.0156 116.56 63.5093 116.991 63.6592 cv
117.422 63.8076 118.64 64.2188 119.074 64.6021 cv
119.51 64.9849 119.833 65.606 119.953 65.8374 cv
120.074 66.0698 119.877 65.9961 119.877 65.9961 cv
119.479 65.4941 119.204 65.3032 119.204 65.3032 cv
118.353 65.8618 117.005 67.0547 117.005 67.0547 cv
116.433 67.9629 117.483 67.7114 117.483 67.7114 cv
119.779 67.208 120.854 68.5576 120.854 68.5576 cv
120.854 68.5576 120.938 68.9077 120.739 68.7148 cv
120.542 68.5244 119.834 68.2222 119.834 68.2222 cv
119.766 68.9263 119.146 69.1694 118.728 69.9189 cv
118.31 70.667 119.169 70.6919 119.44 70.5322 cv
119.711 70.3701 120.177 70.2085 120.526 70.0854 cv
120.876 69.9614 120.56 69.7334 120.56 69.7334 cv
120.986 69.5313 122.92 70.8291 123.706 71.0894 cv
124.49 71.3511 124.092 70.7729 124.092 70.7729 cv
124.991 70.8745 126.821 73.0332 127.293 73.3008 cv
127.766 73.5654 128.153 73.4043 128.153 73.4043 cv
128.457 72.8506 128.056 72.1543 128.056 72.1543 cv
127.313 70.8184 128.342 70.4712 128.342 70.4712 cv
128.19 70.7085 128.082 71.2949 128.082 71.2949 cv
129.287 70.9648 130.333 70.3628 130.91 69.8462 cv
131.487 69.3296 132.183 68.8491 132.183 68.8491 cv
134.04 67.7471 135.33 67.8643 135.486 67.8608 cv
135.643 67.8589 135.549 68.0742 135.549 68.0742 cv
135.072 68.1338 li
135.658 69.4634 li
135.683 69.5137 135.704 69.5552 135.718 69.5815 cv
155.699 56.5371 li
155.664 56.5146 155.628 56.4946 155.595 56.4746 cv
cp
138.19 78.7842 mo
138.19 78.7852 138.189 78.7852 138.189 78.7852 cv
138.271 78.8438 138.353 78.9023 138.438 78.9619 cv
138.352 78.9023 138.271 78.8438 138.19 78.7842 cv
cp
0 0 0 0 cmyk
f
139.001 45.335 mo
138.578 45.4727 138.154 46.0903 138.157 46.3042 cv
138.161 46.52 138.413 46.6538 138.546 46.416 cv
138.546 46.416 138.679 45.9653 139.256 45.4082 cv
139.313 45.3105 139.253 45.252 139.001 45.335 cv
cp
143.293 46.3623 mo
143.293 46.3623 143.49 46.4761 143.567 46.3955 cv
143.643 46.3174 143.544 46.1626 143.544 46.1626 cv
143.544 46.1626 143.065 45.5054 142.689 45.2383 cv
142.513 45.2017 li
142.185 45.4023 li
142.206 45.5181 li
142.206 45.5181 142.915 45.937 143.293 46.3623 cv
cp
141.838 48.2778 mo
141.794 49.1758 142.03 49.2271 142.244 49.2441 cv
142.244 49.2441 142.694 49.2603 142.683 48.5181 cv
142.67 47.7773 142.77 47.8721 142.848 47.8716 cv
142.926 47.8691 142.933 48.3193 143.068 48.3169 cv
143.147 48.3159 143.149 48.1597 143.128 48.0615 cv
143.128 48.0615 143.016 47.3643 142.528 47.3735 cv
142.528 47.3735 141.883 47.3789 141.838 48.2778 cv
cp
171.059 65.2954 mo
170.765 65.1855 170.643 64.938 168.144 64.4961 cv
168.145 64.5029 168.144 64.5098 168.145 64.5176 cv
168.145 64.5176 167.133 64.3428 166.487 64.0981 cv
166.617 63.7832 166.726 63.1567 167.764 62.165 cv
167.764 62.165 167.768 62.1748 167.771 62.1885 cv
167.97 62.0249 168.823 61.3193 169.298 60.9004 cv
169.836 60.4224 169.925 59.7808 169.685 59.5103 cv
169.448 59.2417 169.144 59.0308 168.773 59.0757 cv
168.423 59.1187 168.055 59.2202 167.127 59.6611 cv
167.131 59.6738 167.136 59.6846 167.139 59.6953 cv
167.139 59.6953 164.894 60.8242 163.501 61.6855 cv
162.974 61.7124 161.881 61.7485 161.881 61.7485 cv
161.161 61.8379 li
161.161 61.8379 161.02 61.6455 160.822 61.4141 cv
160.515 61.6152 li
160.516 61.6318 li
160.522 61.6284 li
160.55 61.9751 li
160.55 61.9751 160.173 62.0977 160.204 62.2144 cv
160.204 62.2144 160.216 62.3989 160.451 62.376 cv
160.451 62.376 160.801 62.3315 161.053 62.23 cv
161.305 62.1284 162.044 62 162.494 62.0522 cv
162.536 62.1494 li
162.536 62.1494 162.205 62.251 161.992 62.332 cv
161.778 62.4136 161.487 62.4775 161.428 62.5767 cv
161.428 62.5767 162.112 62.5503 162.616 62.3853 cv
162.616 62.3853 163.452 62.1343 164.208 61.6733 cv
164.962 61.2134 166.818 60.0913 167.788 59.7446 cv
168.759 59.3979 169.404 59.3872 169.508 59.8149 cv
169.613 60.2432 169.148 60.6006 168.859 60.8208 cv
168.569 61.0405 167.065 62.1367 166.363 63.4751 cv
165.662 64.8149 166.294 65.3501 166.685 65.2856 cv
166.685 65.2856 166.19 64.9624 166.432 64.2939 cv
166.432 64.2939 166.946 64.5015 167.395 64.6104 cv
167.847 64.7207 170.175 65.0942 170.629 65.3813 cv
171.083 65.666 171.517 65.9326 171.464 66.3242 cv
171.412 66.7148 170.751 66.8618 170.361 66.9077 cv
169.971 66.9521 168.736 66.6597 168.266 66.6465 cv
167.798 66.6348 167.134 66.5679 166.461 67.2417 cv
166.461 67.2417 166.424 67.3994 166.696 67.3555 cv
166.696 67.3555 167.1 68.0923 167.434 68.2622 cv
167.768 68.4321 168.342 68.9111 168.561 69.1626 cv
168.779 69.4126 168.706 69.7651 168.61 69.8633 cv
168.514 69.9634 168.106 70.0869 167.419 69.8433 cv
166.731 69.6006 165.842 68.8911 165.506 68.6421 cv
165.171 68.3945 163.871 67.6885 162.764 68.1538 cv
162.764 68.1538 161.196 69.022 160.136 68.6094 cv
160.136 68.6094 160.485 68.3887 160.817 68.3643 cv
161.148 68.3408 161.026 68.0098 160.849 68.0122 cv
160.674 68.0146 160.204 67.9639 159.296 68.5049 cv
158.387 69.0464 157.495 69.5093 156.578 69.5059 cv
155.66 69.4985 155.57 68.7192 155.757 68.189 cv
155.944 67.6602 156.651 66.7114 156.999 66.4136 cv
156.999 66.4136 157.245 65.9395 157.22 65.5693 cv
157.195 65.2002 156.927 65.5742 156.928 65.6914 cv
156.93 65.8081 156.895 65.9463 156.796 65.9868 cv
156.699 66.0273 155.534 65.1724 155.461 64.9976 cv
155.094 65.2544 li
155.094 65.2544 155.426 65.7549 156.39 66.2471 cv
156.39 66.2471 156.51 66.4014 156.435 66.5586 cv
156.359 66.7148 155.742 67.2124 155.458 67.8047 cv
155.175 68.3931 154.978 69.5503 155.822 69.8877 cv
156.667 70.2241 157.442 69.8042 157.617 69.7427 cv
157.792 69.6812 159.245 69.0146 159.478 68.8726 cv
159.478 68.8726 160.239 69.1929 161.117 69.042 cv
161.117 69.042 162.342 68.7515 162.593 68.6499 cv
162.846 68.5479 163.371 68.3833 163.702 68.3589 cv
164.033 68.3325 164.387 68.3862 164.563 68.4629 cv
164.739 68.5376 165.469 68.9365 165.745 69.1665 cv
166.021 69.3965 165.981 69.3584 166.536 69.7993 cv
167.089 70.2393 167.929 70.3037 167.929 70.3037 cv
167.929 70.3037 167.928 70.3105 167.926 70.3203 cv
168.338 70.3306 168.839 70.2866 168.924 70.0161 cv
169.071 69.5503 169.127 69.2959 168.174 68.4219 cv
168.173 68.4238 168.173 68.4248 168.173 68.4258 cv
168.173 68.4258 167.325 67.814 167.043 67.272 cv
167.043 67.272 166.88 66.8843 168.21 66.96 cv
168.21 66.96 168.21 66.9639 168.211 66.9707 cv
168.384 66.9834 168.687 67.0151 169.114 67.0903 cv
169.818 67.2173 170.679 67.2759 170.969 67.1548 cv
171.26 67.0342 171.706 66.7505 171.738 66.3589 cv
171.771 65.9692 171.352 65.4097 171.059 65.2954 cv
cp
156.008 56.3008 mo
156.751 55.8154 li
156.751 55.8154 155.242 54.1602 152.765 53.0674 cv
150.288 51.9727 149.35 51.8901 147.708 51.7593 cv
147.708 51.7593 146.749 50.3882 146.529 48.8301 cv
146.462 48.3545 146.759 47.1782 146.574 46.6616 cv
146.268 45.8066 146.273 44.9868 146.273 44.9868 cv
146.273 44.9868 146.305 44.9829 146.366 44.9785 cv
146.412 44.9414 146.637 44.7759 147.034 44.6826 cv
147.482 44.5786 148.806 44.3413 149.13 43.8101 cv
149.454 43.2773 149.639 42.6309 149.343 42.46 cv
149.048 42.2886 148.715 42.2339 148.656 42.2539 cv
148.598 42.2754 147.864 42.7749 147.434 42.7241 cv
147.434 42.7241 146.882 42.3804 146.639 41.8579 cv
146.396 41.334 146.171 40.5879 145.428 40.5415 cv
145.428 40.5415 144.607 40.4258 143.906 40.6304 cv
143.206 40.8374 141.483 41.7827 140.984 42.3369 cv
140.984 42.3369 140.93 42.5713 140.951 42.6484 cv
140.951 42.6484 139.897 42.6846 139.181 43.0288 cv
138.463 43.3716 137.665 43.5396 136.79 44.979 cv
135.914 46.418 135.962 47.0615 135.813 47.395 cv
135.662 47.729 135.345 48.2227 135.345 48.2227 cv
135.194 48.3882 li
135.126 48.5581 135.025 48.8003 134.939 48.9424 cv
134.797 49.1797 133.318 50.8892 133.318 50.8892 cv
133.318 50.8892 132.373 52.2217 132.089 52.811 cv
131.806 53.4023 131.637 54.1958 131.646 54.7808 cv
131.654 55.3677 131.699 55.8154 131.896 56.3193 cv
132.093 56.8242 132.699 57.8887 133.059 58.2788 cv
132.48 58.6982 132.23 58.8608 131.97 59.0996 cv
131.71 59.3374 131.25 59.8193 130.993 60.2339 cv
130.748 60.627 130.18 61.4868 129.777 61.9619 cv
129.375 62.436 126.511 65.0815 126.022 65.6753 cv
125.612 65.6816 125.11 65.4141 125.11 65.4141 cv
125.112 65.3965 125.113 65.3799 125.114 65.3613 cv
124.728 65.1992 123.276 64.5718 121.363 63.563 cv
119.09 62.3652 117.923 62.082 116.487 62.6509 cv
116.487 62.6509 115.805 63.4771 116.741 63.936 cv
117.744 64.4282 118.015 64.2676 118.983 64.9946 cv
118.983 64.9946 117.437 65.9946 116.802 66.667 cv
116.169 67.3423 116.437 68.1963 117.412 68.1035 cv
118.385 68.0107 118.988 67.8257 119.52 68.1294 cv
119.52 68.1294 119.506 68.501 119.275 68.7183 cv
119.044 68.9365 118.216 69.6138 118.241 70.042 cv
118.269 70.4717 118.218 71.0195 119.31 70.8657 cv
119.31 70.8657 119.989 70.6787 120.958 70.1377 cv
120.958 70.1377 122.178 70.7637 122.807 71.1235 cv
123.438 71.4849 124.338 71.6069 124.548 71.3311 cv
124.548 71.3311 125.396 71.8643 126.073 72.6343 cv
126.134 72.7246 li
126.339 72.9268 126.635 73.2148 126.723 73.2896 cv
126.861 73.4038 127.375 73.7661 127.706 73.7798 cv
128.039 73.7954 128.465 73.6523 128.6 73.4351 cv
128.732 73.2192 128.75 73.0825 128.705 72.7119 cv
128.66 72.3398 128.28 71.7417 128.28 71.7417 cv
130.258 70.8701 li
132.206 69.3569 li
132.206 69.3569 132.402 70.6611 132.787 71.4937 cv
135.428 69.7661 li
135.71 69.5825 li
135.072 68.1338 li
135.549 68.0742 li
135.549 68.0742 135.643 67.8589 135.486 67.8608 cv
135.33 67.8643 134.04 67.7471 132.183 68.8491 cv
132.183 68.8491 131.487 69.3296 130.91 69.8462 cv
130.333 70.3628 129.287 70.9648 128.082 71.2949 cv
128.082 71.2949 128.19 70.7085 128.342 70.4712 cv
128.342 70.4712 127.313 70.8184 128.056 72.1543 cv
128.056 72.1543 128.457 72.8506 128.153 73.4043 cv
128.153 73.4043 127.766 73.5654 127.293 73.3008 cv
126.821 73.0332 124.991 70.8745 124.092 70.7729 cv
124.092 70.7729 124.49 71.3511 123.706 71.0894 cv
122.92 70.8291 120.986 69.5313 120.56 69.7334 cv
120.56 69.7334 120.876 69.9614 120.526 70.0854 cv
120.177 70.2085 119.711 70.3701 119.44 70.5322 cv
119.169 70.6919 118.31 70.667 118.728 69.9189 cv
119.146 69.1694 119.766 68.9263 119.834 68.2222 cv
119.834 68.2222 120.542 68.5244 120.739 68.7148 cv
120.938 68.9077 120.854 68.5576 120.854 68.5576 cv
120.854 68.5576 119.779 67.208 117.483 67.7114 cv
117.483 67.7114 116.433 67.9629 117.005 67.0547 cv
117.005 67.0547 118.353 65.8618 119.204 65.3032 cv
119.204 65.3032 119.479 65.4941 119.877 65.9961 cv
119.877 65.9961 120.074 66.0698 119.953 65.8374 cv
119.833 65.606 119.51 64.9849 119.074 64.6021 cv
118.64 64.2188 117.422 63.8076 116.991 63.6592 cv
116.56 63.5093 116.555 63.0156 116.979 62.8774 cv
117.542 62.6938 118.694 62.7344 120.228 63.3745 cv
120.228 63.3745 121.958 64.2451 123.416 65.0425 cv
124.874 65.8394 126.876 66.5498 127.182 66.1558 cv
126.396 65.8555 li
126.396 65.8555 127.013 65.3374 127.32 64.9819 cv
127.626 64.6255 128.473 63.855 128.896 63.4575 cv
128.896 63.4575 130.091 62.439 130.512 61.8457 cv
130.933 61.2544 131.398 60.394 131.925 59.8262 cv
132.636 59.0615 133.441 58.6938 133.441 58.6938 cv
133.441 58.6938 134.024 59.1753 134.62 59.8301 cv
134.62 59.8301 134.574 59.4805 134.375 59.21 cv
134.175 58.9395 132.189 56.7451 132.162 54.9878 cv
132.134 53.2324 133.589 51.335 134.126 50.7407 cv
134.665 50.1475 135.111 49.5454 135.377 49.1118 cv
135.377 49.1118 135.881 48.0591 136.106 47.5078 cv
136.106 47.5078 136.888 44.9966 137.928 44.2007 cv
138.971 43.4019 140.564 42.9082 142.476 42.8003 cv
142.476 42.8003 142.045 42.6509 141.497 42.6206 cv
141.497 42.6206 141.242 42.5303 141.609 42.3105 cv
141.805 42.1929 143.578 40.8716 145.023 40.8862 cv
145.023 40.8862 145.843 40.8364 146.208 41.728 cv
146.604 42.6982 147.464 43.4565 148.225 43.3872 cv
147.946 43.0684 li
147.946 43.0684 147.808 42.9526 148.14 42.9072 cv
148.14 42.9072 148.49 42.8242 148.683 42.7041 cv
148.877 42.5845 149.306 42.6162 149.196 43.0864 cv
149.086 43.5566 148.685 43.8325 148.179 43.9966 cv
147.674 44.1597 146.937 44.2954 146.543 44.3975 cv
145.978 44.5415 145.887 44.9155 145.889 45.1104 cv
145.889 45.1104 145.192 44.2822 144.878 44.2471 cv
144.878 44.2471 146.091 45.4966 146.133 47 cv
146.173 48.4087 145.819 48.8408 146.425 50.1587 cv
146.425 50.1587 146.861 51.1011 147.182 51.5908 cv
147.421 51.9585 148.401 53.4272 148.214 55.207 cv
148.019 57.062 146.631 58.9028 146.361 59.1025 cv
146.361 59.1025 148.336 58.0552 148.755 54.8862 cv
148.755 54.8862 151.706 54.084 155.673 56.522 cv
156.008 56.3008 li
cp
140.26 57.2051 mo
140.649 57.1597 141.032 56.646 141.002 56.0205 cv
140.974 55.3975 140.612 54.7197 140.104 54.7275 cv
139.558 54.7358 139.294 55.3467 139.324 56.0273 cv
139.354 56.7104 139.871 57.2495 140.26 57.2051 cv
cp
148.213 76.4673 mo
147.665 76.4375 145.247 76.6563 141.032 74.3799 cv
141.034 74.3789 li
141.032 74.3779 141.03 74.376 141.028 74.376 cv
140.501 74.7188 li
140.588 74.6626 li
136.508 77.3325 li
136.508 77.3325 137.059 77.9526 138.077 78.7046 cv
138.191 78.7881 138.312 78.875 138.438 78.9619 cv
138.468 78.9268 138.887 78.4399 139.259 78.189 cv
139.646 77.9277 140.129 77.647 140.36 77.4092 cv
140.59 77.1724 141.434 76.1436 141.714 75.3589 cv
141.714 75.3589 145.138 77.063 148.217 76.7417 cv
148.217 76.7417 148.76 76.4985 148.213 76.4673 cv
cp
139.312 59.0552 mo
139.353 59.1709 139.889 59.7485 140.455 59.7012 cv
141.02 59.6523 141.325 59.1807 141.399 58.8662 cv
141.472 58.5522 141.183 58.7734 141.183 58.7734 cv
140.334 59.4883 139.647 59.1304 139.507 58.9932 cv
139.407 58.897 139.272 58.939 139.312 59.0552 cv
cp
138.972 47.166 mo
138.972 47.166 138.367 47.2778 138.438 48.0371 cv
138.508 48.7979 138.745 48.9692 139.038 48.9067 cv
139.329 48.8442 139.442 48.5103 139.316 48.0249 cv
139.316 48.0249 139.132 47.5596 139.288 47.4971 cv
139.444 47.4365 139.51 47.9429 139.626 47.8628 cv
139.698 47.813 139.643 47.6885 139.643 47.6885 cv
139.643 47.6885 139.497 47.0605 138.972 47.166 cv
cp
141.037 51.9009 mo
140.617 52.5518 139.927 52.0942 139.927 52.0942 cv
139.828 52.0386 139.674 52.1567 139.754 52.2739 cv
139.833 52.3892 140.232 52.8711 140.659 52.7856 cv
141.088 52.7007 141.276 52.2686 141.272 51.9956 cv
141.268 51.7217 141.037 51.9009 141.037 51.9009 cv
cp
0 0 0 1 cmyk
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.2%%For: (Patricia) ()%%Title: (ghostbusters w name.eps)%%CreationDate: 5/14/08 5:13 PM%AI9_DataStream%Gb"-6k?8hJnh9ptJF5^26q3UbYR(XB0\Mh(Yd"2]@"PU.]_=H/cF(F[X.I]A9i>)+mJT8iIR'X*@s-n9RP#:(XgaY/LR4Wuf"[RC%ZEE>44`BO>IH\4.@I)lNZP-V5.]TL<?T%[ZWG8PXqtAfmkoR9;\'7[Gg3RMA43RH5`_S(#j=crt:T]-..o2/Za'>=NX^B[%Sso=Q%qmk,!gI2E[Z>s5rH[*-VIs\nD[[6TSWhEP.k0?^_eCAT2^Ph+=QeSFI]B1:0ft?'gVT0]>0X(<LEO4Dr=jn@$RU1.*@`L\j.Wta:%?@HYgI->\,NUB1"jm/H#qfDB)or6>UntK.=.-c(Xddc)hmaS%T#gc+CIS#msL8Ej!4S?M<r:A;5(BALQnBu/rm_u19+)V6Ab3eWe%_uHG7R^SA<A4;`3H@'D8:L5*RZj_\O/Xl(7m[?qpH)9-$rm\_]-2oQE^I<k&NV:\1QhI`XoS-?uk:Of$7)7Yrr7,Tk3+7>ifB19>%eg\pgM0@Vt.++2h<O;:_XQL=N];Lp_\hfGlK?9iXZq"o@>EcjP8/lTrIe`a.ZKt9-]\[Hhgj,B".X=\bicu=lhiI1(L^DL5]A;V-%1L\.hlCQUg,Sg'6`;lP!$'AO4%g4:`Z1uA6\Q!7S?YYR<KA^B7P*+X:r]=K_Wse9Vkb"m7[pe4(D<#iJlBW'cX8%[PWf!^S.\>5W%BJ!C*#&5"[r\=o31(;YfN-a=Ie$`,o[Sb)BIqW]RW+F_^Kl?aG>1G*;<NBe9Xl;p[ME:DkT%<4^J_'KTT%E;&NL6u<YF(@f;*79?%pGp;2^JPAS_Jdr@RbX0cB35apUCL=XhcR>q$.0N(_Jf@+(#_)t&o\IH@n$0PFlO.3=;/[gckPN8(=n2sW)KmpbhXAb>ejH,;*YH&%78'n+0mbX!0fLgJB(#)L>=8<U/Z]Jtd?E3KZ"if&lkho`$gVkX=?o<^`VT'CIpmJ/s7'=;*$tB>>$)kqMd7$!,2arja+u>X@-0*@%\9fRb-_QK'!cBVq`6-'c0lo'&0s9`nh(MXCrJ*F9SVrn<*EnA$Ml0Z!I\W4EDlcaM7'spOeA:Ej"W+LNg(BD[,7*XZES/5F(Y^Wb%JLLX:>e4nK<5;e`:-`*D/)Z/M]0##T:!=WcgsJRZU:ke(re[$NaqWJZp0>C&oMF_#!e3@J(N"0rQWcPpEoH*<^;+V&mlgS9CCc2*%9)!M^KsJ/uR#qbJ[.^0OcIJJh40IdK[$5-Ys5?mq7G7L7.,p*X.K4%MptPZ[s)J9K(F@q9ph-&TDspX&ZRkXUA[u;TcG+C&4RkVS%^Igrmm<skA\O*DF9"[siDdu04m<skA;X^79kL_lo(AfT\G5i2IZp$pZC3mR*eeQZ8eLea>,fS"$R4DgM)>/j;_mTESa#7_m0E*'`%afQ4l,^iSV+^=r<*a@QTpZ',<\=`f`ecZ;76N4;Foq*.l.HE]!;u`i%_\D[fA*Q;-)Y?<p15$)3T1UDD11UqieJ2BcDl&UF$5j'"%!!T\ug.Fe8rYqg>'LMYo$&u!%Q0E3p#hFZ/!D`&AnXXD3(#=V!?'@+p6n:eP?iuZo`Ab8T<%h]#V`pC;b\NB%1=<-Y;@Tsr2Nm0k%]C)s.bu+E$FjWFY5PW7)cr!tY.:F,qbuP"NM,O7A4W;`/:\<fAB5Z3NnL`B<C]Lr@V:"b#A2nuSom3h)\sOAtM4/#!dY*pU7)*HA%/6<C2d6&\uaIO,^38Z"10_M_--J!%g<m<J"pGuKiPT]Z-F(NGBnD*sp<pK?/i!^OA1L1a%&UTF>kgcg(QFUt-^JqIUhW_V`6Cpb\%=Vf"u0j@Hrrl1iQSY%ohAui;rR_VmkM9HfAp<PN[&Tr:k!='.)5UC=*@P9mSGs)EmGWgknl&(C7@bmbs;:h@e14=N!^iLV<F8&qd%$i2$h2&mO5PHh">A[1u]^',Q5Sne88LtS"5*#BU1`HLSYT[k&`i10%0K!Tg$1FLGd)jH6r=LSAkU+"i0qUe?&a_i392/6V/%cYd_%TiG_`<Rk,#H<J73(SAYr0lsV7hS(HP\;eZ<>[$Z@<,b8tF/d*mUMa;lG%^#X*I^K9[TjZ[OskX9a`84]1X%.`DnI*1Z'Nsu!Gb]S%EB;SM"jmFV`LVoS7<Ngui#Z*+E3BG:$SLH,\=^@g*^&-EE`K#:Eo_F_c]^=k^Ds+nqu1Wfb(!oe53d=SXV%./2-gE@")<G)%;1E5%c#P@XMcBjt6u*U2"YXr-N2RCch2l.73.g1:XT`=Uko=/=1j2Tn]5ijA?]b$YBG12YQQ=@(JX^(a_,KkQ7LSRpO5m`4_o"%BQ46\8%jFg1:;)F:S7'@Yc3ch^bE?/AL._>jkj4[1F0'jR'?$#-WBbdD'4Vg8jW`?86BU(*(G+q2+mLfdmaC%PVGPAVV%>VDH'k;%rK6sYA%g,XRaY2nb+l5m-ie'GAQTRns['GOJAX-a*ePZA+!'<SQUfKCh"Vm?b&PhsjcFEKa?ZN94Y[?IimT@.c[M:S8:-4*n^IL]p\RR1m!%If=hAlj,+"X6o0O*/>j);YtF8a(pI-;9.RFW=FD8OsQ4a'9p:brhQsADQ&<-Bl2JI@/Zt"QA(>]/@Hj=>k'Yfpe_g\T$Vud.4WF`%42sQ4/AZ+bUTqEe*tI%2D/[de!Z1lC>f/O[q\tQtos`=NQ64+o+iWca/qJH=rNHfhBd:l,3=^M`(gqX_T[:DX*R"Ime4ncT\\I%"%R3X)uj]</gm`G]=l!LcpCYE?**X0m/B,ZaUF67I=8^@IIKSRb,FgK*!Fk'W9he0(l-jU7V];PioTkn+DA=5"W6bjaQMf7"8V@JJ\%b0_tSXBJC1>-@>0[0Oj?YWmb)\O&,Bq'dclF&4k4PT/ZGkH7%fOW3.9iC,K6osm/Mo]*Dod`9Z(q=i#Ef9_.j]AF=G><hi=g$`#m%$@WodERQjF:`35MX.Tc%Xk0sQ*8UBS`QZ".VC4%^M:nPhMYWBG>8&fG%1JkN3mIkRZB4-7BR@Hh!V>9OOu,i97@4;J"5=jT2.WBn%p='U!9-U<Ybd%BKB[ppg3O[>!+fUjTlOK0Cni1.d@mBT46[1k1<gN'ZKHJ1_qscf5dkp>I!P)Y/4;ufO2=NiMJ'7"NFZr*rrHJm5%/HS!<Q=I0t,Pj3s%1KfPoDj6;lH7.P!T3cMM;c!?Vgr"QPWfpiL1d+.hTg^g!]T%MVVNbL?Jr&p5\+;l"COb0/;Z\1:ORc]H8psq%!/A%G")5=[[A\fTr:"t!8O7u)5VX5P,St*3A:N;#hK[C@_K4oIfk1l7o0Kp5(sdoVe"$ll$?9,6k^OPsVfS0iETI*V"b37:c_C*N%j7+8ih"5;']Rm.C_8[n;oi6[QSBfT)"i@"-kY">+?tFp;$HP5HY.A6]XDLs`g,=A[Q3EmPkN@Fhj1Ir98'ZitrmM+Qk+'+H1IDW?%05$R_>hmZWr-u8g@+Mlu'KVbf8760D]3T.b(u_"H3P-Cbj[sY,]k(;.+5I,Zqf%eqU+Lb>_V^0U_*N0cX(pq&"[.Yu@2[Cr#Ju)d%j/9\67<VJqOuRT+C\Kq!)J5/8Sdj#@/6GG(51-0++GN&6cMMa+-Xo@TB6[Ragu[>/HJ`]d*i:[4jq./6,WC&g"?4H&EV2;hiU`EG%UbcSuT-TIh5AiNn,Y=f3iiG3NTA?->CP`?JG$nHN'Dd>6pL>[eh#%itY#MakgsDJ5)EaZf/01?an30uX:';2>/OFgJfI\tA(W:T7%]UuLj7!Q6`1sE*4gL<uD;j_J6k0jb!/&l0L<<Y%t6CVOhaEg[]cpS,40FrqoYp;J;'JL>MNS3pGdWokuTjJIZMsrh<UNsq/3jPM8%Y`;T.ZZ5'+.S`i/XJ.ZpQW*hVC&W0<0?2l<mZr:nS]Z5YASNB6*aUe*1RiP0Y;rNX*B[+?TZK!F`3l7&AC2D/<Jhg\[hrVfP-MVM%,"Y4fMKf'er\0;368%nB.ECCQfP=?M`+^N0MRfPQF69_bkJYhk:82JWJmCUM/i171(7>fR37u$/\7ejbDKM/S6#@@A<Y5SXCJmQ2%:=>/\P?4+&]$X,:gNDU:r"O-kZL=^ViLJ9)+D&Bs#1IT]9Q1n/EoG+P9+lV:_CI3Z'GuuHZcnhO=Ib@,'JX[2@[Dl1M90'R<sS+]%BsIE6C_:McH]fe.#7B0#Zh=$o(Yck?BMR'af!FZtF%0fW-,FX:9h=_0aj$Ghp,cB:`F*r\CE+q'="5ENeids;f30E0@W*<%P0N$E%A]]Y1a86!.R!R,g#2Md7/r`Jdq.!O]j'AbnH?-"$0#u4"`"f>c^La[bAJ\iucN<_0H.*?%/ZcK6\=2OdFu'+8%nnY-9q37#\3Mq5%`1uU#`.B?CXRKbJR&@O0Sq/RqAc;iP89:NnFf_9O-f_:PW`Z[J3oat$o%`"",]/V8aoLOCWFM-fbATmoRt,WDT)8C+7,L]#WSYj9%RnkKDe2s3mR<dJJU+ql>3L5Yk%a%`+BPWCWb&0m2ekHic`I@PlI^3kEiul^Xi\2*[\:\1hX)fK.#'9EW>XX7EbJbJsfqWCTiE5@5%s/boN`,Zih=*.^P?4E&&(\/Q5MWLC],*sWZW^^cN<JBtTP/Is=kfABrjKq]9B&>Ztb51/f&GDR3Y</dCiMY&=:G.7sgl7rGq/dCb%pG<D9$e8AE`7,:gl`=_7nqMK\N<j=5B7FRb&X4;37fo8dXBT?/)5PqqS1UQBID9K@:2mIChab?Y.6,EK=jI-JqeaM-G]&EQ)ijh3%;B.e?Zl@nkUH;B9d6I4gYWY`"$uuR>SY!FGE?]JFZ(9B(HdLU;E!43(HAf"511@hQP@tPTcPj76&XtiQiO\3eMXJAD!>-$7SYJYI%KCh\DpJeJs;,kIRPAlLtrkTjW/Dj7dWPQoZ;iiiL`KdjE;hUO1['AXU8+Wq[3HCS.dlUoZG=qFt7r.j%[IgDc]-l1/G],[S9L;OZ%djW-t`HLc\F?K;21EOm$6Y1b,lE;.dk9=7^IJgUCB05A$()>nkeOu!6'jdNXG[<t.'?&L]61I&so3pZ9@W9R_QNO>P.*f@Go?sYJ%mtiVZrI7oV(%Fo/DBhj[GaMf;BT?Y*#L=.S]kS52Aia?4T5J0Q9;3SD,kg%,.9I48CBOQ\Xg:J^q*4a6Y!F7#Z>*Xl<&U+TOgT=:%P[Nu:h'Pag^_,G=imX=$T=Fb_qsEjN:VuEPc.n;SKg.RLrd<(Vq^Ci,`7eh>eDVf4?()3uU!]$?p^@c/XCbR+P")-Z;2<%dW)4Xq%4(P&3607(`n#[aM^<`esKgLKq3&l[aT"1=H,pI[@Vm.)-F0)+N4-rNdC6^3j.D$;$mJ]YtETX]g)CmhhVcLnSN;B2%s6rPm$q;3u%PrnmGRHqGc<IB*kCs3CG&$&\5[iIDe7FGGkMk,WH:O?-ND7_?>'tl`KnPRCNRc_+/FO[Rj/@</*;q!r1WNfa#3c6GCmqWqmqnmmj%VZ'M(a2s_KgSi&U1&j8$qG4Nm.-*T#;u`i%PIu;C2c3/TF8u7]4<M<1TJGSX3gKWXpR`r:)=jDPWW,r`@:[IZA1ID)mlsnMAB96)%VZ&BR&J8:#Ge(`29]B9aoo,BH3pr8-L[EYkl_f!Yqp%utS)(PTEVU=KID+O4g(,jH&h:B::TWm"V`/q/fl"L:DSQ*_j^u\[Xd`r%%YgL/1=.Yj6GFc:W;^VLfM\]:'qs^L4b)216f=Aj!5.>OJf?aB2c*-8HQPqphhRDOSLMeo]UZ5S6En/H:g2EPZr9%,HWAhTMUY[hu%@P1+Js,8ZB\\ZJ*Mh#pL85=m.8EG$h5Ah18*BsTgr(laog3@pipt9PthETdb%1r'B2j/DD^gQi57_@omk<IeK$u#Igo1eQ8U%@VZ%UT`a_dI'3R4uJE$l?&NAl+PW95?dGe+5")Fj5j).WV,PGA?Vg!EgK"+ZsT$.`]!d?Ge#%+@=%X_fQr"cKo,Wcqo3E8Vq\ngF3W_R%B`-A)BsdJ:hWkg@L[^Z*=caqdZ<jI*2).QblW[Obk)$NkJt!"WIm#YN\^JbrlX)=C7t*HWHV'<7]KLDPcK.^rNTXo&0ipDbG^^sc%4&r*S5u)GQ*IOZ$T5s?'KKD3g)F>m&rYPP'OhUafU4;:4r*KBnX-CAoddp6pg`:WgQRdmr^<bn61b=(G"DL<]oMX:cfQ_-DQ1H72%DfThV4CUpR>i35ULUXh38oG9MY<a;@9ATE[f!bjd0[*S>P'A89!8[R&:,-l*.ZEWIRB(ZXV3&%8-22?3:&O['$YVBNIms@=)YqgZ%B&b=)qqAQlRj3S7>YFljKm5q5p:8Rr'Lf<3e9PnR6a[h#`M1FQntg1AGkURuTdYe?VrY;Ze.sA!M$UQ]jgT+Xs/A<VhL>6,btsJ.%[/;H%>!(VeG^b#!mHi)M]0d$:)E4cfq_!AVq_Q4_deVbfId=-S\Q0XEhp5(OoQZ3\8,M9-XkRr0?7NG=%0o4LEu/?MhcK.;ro*+E%h/pHm_V]d!?erJ'*VdoT^N?XY1tnMp7/k6V4"3%<Wdbp_Df/jFG@KjN&F8OsVGhL)^E,EhXd<W(^c]#B+.IIW+QM#m'4MH`Y+#[1%lrVK:2F7o%]_?[`l0Irm*n0hD#RNL'&t.>Nd("@9AjQ@E?2\[co]8<*8KCh2@>r4sDVmM2f(2,Lao4Id>jaGAPsM2ZM.K,r^RZuj%0)n49q4BpKSKIn.&!k680H"u(*cD#4H*LtN79*?1=3Zb0lb=M/](]?NfW"YlZ=(qcZ)Y0"h)?F)hIg77]peufZ=H+@8cR((L&^d3%oMg58/'C!QqPVrmZTI35ERX39)R.uod62/-YTkHB<W-e6"%5?E]&V@GqmKXY\*5!$q';C-kp\_R]8\mMJOZ2c4lST\h)R*Q/D0'b%]GMrO!k<@-I+i=WCTUg0?aIFOlgW@OXR"ElD;@+A@!)51qC?rJHA#.d9ou0BdmTMm5G$dkIqc@_D>([prFt,3>OD>_j/MQh)^`0n%PLjuadqo%uk$*>(m8l9B3lqhKT,q>1[k6gLs3A*C57%ml5%dZa7I.)Qo^L;QGFSUB4.9VnG.R(lUJ%VnQ[?uhLUZIEVe2k"o]EXg%9.)A'\$T$#k#"op^?6m(_^7@QSW45cb&6&lD#H/OoBuV?+)$<s\!b"I5nY7F,uf>@C#(u$Pk.+n-Wl0Da^rq?B^IZ=pH>,c42$$B%&1pj1d,Nucqat-@\'YpbZ"!ZDH%kt2EDdXbY3PO7AX[tpV5_tU2a."/XkK7piiCUH2dSPK%3jfd^M)P\]6pO>.84$12gB(;hjWWA%efD?Crg?S;^N'"pD;7694`p_hmB]GcICQZ=Gkq0dpt<k5[U.e7IZKK#D7/i$GQ!ID?eTF@"-8(JZuL>Lc";A'gnP;256\3Q5aG$V%]\Vo6fM=;$>V0lioZ?Yl8tP)prG(.&$-&X"0V8eUHR2M9DZ=MWQPH[SH$jkM+YNFIQT/Zj8PnV-0g!.nR<K>M&g(=:32"Cj=JQ0l%Z2Su%gA.)$a8PQ>0?i6USVM(clf??k@"D=5"b-$K^_gD>@oD)J!b4"Yd*)Y@.%L^:?4$+C5I1s02qs>(#@K./`ru-.i]!UZ/hdB?%QY==5&T/lgTl)t$qWgVFBKE([j,C2TPqrM8<$)fXU/a7aL7k[#f61"N^u?dIFmd2YQ,A>js.%brlhP?hduLQl\'\f'boa<u]DTo\%q-*[S%nJ9'A]*nBquX9ULtg9Mi[agP&d9>Z`:Cg6D"?As1]haan*m;^I&>Id'5QJ?>OA'%`5t)`rqJ=VkZT"TnX=?&WV-69ba^2s%52H2QO"$gKm7Sf5Uf=6bda+iQoOH\&kJq$:VkPV_87?8iV:<%m[pJ*mr8XVX]R(!%8S"C;gPrfp2/8p^nVO'\;Z[\VMDl%gc%P>)%MD*5HUjN&3>'GaTiCfMuQkJ[HaUfhZDBD(Lea)!L8@gZA-5p"p](/M#dg7`oJ$"48(;lSj<#t2mnIqf-Xk2<.8qg$Wd^d6NgE8P)%W-L-!\*r#RNjkA09FQJf2dThGU[Dg?KkmN)iS.uej-VtY*Z+E\bo;h"U__eJY@`jA%M#])npcnb),W>rmFI='QaE"@Th$JD5.Hnk%+PJ'>Dc5#P/:fol)7>](pW4-uXSfT^<=1G-bc1'u;3j,DGC\Jt9BJgZhIZ+[Cg4)sCrON/LM,%0M+RX/AujU-\X%,KaYhhE$o@QY%R4IP0O&`4HD#O.VBm.t*h1r"!.a`IbcGRsE?fXX\7Gc`;a((B<d>,SqobsBjL[K4.J`i]+W7)7@;fMl/pb/Tq>stnB9GKF3qE7t#%[gCW?OQXss;ZMN/5DY$M\(^l*6'%C:CeFL"MU<V]L/3f\FD\ppQ_5M+Zu*OmBp=U+KQq)1nocf^)qqUc6asQ)77E9UH;l2RL(P!H%#,A(+j7.]e\WgiG?YEQ1l2f5H9r$N9!3W6?&2j:Y6\``H(6P;.4.tf7eb6<U,I[GiU]&gOc8n>ShQ/N_p!#Nbm1=>sdIgi#5?]^3%KZb:b1Uo^uH&G7@C3G60OXe<u-1*C-@Dae!k0GSp#b%"96JXgQ:38YXge:R]!n80g$jusR0oe>dplS_,&:Uh;kJ*1)T3&;J]oVlo%PhkUg?d&=q$eL:F%>HX4-P>>D]@hUu/"ta*!irkZ>i"8FoNDnJ#e_jllJKj?[F:V.<*IqD?War/Wq`H)+-)Z;hLhT[2h(7&?2NEZ%e:-&>O'D':XYacWUl3d[;e9D!PArfAVf&V1/<sg2jU)Y/X,e>Lk4ZRB'8uSqo]Z15il&^go'sZXhK`sI8_R+=d`TN[&$Jc.kDlp0%db1D;eK2-+KC>jU`DS;JMt-`,_p\:*b</_"47B/UFks.]$LRQPb"[0OFoULuNnmjG[Q^2rl`DhokskR8McBRO^\D&@.BhOLo4@O4%)+C)W>,X'uJ"lIVNO\)-"VoQnH\rrs=)#.mDSPXfVEl!,V36!QQJp)iA(A2hb.#s^Zue5Yo>h/C\*^@sk6(Bo]e-=':/(8rH!b<I%`DXb1e?%QrJ'jmX:Xo68(*)tHrH7So.!j67o:*J,rN-nskdRPih-;*[X>d*JYd7Jg*q[@gCqCo.g<kNob#d;mZ97RbRO`X#G%MNa%Q=:'Kmq3Rq(E:bSC)?&2?(0Z/*-AK8BB0Cuk,5cgW3o7jcY'YQ6&g)B_rGbtDU@k#k.<8ohOq4khlrSClSI9S`UcV#?i=^VcCfqK%1El7fn%2A>4=K1JbslYJ0*mcV.NeC>ls0Rn(,*(\^$5Y.WjV\"l.^u>m%F4(_.;.:eAGfOCnprG\o8QDB`6M,R5*445s+23C>>Id%"L6P>74W\d+!tV^1Zid@C=)\/GI]Cd]6=!-C/CmIDle8;dO;q;SN8rO^Q0F8]D*l+^M\IW>j5e4o=j]r3^&KA1fobs(Z4prenVje%C&V@%Lfrt1WSMh_SALrjIGd8gc``c&'72R7q3igef=G`u/t>3\Q=`L:)TTINVde#4X2fNoV-hfMh9-6jC=$4Z1V*1j@m7Ug13hI@%TR6:tLY+oE+0Va,QpECgUuUQKLBe!CK`JclFL?2A>jOoiH@3F"5'G<OX0%GJW'S8q[EGRl3cf1-!dJb[h:qJGRl`-@d*l:2'g(X$%Angjn#L*u-f"*)s^8gKRK<EIiIQRF5NZ@\-m:JOs:u]S6pA2AU4c9@1PpUoBpcK?Ukl/EE?g"g-o9"ZSm1tb-:ro"&[6>Zb9V9?7%>*lCQIXd.poO**MI9Gu;6\Ef84RC(k,pNW0f%.dm^9fBpD+o+3K1*&sIQP0k0^(hFd2]fG5POR4q3n8QDL/-"?L.@]:K,Q3O7mrl%dS*;\q`57fbcK*-"U?Wf4$PsD_k9ZZTJVPD+EiYV=7;)/%D(E\@tdu9>7A)$]<N1SmmO^80I$f#g0O[p!:S^b_Y^I#O#.1Q>O#jT%-h<G248k'AXhTPpD*P,H3J/q+'n\$m3iNgj5Ob?2g<&b8%uO6&>2NV/oUF#k$nCoNGi,*a4RX>.e"B;TGA`ac?;;7ClA+T$'oR>-%`Q@Pua2mF^NJS1op=2Jgk3:*iguo`lMg@uW:g]_@<2ODT)T?-nDI*aX4sf67+50D+h7pOq/F)ImgH>8BV2(Z9G(6RI[H,jkAp!A+%l&#(cZ]1`IVqq)/gE5<qU7^jE?ZUqWKa%E,k.,KF^V9P&'D$>/a5O=L\eOtigA`A/P#PSCJCq"]e_A9Drhmd.8`Oi$2<O.Yg!f5A%Zh;\o*lN4Po4M"hLIt8+Xi9V+nbF[2l!Cq"CLp83Mgi8;M'VYqcLo1Dbk(F5cYBAR`&rJIh-,,@>1$,!^)e2b)G?fA"N8%"?hU_9%^\.9g;jSRq4DgT=/!Gm'4UtrGoDNuZnt6lVqM4_9Icf8UAE;4Vg!SX?m)8m,eC/Sfjn^B,:tLb?BCWXes'2O>*un:Pn[+>`[EI1J%SVaO+[E,7ahj8!=$Qg_0o@#mZdIWX6q=V)iL=^bEFmd._cf0:_-FIT,:&SPh-#J&pXS,=D1WhQG>8@nD47D9f`S.5rM8dq^A63*p%I@ch>S9r/_6eJ$]M5?bYdY5sg:!md"V=dBc3F:n=]TGj6f#nJiUZZQ3m')cIj$Rb;GGU([RlSpd-9'$$.0]NZHW$873F$T`SZ.o^%"L#O<_>ZY_$Y/@3lI2M8me_dik-!\KSZI<FMB,Zr=,_d!6&g)!-,$8GYJ"?HK3ipu(j'gcNurIbZ[L4?</#MS)qN_hpY0r)EX1EJ%$3L"'Io,NWaq*@(ohW:fn#!#?H%XNnn"3AK]jX8.#.D37&#ro?`"+n3s!\,M1,pi>%P`U!2+b6o:#)D$fKl3jDbA3XCLrJNG#7BI%-ZS'MoEH&a7<#B`e"L'4(J36:iVAtL&c6KjRHbg*CPHLeVWQsUb!^u1mC2E%Jra,Dbrot?rSq(;FK+rmlp@Q!fb`::hl>''[M^bO%A:#$*H16Yu]XR,&>*F@%)tjfYY1+4Oq<@-_Rb6ZEA_!2mj&:XY]%gJ;S\=n?p);?JQ-t)e<ktn_]`I7_DD&ua6h@jian(d)F];7-%(EV=8?/6q(IM$5boPMX2jf<bgrS+I6/@XfSTIEMUog44Z!>trnL,6/gh?n!*X#K=0%tHjRDk7rsT@8m,Dt?(4dnBV73h]-!VGqkd%\%Kes"?_CQL3rGeKdr9<2IG<h9*[NXqW,--,M'=Nn*ENG03@YHOFK.5CJd1Wm@Ut5qKX`2rtb>KI"=E`*:$rTc1_*`19e(QhraG:%X^rV_-$4;KO6jDD#'BTi-2j5,I@_1[4M9rFb`>mY\M5tJ2%\j/i*Pt.H">"RFHYUS9*/.Mois&^KNZX@<V=m,5]?<]erqV[m`)^F%H/i[QZe'mL%D^5ZBh'V1Urn[tK5T[rR("a.f;7Bhg'>5!=O9-,Cce4<k@0dT:;,Q<*GB.Q.4.<.oe%97dt3>6-6b;df-fFTr&>Ho%e_E!b.[l?'/A;>-7*:*j36]BBXVftM4YdH(\^W_m:'Yoas#-us?N"K?o_chK!TqGnm$B[\IFLWQ73<j0,]m'=?=rCP\gsMdJ.Hhr%7VRS@XtdKa3s4:b;]T@gUY`$cZ^6RhMrL)0=7T!@>26'?;;2CO.Cc)Hj`!M/@Ro?G@rbA*`Jr;oCLJMG0?3)7h_?ocIOg[:p;cAc%/llR/['9%c"O<02+0F/AQ;Hn2Fs=-7b'Gt>NucNq@g#`!c5=@9]?MI"onfMM@DMhi[,)#=St]qk-@[h6$nSK`PWC+;1-nreo?!ZR%d<PESihj*Nd!jOdN)f*^-@>\LPGn'XFtcXebJ&JnSu>Om9HL%:]:$Z.o"9!sXIZ3@*D,i0S;D<"EB$2X,!E&G$kNeeg(>JDjCeW_%bjfL0Lo+.s0:%3ElP<$&@rUhfRk+C30q[lK$Kpn-[*a9fk>n[1SLa=]f[7:I<nJ$,JLZ.e.::s^3s->Bi\\,o-bF-t%lTFo4udYi%RsbDY8%7i;cK=),<]<@h>#m^+;i%38%,7"Wie8^'1o89mUiCr:'+*uj6bt%-m+mN.2DSuEF-.ZHEdk,"As8,tc(9hT&4?#:R1ID(%q-Da][I.E)`&KW_`<l"q!:1qb5faA'N1EkL0[QVMA,nb4o9%h3m4g<q>2StFp3uB)es;BjP!P\_#kV<PdhOY61BO#Xhq+cRmG,nF%5q4)"$_P$saHpFEB:M]qCKpWY:L7SIcWp;Vf",!U4P&k=X<[d=*s#KII[9MPV&LUtn1jb!>6_,ih7N;69]0n3OsFB9l,clGZ\d5i%q`H.he1r!IBh!(HQg@4<Is3VmE&S)G0q6_,!R;c=KKf*djWWCucQAuqkOC*)M"+&I?-pX$$pM7-MO.)/Z@?Xm!>>hV*p'srL^tcV%?UN1so@F+"fuH#RSq`mfNR22bW(QN3<TtXqF+k%F['L"\8+21cSZ@g.q8AmsV.mdIfY-\U`Ln-V`<Hs.b=?'8Q^t>h*!4HQO!aY$%33O=Q)m-96'\!O!asCQo:.XRX`;j4gBU"Uk)\+RDcGEi$W/K&7!?H583RlMhKg$7dF`Xks_>"ICebO2?h'H!*&<hqWO*j+lkPJ.j%c$cLa=oD@aXH\EF"HFf*>LAiq.Sm3&+'X46&Qa80&k&>[N%_l:THQ>2CqMQDmUp&;jBf"+5'nAI*i,D/jdsfTO6A->69(&<%@ds7%6p?&+S!5<?f*MPO,DQEId#Jpd2=Ag=rerL*M)bO*&X5KP1KTC<c[-XK5(]Q#%*m8[4=!<6A)M$ka7*ecFq$X0ZhQm0=&roq5sf5,%kaGD79SDHJ;/-%UMPCVHq^7#;Zmaf8pG4j#3uQAt/,+**HZZ\K27k4^7\<qeBBp\E@IL$p$T`6K(p0S*FA$6r1LpKhcA."_Z3EL'%Lq,Q2NA[N<+3DuT7PWSf#C\?b9:ZO/A=<.$g$H]Di6`'D@fA+R>K[aN<_s?JY`Oj^V"PI&j9D%^Xi9[?j:DUb,uPEC5C$&l-_>?f%<V"5["R^(kY@!GD>]b?06"tR%MLHX4d];7V$V.Pu?t#l;YT=lZQ\O!m(@s7]('Z;tl>1"'99j\!3AnA^3uctO'e.,I7a^Z,]f<<:%,UmmPV;Ff9Ot3@%P=ZZ>b<hQ51a_s];5@Vk(*Y#Od?B:0."/?R6\Qanp#f2Xd$'aoi$g;f,?>VRH$tT.7g#DpW_E+g^fX.T-o5PJ%/l/@i1(e%$9p`H>e%?$E]J^&#QU98o'\kIp,!+%@k=MSL6jiFEFWSk<\9rT^?$Juh6n0lN"*oS';_^Ti?,VVs=FY@m@(PSJ(hk^e%C[q,t76$Ss%[7ieM_+D@q.$^IPVqO(8mVB*M\b3a%!6fJcFTF+3#,n*r5iq+"2UN2-3qD+'0D+L0ri2j6LZR8"<pecS1%s9<0CHF%J[g"=g$o)g$A/TkNu64CDO/sO;s)$XrNB^A`pHMP=\I@D)0EF+G]N#21[+ZjL5*pG9?s1Df'DN[FNGDB8_J]JjNo2ccip`ZLX2Ye%cCi>q`ficVS3[t6(*#Aj/ieP:<u=^C?#g,i7sBn8LG$+YB0VA!LFtT>cL6H+-&4*5K?hlbdW=W(!QjjLB!5(cG%(l-Hm[5:mt%>M%kNP."DPmYUYM@?6aHuI3I3V54*_rV$KP'uN&tBF:M'\3Ij#`cfO#.d]:An<RrK1^`)3_lP1,r-_B7(#V/WRJ-emQr_kH_:pQpr`s%JK?kr8Y8n.k$s8f/7D0L.<G!=%[])>NRqDdqT(]/gG;q5eGu9cK(e5V6,%2pkA3o3N^b?/%CWW3e\)cAPFChRN.`1p1$HcH;*Dp:%Z<Qt+:"W'19m.I*'I:aO#qu\K\pi*beI4`F]kdlrpBU%9(kP17lfLP'`24T]aWiP_1\.WejEYd%K?rc+"l<\?\"WKI,h%<B9V";[%X=9+m[XC=(/DI(`KjA?UNl-R"2p'lf<!(Hd-WZ:/Ht%S)()Y(A`9)VVG*CI561Xf6?X8aRcL,R+2T")gF6,Eai`"<,]5&KuVNd`G%7sX$,;XlL2]rfJbJ+ciF%/^*NHnWV1)L+2+*a`YW9KY'5Ed4/#NaKeY=l.7jHtLMDSHYk4L_.0jZ!%?`=Su%;^l*:og9;+r3e#=s%?_C>A[1h!/L,:$%DP\[63i!h_[nOl0$Zh69%QoIZS,)h^(;EbG]=Ttd_2-3E1%tHK]*ZJ`bW@#5b/NH6-s[r)/(/2&>HcmYa2#Wc%.Q?Duoq.2]gH>!TDX"O#%Z^</`XpkE!lOb=Kf!`oBeEW3Y<;'_m3J/BWI4*g'SC_mG$7qJa;@Onol2d9?3YCRoU/=SVNdGj(Vt7R%1SUUe?mpG^VGtY%[clscZ#K!RAgQ'i1qT/\b+u>[.=@!d6if6a/e\SfA]D\a.?omPFLH`_1'plW#ErUg)0X[q125/#)3WtlVA+K'%a-uq2'Cs5C;tb!a9p`gDZR5-7NZP%j0nVunGK,tY2EZI/`?Q&/CI$aE)1?32*Z6WB,C:?_i#\;BCdIsmYQ;W?^$<d3*A0Qp&<BMD%T-&STMmUftS3sM811>43.#IW+^-qSSUP\WQnLViRlcqJ1'%]n>jG8@<L5,37m>T)b_b5oFS./*O/88cJF+X_>L#gGC:8ZBleF^"B%kX&O_?s6mm@'PZQ&ZRoqj7ST,l9#rNQmnOH+Mu6CnLpm4@rf"S4W=.P9IO_Jb%?h^Z@nmoV7ti.*;OOt*[\iX5&rjB0^g)&4<H1:%$@:M'E$IfMB$Q0)M,53k4rj1TOXVt9+"m,DTX"$<_rejjUS6K'^[^I(7D*gYSW,WO0#Llp`fL_ogD>?1hjF#o,&FNO@i]elL-;1;%jbqZQ&L_]oAEXcGn[`:tR)luiM;`.JAG#M?0VOGfOK&1(70[BgiC,sSj*?a>o^jm+B@IoJd7_71*$#-RcI#B"*FduPB8?0oaY;^&%%k2>:M)YM[m+qXSS`r"tN2VAHDKLThmHc[$EanfG//`>1>muij)UcV3hI@\GMq>5H%@I#a,/\6J/,(h$)>\\'+rp,Y2klr>oCV7U%BuPg0UU/l/B%#Ojk3o>=D2hZV6HFq9Z;agbae8?=Un3Pj,PC?r(c,'hZghV&?Mtp47]JSMO!>mW0tFc\ge5)7<9e*A^?NfWbOeht%eCd6Y:P38TAq(8sh^"5BlXKufG\QH95t6*ocLU=2*uQ]WVJJXY^Qt&j(X'k=RL0:J/2a.L\B#gkiSsQB]W#ipq(4D#_@:*Y%\!eA%H3_i?qeo&[MtAKX4V]Tp5F0\\,Pda]'nkG9S<3L[%$2=mNUUA)lsaca<("NjlTS'mpL"111-,fWLjT=Gk,&f>am`\n$c-ZOC9a#f%#U^d;!Ejl"5!&]l)3UIV;p'n.54<0<G]5c18)i+089B#T5JA8hr,MPMXF7(?*j:pAQ/.Gn\!?9Eca?8'=/].l+4"]jRNIT+CCA1T%='FJt%/RDX82Y%[p%,6\SMIN4=VEh>]6eu*jO8oq\,A16/f#(Cpa"6]G'eFZEThUR"]E-:Q`HGhEQN+]Yut_LR86T!YiBN,@g4gI%iDT'HEQN)I)0W2ur1LQ#4*FG*Wr4_+(MbXj@2DOZ44G#&TYV<r^1t5<BK4ZS(M#_KA_:^<#oRoMogUZZ:oV2#i@nk?grELCp1rRG%P23:)P23!opd$j"hL4numCSF_E:C*`L`>tb!dOH`:1FMT5.7_9;@i3\P^$Vfqou[rmVRELPc:6XPsY-H]nC/nhrg?L)1#OiDKRm#%d7J,fd)([=B-kej#h3Teb^F6ID-2E:Yj-;G1SS'-!2jY44Y*58C5d2t=7WE1qdQ_f-WNlt-V]WmkZP*!]1FX?*kB@9Wf2%`gji_@%^6bE#SIO8p'r7)gL^2u:&hfA?M<c,0-$$9VMn/R6A#sS5PZ$rga:.\LTp1+PW==?,>]tF-V7eNH.blo9"a"IMhSHP_L@rFmQ;&0,%#C'RbEFmTfjjHT4+(gaR\gX1Y"MKb]9c''f2aZZe!6<`sOnM.TdtPRMcE/-d2I09`WG`%[31DPCW6ZfQ#K`j$3iDMiat[JV7HMsO%:.E6b9c)o($,.3n*8,F2^37hK*EP.)_L&H*Qq\B^9,EO-*Ci"nPgJRK+)<c?e<Igg2BG#N/o(E,Kn7b&%,#`"q\L+Z2,Z><IoiUn%$4i7n(U%&'1Ri8)L^fnLfA@>"V)IaX\mZa?=>jHLKp<U(2I08eS6J/-Cq?PTEb!FmM`NHSMh)s1Rk?1W/o84]SkU#d4r-6u)+QSj%<%_HY^5SXX(Boc5D-:AjVTY(C225qYW*HoeqtNW>!7tguD)MA]pP\uD;)'gQLeWQ\*cX,/[`#)fgd5Zjj1_]LC.a?:`DH<Z-#+7L%i08PoD#d.S:^ZBBDeDltZCsOclQmstAj&X[WddX/=@&h=jT`T"W%!SeNpR8NoNC,e'hFJ*@1qMJbY#R"9Wk$W'QNjEr%TT4,/UDp%4EE\8(4X`f!'+iBfA$PeF-THG+8hS>GRj="_te9&C[Mfj\[!O0AU5_KEdY06dG9TdqY3Mk)`>/P__lX@4Gk3c^[<K#UR6#J?'\`l%C=4t`DXQ7%EPShc+a*0_iEas%#C=_Hld"/R/Cp,J1*s]4LFCQuQ=i_5ja#\('T59Pfo$l1:8COnXrn`LGFWpW0dP2D`r>*UAJiDl%EFd<d"(7(m"Hi)i])KR6SE5JWk)oW<7#0*nJhHoU:iYY]867;OEM5]Y)X;Qpd87mDN.sC=(_)`CfR3IaQ2"64+6Q*W$K5<#?O*/Q%%+`aD+tm=MEBg3r+SQN.h/Sk"l&f9,=aFOo_@>kj`7j&uMLC_12nbA*V6doO&=lh5")3#M3^5Z(1.?rpA61<1Il6CVTZhB4CP!0"%D/CmF5ttqL9:Aa0n^n]DPCZ^-KU_PPG(UrKjk)=H:Kt)\%"loUk:tFS6g:#"n)m2@-`[,`.3@c]RemsRT/5UNX1hXL&%ek24c'8I%`"O>Vj@"_':O&R[c1`M>bkt5\9Z]h[,Md>%j]=q/EAnRLp>'[Hr4UX5gi/UQNUn07j2cVL/WAqk]G0qYHrJm(nri##\/TZmOg"KH%b=fuudH&)%gnig#]%HJh9#'=;lW_UGUb\7S/gjmKhKmG<=PK4U:<A47AP]CE9\r1K$o/ZnJ]u.h,h?<#Nll5]oK?9MT0^.n;=B=6%I`@IOMdG1(Vds!_]q>)o_YHQ7I.)`I9k-4'.).osU0iPNU>P.",098$AA=H!hRE7rb66=F$qX.Em?"FbP[^V+9RRdeg!"Ws^;LrX%k9C4Aq5EjHPFFU+'%:tbA@i@j=!H$JCD'S7:>pZA71_VAB?UH,L*@kMQo0jPP@@WG/qk!,N)D7)aHDL>iC0hWaDi#Kk."I;mpk8)%&GaUtnV6biN3F#&.-l_LJ6;T,`ZZADkUP"@3K+Hs(Vc)Y\<(sEi98cUhK2l\A]f<ok@bZgDjUlC4X]@$HIOI1lIS[+j1/l9c"al(%-5T(-hWHcf,$1^kWF(%UIG&;;Qa_q"+01[dD7*Orm3%AZpsg*AKr<l$*:Heh*k%9aVou#d\6K'VBpT,Bh&S'hqGA]'&%D'-p)kso%:VWMTI$eUCH#bTI.mE^21KhIC`==BJ5?El>#0dn$4`(*KZ1+FDPHMH#Z@.?0Zc(Rgjb8`@G7hRQ:-65JI34[M2`VhHRaurb/k78I%&]>O%+5T6Zm[OZ]iIu1$$a0+W.J*"2$2@oG\UUa-T48+shJM-,`=:O[)UuIpc.YBCNs2bpZ%';%1T7\r\@aLXkRe?jPK<3[1n=sB%2^\oQ\Sq5;lb/@]kJUQ9@peV8l;=$4'_NG#\SFS]SM&mPhk']4IS05GY=D0rUp.rEnTMIi/S<J6XRTdlZMCdA4BG?7GY$gmP(%&7%P/r/ER++Bp0QDqDi+$7(Xh(UQ#$(nUYSfPpLGRm#Zj^.TFYh3PD6VBeKESOKRjX!;8kY)hFQ-[aiDV7[SAWA?e-6649Ueok2'_<2%1XNHuBsBl_.2=Pn:HTc5,fFE!Mu!"c`Wk*rZ.4&CIBi"J0/GYQ.iZ+s[ZU7X1;O4=mu8:0>N7WGqd[c<qR/,5;]],re`d";D]<22%D^4Xpe<0ESn$O4bZQ+uGh&+1*BTWCa2.%obC-cM&;-I-#A"fQX)l4:pRVbad-EfE[LUg:=`apB-E!L#t#1m?pk/:t#QL!i<^tO]r%fi=9[NZj^1XUMr^+qR#DRJtckYW`\8M;N.s#fjaoafKCVSLKs?ahEJdF5ZHR^c>G0b$2Y#lV=EDs(,f=)>g"X%,/4@8pt\O,GYAF%q0cd'BBVK[nYq$`m9_!^@V4_DBl(k0=q&OOOZG"(QrbuR2PIJ,bC9bJ=R,iKfb^WH'4U5d+f<5%esA#EY8qr]1/&Hkef;JE7/%6!%@Mqj8pT5?R?)4><B?C7nmLPon(uE$;*'dkal4@*KaZ1>hk@-ej!JXDsf#$d7K8nWZ;/Xks&0!M80X)i03IlN<<jCR"j[MD*NBBTE%@/Q7@^66igV3k'9W^>Fg^mFU$F<fPeQgt;ubPJh'jbr[ZN;leioGcK'E@INaO_;Z9Vq=Z<p`sj`)t8TlPV:/e2uZJG'(8=3gSK:#%n#m_i;SIZ_!L)6fY$r`#E0;Y-39F8VEP*4tp\KjqPA>"'L)TGc^YmPWM+p?*gIC&cQg>HEaKZZK?G@%PL2QZ'p>&R(Hi9,@6EujO%JG8oZm#Z:h?ei8e#//VA'./cfY?u<\LsL-"d_1)I1:bDDYFinsMK@tSjNEARqB[ess8L1"me'5eeShB*5U,Xh93tG:K^.LiqF,:#%nls@o\CWAoi[j4tcp?l+9g=M054WE9,Mh[P/ElknB+4P2-/[uHi#AV(n+B=3F^q/=#JSeC.Vd,<eSjOGpr8EeT)E!1jBd**a)J4h%npuZOU3i\_rK7h,,;N/P]%8V35fLFe06B:nd.dD0LV`e)olK/XL/(Name'4bB"=#i)YRLPaE*fA$6cLHdI6a$%_*!\U^hmX?Qaj!%moI3;pKS/QY?s$bh&G$:^"4p"ekUb;j1*\oq/gk3qtNX*Mb!8#^<uNnU2T]D4I[Sl?GGPGiqR3A_=$thf&T9FqrmeN-/[uHSuf<+%pl&Hd4SS[uT/VP##_p%E0DSY`&anZu+@maA5/*.dVUN0-D_1YQV:s?8hVQV/YMUI(nV&sHB_VAr-!LLip$6/tNHhX6&%s0*oc#5.%D/_?[(<6Wlf.T_?\b]%or`JU])b8b#qRq@2nm4i"f<<e!`k0WR]@Uu*R&c$irJ"+&n(m7F\0'CRW\e\?;pqds$#_gCk[)"@53AdE%I8Xn&Hi9*0Sbd_+6f.,FQQE'$5qIB.e+.<5WZ:h@^VT9Z@INjs0Wr,orC2Vbo\\u$N"NUZ:>W@)rK7o5hFZ^_p\H0``-N&A[!Vb7%DtT%8a+h1W01cH_3m9SOoujAQN-;C3E$rQ4qB]b*%WJUYZ>`@VilleR?a=Wi1aO,A(Al%fY*LbQ+W'u"5!n_';Q&m%P*#Q)f.N\)%`fbC`i-d:r0uV,>`D=>!S*9q+cT_53?Hed`(P6UpJ=?UOq46@##U3f4:!?qh]hL&CB(h,IY!(lIg?l9%8uFd+s0I,Q=t2(!X(Qd*%=Z7*WpY2Oq>@V9GC"`)nQW%6<-apX.'BT(gdcAA+@sRA7ls6a_pi=#/e%C09aq]lqh;?iHj5'.LouHOupH-W0gYT^!qL*Z@^[D"Z%^-?pg3nZ(O]q&JJcHT[&<u:"J?0K$5SduXos*.iEZJKF7Nb<"YD09T&ZINcV$I[H&qmeAl\#0W-_VXYEn#>JUd!jrMeo%ZC+&:%0%h;"Jr.L/`Wmr,UVW@k<T9(gMCF_UGQCL>dXfY;@6+4cb3Dtg:gSXIIq)_?BRag>=O]s4eNm9a<q-91Beg,LsngRXrYhgm6fRZS$#%fb_pe?0u`L?g?b/qFZ%pf"1u]g`ndWq>D`\=AQ5GI"*n?H?+B2`RpeBgYZ.i>,tcig\9^Wr,goqE6<M,<%/e.Dgn5PI_<@gg!b;f%68(?`[cqO:akWHd7;/r&mnD<AQR:Ds?O;pY_"igTb<\3\:K9XTHnRScI&g'k*.MbC>FHpfr,>aoB6&Yb/OeDRX8G.e06QGn$at4W%Wba(flVt=eEW*r"kPat;nU5o'elUGfp=-"PlIV*c[WnW@j^MXcO>WZ1XDXWSinNfdD6`S2TAA5XQ8cN0J&iA)%ula2c$A!PIJdqT%V=V_Rja-61;(=GP01!TR+X1A%X[up'Zl[c*PK>"mlgjan1MdIk-!d##57(fb/c'O6JcFf?2LYEr"masi%/&7XjDX>5LC`;.f5m9?%dZ8>45M+f]::+`l48t'h8h](K&*Eg$WeHr!"%3Xr*hCAr]gkNkK:aYYH4M:YK;GR7HhYAU*3W>ugmr9RaqhL-Xrs`_IOj:K*\I3a%fmI(k:f_U)K"`l]@HgqO13OE1WJJ9,^(ksB+"`9u2m5!ndW)YTP:ojf/@2i.k,9[Xh&9;cF!U9kj5o$t"9-d6p@c\+b[u`3\u79H%p5U4pHMVoLT.4p%EXs^nMs`"Agls*6:WJ0K7=4IWqKqIKb)_^'3i9,86e6%olD/;jTh][hkuR@t/!o+84tN5:D]>`)g4%`QH8d?j%Z&1=2j`nYYjGQ[-r7p#nP]tEu^3b[5be;gq\j/5ZoX7MoD66&N4;2tBe@obBJcKPp#<I>Z9WgOL-r0$]jYnN5ARhl_h'W:JfmHr/%/$B*u"6e-F'E^VG40a<"#,#`RkhClRl_Vnm)KUJ`>N>2qOo^7(cZO3sj0LF6LdfXH'<<SA@iq+R(YhW\^PSHsMqEYbqX^_>Vko*,%e+5/Ao#cf&f&^&KAs7/OUd*+L62QY`@uYhiF[J:EfaX[(::>mPnV&7cBj76Eo?dCXR-0Noji^3X#]YSL#>9BXn3C<M\M&MokCU'Z%GN&/L=m/TU.nscJk."T+r\I2jouWZ?q,XstP('aD-MYEWH+I#Sr`HlZh=7o4<7tNJ_rg<jQ*b<>F=_t[o&e&q7JluR+EXV!V1A?+%Q9KZPEH1a9<jOnj.K*`3M_A+sRZi'>PFl*7gMW&l6,(cRn1-WV_2#F.?O,=eMabD"a7=-@jE_k%`h0h=?VUZ:j$KSf7qL8@:jo4U%-m*ls9dIf03:Js7kIbjPDh0OLVRJ[Q%PSLjo[k>H^PhsrM31ftLPo@Epf?aHQ$R#K@>i1@Tj;bQgB,cug#<eijP<i-b9"C0mke,I%bM7I'#I??fT<8Gc[*A*`%\P@6$e"1Oo)6Y4[Y*0Q\;JSe"Wk<te=`_'rIBJ[rTrlDAT"ED?#4p@:B!:_`<,lAR/UNPB9OhK/kflR%FELnT9Jm>%SV2FQ9u`iihHMTT_^F9npbMj3I3?%9X#CFgi\7mVg&o2soul/M(C8!V!"cNp4Wo.DK0]6Xe-!N'57$%gDR_'NX52=`%Bg??Zf_9oh?9ZJ33&92HW:0.fHd[<U71p/h*ql4%Zq;8=&)*;,bA;F-rl/8(7d[Yk%gWhPkAn-=K_#=/&9#&o:qVZQUiV)sEF&)(%Hs.=X*LsRJ"3?g;]=<+Y-mG'#HM\?Cip-8obIDG:*Q1lf@M^toXNPSNi9p'.fc>&MpMV4>Ep_$98G+eo3*$6reuOS(01/XHgVH</%WWQEtp+ELS8*)F[f.frKlY[^!Zt&9\.qDjRZ]hs>o2E@5euHJhJWl5H_tt%.lL=<q\H>.pM-[J8dQs9Lo%K9jDQ-o(HX00HHPa0j%RMT$ggpuq!<iUZ*$JphkrRun*m)LhN,\@&#75KCB1ZI'+I:oq3\Tj(j>p#(QG4G,]$G#``kj9O\7UQ^EPK@kW30lr^2`JWP]\C8N%gV^9>]6MQ*SV\!Tk+t-H`D[#VhhIE;YGA^Fbp$S:+o&o$U%:n$m^gB;<mM!L(9ir?;pSO^*hHNF&CrEqeEiK(EX](AmH7T+><P=d%,Eo6]"!/kX>OuYdj3WrF\FlsmVk@4Hm^6']2=qcLIN*'&S*`rBX)p9^]Bh^`T(a;1du#5TpK,r_]gp5hg?tuqVI&mXq"j]$h0lLX%Gn34g*nq_7OZ1l.EWlu"hUqJ!^>qF"!1jaCg"\/>`qAJF"Nu$US[+jo5rMLQoM+IfUMDq3***kPAW_G003HEVp6'3q^!/VSdG\u*%/("@[KWBm#,\Y%MrOTn=kFu1'm5$2q]RP!$`AuQGZctR'UK$@L4c!A`'R:D#@]@rUk-qlCeU+'?:jKA'=ai.@>6cD&2:;B#hUK`H%;J\#Gr$>i;-^*)BEO)lT/Y>_Os'EAtG@&Ibb:dKnCg3lDc@9mt2n.r\m($OEqlKKfl+;EuDg":NBTTK*,gH5K'>#e3nTL0XnZ=Nk%b2*,KpNU"lX*ddRi46B@V"q7^^>0JMK'1Zq93%AZo4;^W0inO%+1<.'3.G1P8a78^e`12FoItPM/MMcMe;ii0.De/M3PS\U&.j#Y%$Em(JKdq"8rE9p]eY=+!E@M:+_J'>I?]#i]!l*e46"[rHY?Wa;CQ!,?WqO<<VVMLHp5l*dp:%>3ENr\lFf%i3-_)U%V]29dg]>g5%H)s,&^=;8`f;_gIpn9!2V$#DG(D0:c:ge?UhHf%<!jaT,V>e52F/E[;GtYKgI-K,7;mUo!Ie`a.P$cGHc]uZ-Z@)4`f;c<Lc-OXa%GAF>8\*)mH2ntk9Q&i!#gQl/]hR;j@H,5ZXRm*<DN:%gg)L'X$*g_FXC-V(0a/sQX<Z8@fd`&3s^R<d$WEUl4"X4OBZ*=*"@:F-S%M`n=is$2XZs!UVn]Ib4$/FK(\-C1GjKoFWAaKnhf-%%G=^O0/[?>l6EWcT'9**cd[.5/F'IpCm940-r`LU1I'ogLsuBO?1MpnaL.%JASsqs28j-N]l#-$_%*!-ZbVTnEYI2natQ?:&aL,@Wn_*M=l;8YP/]'AbD-c4oK5,mbql&@d3"<C1?/1BL>Z41<?2?1];6U78,Vl%rP)>J0hqF2`SVnu\2''7pW=\G7(kkW^Io?I,]Z@GP==,-:POP?CJq!,XtY6ag#WlUE_o+$/b04B+s<SrLZ?4$(2?3`l]V3e#-qm9%#OV9,Ss\1^\D'OCYsZn;f#6S'g?/aIT*gdq^d-n'6<\83Q2(u3^@t5frV4pBeG'IpkQT67ZrqWp6)iJlqM):g3Q)CT@e3Y7Y5PI_%iE6%5o:,cU?Pb;6-E54j:OI9p'WXZOQ.X7<+p4n<E8E/RM>+6a]YGmOlI>]jO&7W9ZsihnT%`2f0!faLcKWBL3Th3*%dg@#/@\X8%=`bqPM-Q!!KIjZsEEDEG5KNh6`6*!cS1Kb4SEKQb&F_c[#?PKO"A(S$p2HeT(QmncoLcr8^K`/9eAaF1jNS2V#;#\!q7"pMkVusZ%U-%-$LNF"n*O*@9^KK'pb-$5AV)@.[DR$S3H#AmMqa(a^=r?]T$C.TZgVN9!VuquV.J^Q:lfXbCG7<XG+!`U`][F^_aTcO#5`f!c%:Uf]_[p+%'/j12e/9hDW8B3#e$##,>GR9a!M*M5.VJtN,EeX>^Zh]?&B#$t!\BDc;#1+HI4>@E4qqR"qE]M+M:Nm@4>-BOif%#Ji%)nWks+OE_%#V_`<hh_@jC)<(DJZuT\pu2?`^(<C]=NYr1`%UnD!l@R@D]f>ses6iYhP!NDOQ#OSKEoSaQuSh@LHR7(rJ6\_p]Q=5%4&?`A*UlLBJI_H4kQ>oM0(J5)Lh(i$+)j7Y#U:lf`(p&N&>I=c0)3SG6'i/qU,U4M:6nPX-ZOBr=GAHBX\/beBSJQ5#l)XBlmU?m%$[")4"$YX:m)&29O#Dc.@DNDE$[%SO2rqs6KuFIAa;#>"E?[&qEjR;LIPV."Gt5^R08$X"XB=`6IU<np<@JZI8Kr(eC0Tg13g6%;%'ouQ;mr7LhgK0RQX#[(irKlm$6O:YTJ%a[[Go*b;pDh6]J_7lF,f"5F.q[Jlptad(W@`BT2Upl*^+O&,)1EP5GHj$5?5dMq>>'+\%`NeBh#(l%!XE/?"/3Ji[DhZReroR5SD5U/RBCFi'b$5iZ,0RGg/&dW!rmn$&aYfh]k.i<LSlI6VnhrE8H:;K.Kgug.?<hl!D;`*o%Ss=Cl&F8#eAA:86Mq<+?>WD7]4kn;f%/&V=qb<Yn>K*kTHi[l9mF#&Oh-e^Sq'G%LW^XC*^!nh`r?7dYLTYuacFI<c=YD[SB>OUU%GN%+o5k"L.5)GC[HYlCS#Hq,\Xu0bL_-aV=%r'i^RI,^8mKZ*_M&Gqp2tr5H-\+$"@9aJ*!N5['@<HIiIDVUHrk<<"/c`1INaYPi%\D0.[>hn@\W=$u[3,qo<Jkak*!Oa5NgY8J:mM=EHI!E\,*F+%lE*PS")Na*f%kPlYgA6/>V8>k$h#12t.fPqk+5["LXmKq#*(QBi%eR48TkT(f]AT"RJU$%pTpW#2_^c`b+Y'BA@]mD`hh#.#fqH6"2RsN`^Ed%djqe+U"?G>^7kK(:1VRl!a=n@E4Y*ls7iNjgXVY$eo%p2F&QdJf+$^A/+glV)L#P%U9ed:+(W;u(bnfg5A)XA"tX79$bFE::c^pk._AfTMilM"-0D\R?OO:*fSe7`4b$_,t+6kcAa*OP\:>%;pUk8;JJjk$VY4sC0G)j@9Q#bf6K#7e%Kjo82'UmK\j=#oPFm`5=\IXY+)!*mT8%Z`K98J="8-9]=[,1K,0dV&IL`1d9j'7UHgJs%F38rZ&k<S.+E."eT`Sq8FOmq3^;/-fDCf_hJ$7u?HZ@h[^%$.+5AJ7S$<2'$m(U0-Jpq!>rd8tDD>_q#kN';N0@>:I2XS/Y=F!?e%kmnf2]/R9'Y+(d@o"-Qc_KDj5ma`Fs]+;$17f0Ce15aBOG#,P^q;o8fHVJY?k@\KedP]RP7rpZI\>C-MkG3KnIa7s^K9os0gHeST%`dc3(c<TT/?hDB/qXTQ%rfu++Hhkjg;Z7/#5NN;Z.]TM7Vg1JhA6m0@?0@,8:K726X4(EBJ,IC$dJs#$bib8R;WGSJr*rL,[A%Of%Gu[b#L.lHVWQ6X5R]TF)l(XVTdheus=Lt#(A[Npj[SA,@;7:=V-gO4Uf&ZaG%UGHfD,?X#U`sng'MVl-lAAKh1ejeZX/N#]5g_tq%e4u<eZD+%OqGL=8+;[b2X3aO^1o!oi6`1u*WMl2QQEO1BKk`+p.9.g#P%&Ipe-A]?[>U>g3YO2X.acb?U)GLW;l?VD=&h%iaYG3>%'hsP=CNe)Z<Jq5a)\C@&.Q5*Tc,eJB;-PuY2Q[fB2?=ssr>$,:1O(lH[cro_;?rM$8!>-JT3"aTetCAFAZ_nE1l<RqA]`<i(HGKh%E@e3H<f7*#PMma$gGE2qgAf7q5*Coufg\gs"Me\X:rt7l"t$5b7EIA_`@acoBj_.]12IMg=GA5t)2&?=)t6k3qf6#<buY<Wh6&0S%Bc&It!I9GGK=2+5ZnORkb2ZW"-!<*"mTnEF(@'`,2),-c#EqeSB0ShQifmTG;p,mBBQd-4)$kp/>BQCV"@"Lo$rn'VU`6%kXo^>V%`2##r7$A%CTgGt>`/4lR$<PY5+:XU_DMjH2lCU^[SZoer'4n'/Q&--s.59"CJVH`G[##Q+6Js8\kaR[DBG-mLda9:r2FSdZOX6Za%6o1!*9N!TYo4@2c_8K=k[5;\#0eSB-8gSF*KRL;R?(/-<!W\3MIHcDK<+[g+:e]Ra"8n/dFNq+)T+mK/N@J(/d8D:U_,cGVU'lQc%lKi!k\&:ub)<7e$,h#J1/mg[-[NAh)k%?30nh"kD:T\L:<ILB7f82q`9XDZ.$pq:5/lQ;u@PY4q3HUuP70OkH59M5XWJ'c*G"=Ls%rG8Q7f3K#N9j3O03Wsn+=.'LP+1oVAM?.S$P_un;?(_>M,lok\)G?jf(,u_9T4jSg"rgH7?G3/UHCh%U1SSS6ipYe\WagXA7W=\O%m'eQ9,ku%F;-.kERANAW9im1rBYYYB8m0-m<C?6iPRn(!BZ"pl,N\u"+e4a,g/T>SU';Sm_20FZ7/O)"&YYUeLkKA.g6O=IcC(`t%`04.%09soL%<P!ch&p`9Lpq(&D&o&WKM>,&=W.9s:5mo28K9,_2MC:N2M?6Q!C8+:@oXh>,;C?DVF%plcP%JMr!A!egEJbHJU&/j%2iAa?A`B5u,`0K:?/AYNAn9$k@4kAYeI="5MMA-=8h/3s#osZR(0(Uo:c2VrbuZ&V[q2-C#s0%>4GHB1A\1o2gT,jh$'d'"Gd^AS%Bet5cF>FW*)6?7?%oJ7n6q0fNN!brQ173nb+9kp,ri*g9><(`8d1+;)$jmUMBIO(c8lN]`P"`0L#H;)J`;0`mM<-1pAas49%)enM%B#@fDGQc8nTeDR&PX>::"#ndS#JcC'/9?qCg`@aWJBoOA`Waka;ahiJXE$+Tp_]:D,\963qBj(Qp&lk2mhudo#!1+%:`HiTnSf`p%%Jm*Pr[WkBMHVci"Wls7pgVrD`g@l^1o&$hJ;F^V7+eB!dQnLA(BTf96nm3u'hnieRs5_UF.65`""-oSg6`SjdU;3+\3u7,Y!GSc%?%W;;.5Wjt@[aTZ%4,U2.l'"^ll"1ebsO13&q+.J)UOp$P8,-pEBt&0,Zof#THunD5UWr#@dMp@@ZeeX=m1i)]rn(g`?t49/?4L(%U4(1Z`$@?2kYL!+QLQ=-DCbmU$?)W<1Oj!l=(j*8J-=+rQ6)\nK,M$_JC?%Q[7E#M,jO//A<i"pd5D9c;_4Y$7<M3.W+\]N_'jpk%h.1CgF+IKqR^=om+egI+CQ,/q&p=\(LIfYM=YZG_+*?6mGVR-;Y[])f#ujkn4Oh^u^1*MC4I0M'P";NS`%.3Q$*e<tK.M*sP=B="%b7IlJ^`_0ZW.5UYP%bhKF&\rt!f,%-L^QbLNKD5Ub1IW*R&"^6n/8T">KZ4P8gG-b8:48>K9U(S/21,A(`Si3W%Df'(SG@Qr/-#u%Clrb;&/d`.8K_M@@VOYMH_Sa(`_`)&X#AS($!LSCbM]r[!>?YGPc7_@,:!n5"=06_C#I&>Ga9scZ,f7_V32iDRTWHr'Ohk6\/loZ%`-Vb_^f6$OZ>'9q\=!7I$XAkeQ7)g@'d_Kl>o("+QcP%:8i.k=PS'Tf&J.nXPt38W\ATZJiY"U*3=FhCQlhCo.&Nl'&1=dl&0^Bo%\0G5!F-HsC2A@=fWhLNp#a^tC>8?WpJO03c8k9s+pP6JYJ;S#"!['#TO?,_n;$h5aM`!*8e=d"uV<k_A)ag?[M*6F8Lm&,;7X"P1%BTKYD9q1:K6@9EW1A`;)68FRc=Gplh@jT2#NsE5Z+<]BAlJ+4!WM@`b<\RCjS/_Y]&-+"MN6pudi^qp#iCOX?.AkRQ[oosm+`@-'%IPDn"bb%;t,3;JP03r!OkAOSNYH>:#]6reUn_22O\*f^!/l(&F5/58Yq:W=Vq3c$IqQ4Kd#NE?B/)"MK&_r4KOiAq<pEh<Scn>hF%S:ihS9gs\:%lcM!RDbN<ARqPIT4':+I7Y`JM%6HoOc([lMPRKp6"PcRitVn;)p<o"\cs+-'He$6<8E'oWX9D92M=[hAAq#i.1:i&%26bu"r7!_W:adL)(K1D8Qe7V!1)>Fo5_Ah(Xa!MYV@pIT0InsdL'EbaJPm.KO>nJ5R&i1\>-t(lUatB03il9i:m0KY-*d[sTrnHY%A@@)dWPEioV@u'$6MRLpH_%8c'3lE_FMSZYF#2IJ%`pP]'a`l2Cc-h)R&klV?qNK7m$=_l!NZ'H\9!i,k_^.kWZ$#_.l-j0_lcnR%PXr`t:."5"DitV)"Z.;NZ\1QY&7UjsQg?]V@*AY#R0$3\Q!p7md%-24:FlcnMp6.VA.<m[4'![:@6toeh%>eVZ\>25gPRIp4gk]f%L7^b4fF7m,_DZ8O'*D7WKV#>-]lQ9PC#L*UCE#ksR]/X)WiTnq(p$(EY]#8a(rg'4M*2U]PVRkFT1#`!ks/i7&OIHMZP)[45tnXS%$CA$TKo+02kD;f1SMr#,K/)n4'!dP5@.09cKSOuL!Dg36!eR[LKcWd3/"AdMS0Ej48s0>P&QYWb:n5^>M2_g=%lQG7!Llo[ZC40-%lo.6;L-l"6a=7:^j;YHk@a0e4E`]VZOR99[%$GtL\NYp`QRS;MAMVZ(ALdh*XL-)G,Y:jEg9?9S:#hGu!=(G$LC[!&bI5@WOdr'W%8ME/nQN;*'kZh`*2$2A48Q%%cK['Q[+K\N()6e-631**k2&g]aHZd=idK*pN\mdFe'ZQ1X6&ef[`]JG4?pqlTW.Oc*>U*66iOr[+%&m?Ak\[4<Bm,0\#Z8j'B<dXoZYg4e@9^EnVD5TCR:fmEgYg6,_qm#,+QtVk[U]Xn%c*<>%=_\O@'.>\@$8_fL8U(k*fXu1[Jb-cI%#Ci!^["K,JR$`]mYuAeqNW9-46HF6Ra/a)tJK^HJOb@UaK,1.sZ>1)1W!8iq_pP08&d)/n34u8ZVUJ:@!,#2[Kpk^q@+f!<16ZM2%il4EW^_(0r3\4!jM6kNMgPrH+qM`3S\Hl-=hjj$h3ic,TBqGE!]gl59&Vb7s\LaL:n5G(ndHM<JXi=+:p,0&`Y;g+!,T4H9f1=l\%&jq6gKegYtPd(H,,D'E=@'#*VZN+LEUIMne4jKFH`PrOhJ\X^\1Bm3O>m.(!7[>cU?o/UI7:s9$0,nLAYX%;9@!C%2BnX-RV@,V>%N:n1@bAMQ!VO:h(Um7Df`2=%$0'k>C+U*[Q6Nh1EJL*ED3!W877@6U7m:e>?$b/ICijL/VA/S0t%sfR5G*i:"%+m`\T=.m8W7`lI%)*bpDrs/uEaKMjS!s/L]!Z#S@7*6Vs>89nQ'TaI?7S(P,b/sm$`jIu>Lc.t_c\HV)5Ks(Cq!?tX,+'j33O7+&1PMm$cOjtn(Gj[q%f>GI1L;lN\_9jT00g!1?S][k3K@hM-,Gml+D$S*=16W#T->R4p,#JsB'GGRaI7b,,G`BpXTbj]TLk/Tg5d[qlHW:][(\gY_^h-/V%_/KOsBJu__=Cb'ZOH6WEi*[p%:Q10NO(kBX7,]?AJ+0Zm4S+m#S8+FQq8%[o6]X2J\W&X<M)]565E=ti[/#oD3nfEOreWZ]$CrI8%+#ZP.8bF*/ocJ'?*eF!TPP#rm73/m,*6\!sh*i@RKoZ93Ns[*A$mJF]qG/1/c6o=r1&=X+/om]1@_5]nC*O(1&50*TO%ad,5[!+<%(^$cMS'/6:3T/be"___1gXnkko8,X_<LgGK170m\@k+\:&Df=!+@.orb)g#7'(ch>>`^@:BL11=N"[M98.+qqp])T/2PO+ehDu-.%roDEB9)o.`D&&WsGa@<%`M>'@f%;k#-4(H_QniuCL*FDY#u?`d=#T+pg`c#ZUWt$''R%@*rcsra+iF0W6VF@=E9j!JnB`#"Gc1Tc%AG1%)ao]55!''Ui=Klc%RC]88/)g`jM<qL39pBA1Ebs^>jC:*XLj7*W:@KaM@K>m4k]@ZdEHW5:D2o6m%gn+tf]e>TOTqVt,m'DQ%>T5)R'EFN]P)d5m%#Fl!_eKJeS7\V/H`Z5*ck9Q!^e:N'I%5GM_n`?ZTl9(QE1jJaN7uMKB]a.&6$"E&.38Pc^uS>/ap<?l(qqIf%[Abn;5o[Yc^b<g42j8YE)S8F4gT^K]%_P8N>bts\^gh1i+EXY$K%#;WfN/U1Z=buI3SW`6m<A.k3eR<7`r0f:8EY'/Mn7f**V+@1%7QJEagud#PomSiI['Ms_dO1`f6AL)R7OZAG;+nbASHKT"#/q'@A:Q,q>_LZtS7.bRP4C(1hL]5qPS&HpJ@)!XP"%#l"$N>GQ<=Co%4\XcTS3i)b:<*MG13@M2#52e!HY8erKLI?+1^5nV`,nq6(;jN0Yf.dH*sN:85K702,%/I0"5t)_>u.(96js>'l:3]Z\<>!2AYf[:%B3.%Ma%Lu!?5?j?oYcMuBL[6%SeN>":\j@.PVAS(=87b,*18Rnd72LfEF1b36U&C($r2BAM-;6d,`0T99B^jj*,HLFbQ-K2D=[KK%r5S6CTYT'1cqoC)##8Rd(`7(G&'hCe%?ptk"iHH?)]34T'?H'I:3BUg'qEN'F_HM+$c##H9Vsjq"iD:e1lHeWZtH2BTQ:hnJ?8l8%/PY06`*QI1!j@FQ8QDi[Q^QhE2S^M&Fe$k;C;N-9g9-?"EDIK06.T_Ii?V=Z!@o278hB,4Z4Ol$+b;(%46&"1"4n=p'WsA1Pc?@o%$l]R.p`ifJ*^_3I#Tt%)Ei@cNcT4T$.ukq%'I'lq6kKqQ-#B'1'$)$:#+*^HkHG$U0d5*_L\$YI@9S%:UcA4(!]s(c*In=1.0E3(%K-N?f73s&qp;N8MCE0`uU"H,6eQf=4O"hC.%tP!1T'dYR1HBLEVBXLna72K3a13S)($HQ&!jPB8bZ'B9)4hG53T2k$%6t9d18pfn%cB*-]?4,qPRa(8C;sZS<80j\K?9sTb7_5VE>`s(8_pL7Z^3nLJJTj)8<kt<+"CWjo>T(2AZkZf$4$khlDNf2O"-t,!,/uBTiNi9s%oV)`P5q&k7!n'DgRY[6e@mCF"GW#p[p4?:)GXQ"1M*hQb'c$FK!D/qa=WDEhYpfq?_*"4l":uHo//R:K+,s&#_)qj"D2rO4pj?:Z%'K5l,6AOX\&.t[i6aP&I1E#Ni4(X4%1E56UP8#WG;Idh'efBI3"%M3@(S2(LgU8Z-Y4rtXHE_/DL]CaNpqU:<&?$")GYE8=hX(&<%Tp&]\'E+_pm'0NC$O#!_,K1J)XdN$2a?d+cf2dJ$.]//J?jZ2DJX7CKB_](p&.ql\#<USeU*<,7ZHbp8d!#q3@3uBjfV'5#",(O0%@RnD2V5ZEiJuupoJsXfg+q0J0oOKG5N<?FQ`WjOF&PkYmX"=1_*-8pfX;d0F,n@)^eL5F5(G&ZjCiDAd@!Ua>_![V_[W"(_BU=P(%EP_gm'NMXU#`*;'F0H%R7RC`&^'F@D"(/P@JPrCnaMX#oP`_E1ZSff$)of6sncVM\ZCpW"bWXoaZQ,M?<k3$T)kc;s@fTaGeg*t@%E)2Y%4<;(#e_)[m*/#_1Lh4(,'QGP<Sd;WCfK*W9K`t*<UWBIf=qk(n%"Y7;p9%Tg>A-\IE+6qF5_0LWE<2(0bM1AidC1ZJn-FCb%I'/;]$bdI;;*j=ZRi8=HE8g"mcP7Zk2B357'`aHUdpXG1E2ousU5WXqcQ'Y*oZ^:+BSZ)3rAF'^82fq7TsN;uN^+/)!f)@9cN5Y3%G'/pHKSpLOiZi&[i<Z+oX)6$?0S(1ZL:)r<+%6te/<Zj8nAV%BGRS\S9]>IWp0PhY9V'G'h%Y;'3_Khm(22H]S!p12:ds2PW5=LY%`9&4n#n&(A8QRb]R0[,Ug3g'A7n)bXYT5;0N[7U@,q;l-S::P@+qP(+BSkQ)Yg;7E;2HkC(-Hs%hDu-I#e>Y5#Q+e_8Tlc.-@5k=%%!<$le:^T@k=Li062$CJHksol'L52+bmEo5Hr?\"nT=,kK*K5+/i^`rlsVs&KTFu!r52c1/SEZI48DVrgoe8!3Zr(A"KEf(GL6]B%<+\2-#?8]VYFCRD*aG=3GFXBq#;sk!(?&(<;^F@NcaH4n+Lr$hOpEoV:)hn%S3`m;ig`_7n?qJ+6k&!fY!5[c09WOmhG?TdC=!/^%7T_=<&k.nVD&F>j"go%.8X;^ZiYi4aAdk+``4aG$a05j-a#2QFeI?b:,iK!6/IAiC_ghkd*=YmOmt2tg2Mi[=ckh+/)(fZYch^Y8%QU'Pd0L.C&fp[I6MCXTm%ri:RALbPk0QZrQ6_D@+JIm8R6.<XQ39UJVTJ?KUEGKBBE=&6aTgZ?!J1Y=HE$,NGK6[T7jfi'1]Z@Un%rogr-(d(4YKk'eM,Po8sJ(-\NS&W`,W^U`b>O"O(7N%gXM_\QPfXb:D'Rl7BZ3K%eAZ?EG-Y%LRf&/:Lb*+[p!-65i`-FQ!.Yhd^%+HkiW$l=J+F"M>9DC8Rl`tl+?b3PCe"<k-MZJ_RuiIZcV6CNiA1B=c@=utT]Tse@p?rmJW=<#Up;'m/k+k#.W;^g5\Mg\!H<n%9T%:_Nl,IlIFk:J'5YKu4WKT8]td)AlR)Oa/Ygl`1k`-6k7H<,iP0cr"d8K+>_7Ygke,8RPH_(IY2OHQTJ!9YZ&oCP7n9eLC]+BfK)#%*-K4U7CIke.g#ZC;aajK>Z56<1<#9(8p!8kU(ZV!3o'@d0gKVZ(GlCr+8Q(54b[B]1_F#ino9Oq$#6oB`[Rbjc+2qT)pLZdVEgjU%hH=G("A=Cr\Z29>LgV`(Hmi;tGhKuk8g9kXet!(Nbooepac9G!7pJ&9,`/"R\KNbU'/!S4EH.R*R>O_#S7><SXqI=9=br;,,+&gA%"pZjOQ.S3m"7/TQ$K_Fm[0DDdD$k4$/b=5L*1/*n#nD!-;*ZH9)ZqM9/R=`)I"G"NW(aVONj48?V";\7X;B'%=9=m1*'hN0Q,DHP%fAa.WfWm0^F98:!A."H2QD;``QoW/7[`-#_+;&FCOL+Nda5]E0*)^d,(AenEU@J%DS?sJ*:D3.c,nAr;=Fp1'E72k8%F"j+(W$;b%ZNOA^-UnZ&gP@D6o0R$GT&T+ETfQL\";?>4#u45X7ch]L$SGSH0P_s=,(fb)nSC6=':pM=WK-"o*qBdKoOj5Ml:*$[Jb:!R#CO8I%\2DMb7H]C3nY/$[?K$,U7R4qt0G.du:G*3Fi54nq7%)e']#:!J_8$7$(9Z]=L:r;F5-`l#$`]$A_t&K-8$EFaLL:KTS=_P]#>/Gj%LVZN!/A*16#;@LDnUD\VP[u-r#rq"+isBPLNp3$+`!O!B`ceSA!AoidY`d5<!!EbA/F:P7ARVtj<`Bel*'hJ0MssC'/*n1j0H/mZ%LI`m7VSfYu)Jj*\F;]st!XO;-fLq:h79DeDs"].nHid\s1H60.@q-Gtat\#kEC;,NBrnIAWoJ;Y\SZB:T130JU)S>0NcX_%RL`)2%L>j;X`TP@I_HBiQ_O`To(8(>r7->g0b8/J?1b5UsM3`*+E'*#[1^3Lh#`K^A4[P,q4'A(eK7[69JG*]_e(."LVo])NI'=/0%Y]?F%j2,-5nLM4<D1tafISABTVCb,nf[C:B0iVBD++o:-)t5e%l#>mkqs=pG@3l-9jPt=>"2k9qR/JrH%t^u2&pb5pQ""*22hk6DJlh!-%),"d"`s?,BfW8(4%SF#IaRQMu]Oi.TUOe!$-P+T_@Lk$8NBmT07Ne8_`78mUXNHpP#P-jSbl[U]cG9M++,#)t1I+6;3.Hu_dl<=Z%jp5UI&=#\[L%M4%6m\5mB;+rFW^N\ioHh3C-cSOWp-sc9p4WcB"VS^1?o,DpKJq+!\[JS!;9HJlEP&[>lU;\HM0%UX.:S^U07p*q%#]\%qOIp5p$C7X/&a(Ps`,M.aF=6^+g#T+?A_JgY@ERepW?^9O@TKLepa.@<fG)PiGK;4P.KSo=<?*$L(<i'Ngish$dN>E8)AUQQ%(H[$0"@D^JVCoO]>b];74,eF,H5O\XLm'5864d2!]hjPqRi#Vd5d?WrXjfXML-roK>X2@udiKeB$lCB9C_(JTNas>/,Ieb6)Es86%_>cKoc>pp;L'[@#G7;qh1I<RNH&jCA>t$^=^pHhp$0ep6`t\N+?j..h,I'YC&2XSWJ7p.:V_eRTpu"Rp6kL^GFTjKqUj?dM6s!A9%1stH,-g6En]0hG#kmq/8A:6Js.^VZLK[i[kRn]]G_RID1(rdkH+<GMROWq(\iUFem3L:U'G6KoU7ts#"+.R6KIsYPS@SMnhpC#8r%G]2`m7T)f(kq_K_&84TeP(n#mL6HmWTH?7Sisu(_WO:;XPtFpb0f6l]1H4dhVs8Ah8g!q?XgO4(;?[t6,V[#'FocH=BM-Ir+R]@C%%?kqU[3;HTDtZ((aaL!T2EW&NgXY5lgjD=G<6&5U?6ph-1_8eG_>Aar+@6oa-;9<W9,6$R]\m,c=(+,70jPM,CJl+s*PnDkk(I?*%JrO?8Q_,7(!g*Mgnq+9sh+^R]'imL(+@hRqW&=mq&r=r^86eG`gNOi7SYPS>8Vc%c)tJEu(EtBG5\PJ;*s4;\1#)3\;:Pc_*)>=e%,c(kma$q?,n]+p$`XEQN8G:=`$%1^-"0-0-^=4*8$#!GX*g&G<31A(O+BaNQq/FG1Gn(d'6]A6>ZjJLth_ZPT@XqJ["'oF^[>sa!%$k:33&4/Ooaq$*$If[t#1]RXZFoqRs=qIe5Lr4htU=^!s%c/`h)Jap^.bGR@+iQtT-t'jqTc1bb!3SA.Zb!1+`u1'*LJU:(*pSNZ%[Jrda;$gA*rIDic`I+VGX#O`_4.*=NcW+k*b.p1_F..9tj=^&;F&mP.*09@Gf.mRoAu_Ja765e>GgC[*f-5Q*kLcE-7/W.JIm2F$%rHm+F<?#$S&>gA`WY2S8=3NO]7HJ#V*uR^"A!uGdXMp,5S*.)[1DG=Xd9%W>J'<VBWR`n-UgD6UeQCXR4r-#[\P>$udpC4TgK9eh%Y,Z\ENUQ\1$\;6UE2k;"<`R2>2YgTX0W-tpo<G<M:)25X?$3<ac5#&E*I"OWc5#<;DZ![=QcC$:Z;SB9B?sTHWAabK=B3_g.f3J/%Ik;$$@o<:%=B5>JFMJ/*GV*n>,9#P:Qr+5V-qr9J)?2CB,[MuH`<`qt5%[@*N7qBB4(\K6N"K288S5WWN(I.P<u1"c)$)PQA7"/d%C$q@Xk7X1=^iuA#N6d"VHEOJ=';B/s4'J>AAdHiejtpM?-H)/JhMA5$Yu_<decNlL@D.t_YRrcO,KhG3g$9TAg)\@k@@7[F'.@`b%cFoP=\cIKYI*=jh$-G3crE`,ri.rD$/eNg_%e7(t.up":k6guDJ0U\I)*p96/8$6jCPCB1:n==F%+rlD+$-)d?f,6cmtfKV2oo"7%Tn?s'3\df=/1?m)c>CdBAj/8"C8,/DG:"e?H.VBs:]W16^<J`VgkH+Y!+&sa=VQdXf8Q8kmiMn&gi*5O0f-Gnr9o1lrNYE`O6l29%a,6WTo=,TImthW?Zc8?eneD7T@&Zq?r'Oo@bW#Im=KrKOk2K&8S9]]BQ#K;SS8!fnF`BihS6:pe:N@d\rlh<8l%rc.<>&fcF3FrD%<L.'YM7D_!<_89"oC740nfr2cA^7[\ckqb:!@q`4M*o$ig9:;H/(X]jg]-qK#QW'e!J?KLCT03GC(f_jBB=_Bh-d(10FB+";@:n"%rE+Ys@/BnLXQ0@.aafY\^aq](9,&pJr%"fI,R:Od%9Q./9_&:\7`!hWaC#j;+&!!uoA./&Mlc[tF2#f#cWU$CVZ*15IkA#+@r:0"%=;2>/)T.q%IkB.8@hSdO9%?]DI:XYc[/XAL(^gU6oVKR7r&T*fB#L=B]_RdtIt!T8?Y/PYV#L6@o=q:9/8>H#S`*(.lG#K^jc^i8%4+Vk]k*uuL'8U<g)SK0rU^=I$>[j0l"P!%J_F^l6<$U=9!bI@iXX18g`dc5MYn`F<`g]\iZk[Uu`ja20\-XVY>/9ALbh[>obT"oU%cc6CO2kp@CXPdlN-ld5^cc:u?I"/4oN"aWZ_F)$QR)oqAq-9XI7uZSOM<#ZHT$J8gqRm_>0,jH]R&+@0nhZI\am0o9P.SZSF!62l%bGEkbHP]\MKi_=?/<bb1/G$.]K<[6i,\&Z4JUdgZ(D8UdYVLHBciaL-FO0?uc_+Rm``Wf[Hm]\kR&/V92`c=k=GXfBIHcR7AL$md%(;)??DNGF)"WKC9;^FoF0,1I%;/Utl#>QRG[?17*i">0r4B87P!Q?K#"ID80q37k[6"sc"%;9^.4pYNre-8oO&))6_2jK:`nfL+O%5jBW4LC^3=)t)mVNOp!"*(^p=HjUN#E0m4mlWTSs$GQ9Z34MN;05;7ReQHO(d"if*-I`/SRZU,s=D7eLRQsY!B[d)K21qu2:okP=%2.='ci7D`N%_DhaShnH(!i"qJ4((e@Zob:)#/2\JEANDg"ghLMnOCm^%."qlJ$1.hE.eif*t,mC$qabk(Dlkd!<Te59$VCu)037f%B$Tnj"iPHc"C8f3B1V7m4FJg.W=ssX\H9?;E7j3N))ODWCR=PF$)BWbGuntB)&0^`%^4g0'*``:.BgP2'BFF*78M:pf+MIS_Q]X_%YkA(\IQeO?mhltVJregYjV.K<#uR=Flnd;m)bBl,S0*jc1\UfT/c=Z:*#:dRl<V3AN<&8j8>EHP'"KC4`1dMEZnQb$+]+;OUCIYH%LK$<CiKN"uEk5%-;roS#<39P1'(SYnSR?'h%*$kZh?0um8k*7D%$35q"W;_j>Yl/rMFbMsPYF27Zs[*g70<LnPYE+]iN'2c"t?h\%kQ3YD<7,,_gjkBR3!WQG0Nf?D7ZBt5*F#/=iWBG&0p"',:5kDg/HAHaPJ8<HU>'jPqL;r%A,GY*;.]70%JuT0J*f4s%K?j=R8;Ku%JoGOZ391,1A\JSPE27>IdlMYXIp&RJ:q,N_X"5$HfoQ`+2'e+_B*m[rE$#pI6,;`B*'C69(&nR&-mBZ=$^8]:n6f2^D$,Y>B$2]'%4U/2k8@VLR#8/u>ZQ./g3$sn=7)R'`.7EDA?PK=,X2@0g/=%:'IBp[djJKmo3kuGpbukYo<Kt55HJQ);)$V5:Rb0HLV+'Z=8%N$+%n@gBRn7f.Qi-^%)7PCY.QhJ=0@eGfXXB:ClK]'Qi@O,b[*34B,cP\jqELobjL1fB5Feh.t@b$S"h6:HkV&C<mQ9A6sdYRZ,c(b(`%#^![N"ehBLgnZ5VrOl7oL<X6$@AdU@Q%?6mIDd6+df\,]et#SU/3?$NIZ!6oc>^M@Z*gA-?Qc?_qT6KBd2ps6\4P$03)OgOH^95o%+\nJu>fMS0@+f>BVK=fniNhYlf35eE&GdaQ2QF5G.hOO,W-e]+j``=\#(KIQX)O"L5h&3*(?8X83iH3&K$sq;[E=k3c!#(J###en%':FaZlKk*@OWeqLe3QKnb+f7"d:Rn8@+MMEl[*6kQFd_FF^>7=Z@pHX?;(N;1RJW#)`hm5_Mjc<`Wt@CI*@aA8DYl3*LNH!('/e*%]qEiMJ2QrQS[KXY,F"f6O^9@!q]HO"G$rA4CHci(=/Ol?(W*79s5Ygo%i!1G*X$=te-qEXJqJst,SM#6"bd#T]5@lr]FSH1YUG/k%<Af"#rtqYc3k"H;D(P"i6>\Y`4E@^Y02lQ,Mr\PJ_pe>4feD^]Gc=K%$j?6=2C,@:;S<(R'_7,Up'NIZ-Uj8Hj5qW'S\TU)i%?d@%g>Eu;SZqCt/eX/^7@F#YMYAN6dh)]o+@9t*Y=B\LBU1I=D'V$XqhOnO`@bH8D&e['cJ`Alb%'["Za#XQ\B^%$NudC#c<U`K3j+YB%'1Xa]e.5KX:+T<2n$!KK>;ufEEhAX6q5B<`d;5GgD$+JtR#S)KRr+M9mqDm_`FE678J,FJ&?,dC8=MI7'!m9XLBA86@:=Hi>=h)F%n?cTPVdu:bPDp$.NZ\5dD&_&WIZ(tdTN>A^HNq^Q/9'#4T]aH\?fmeUm?LI?2dH;t4DioU7Df5QXHfp"2mss1[it\bq^4[>#3OF\%Va[9pO^nDd0aSbE]f@o;!P#^1kH`_Wl9;O?j%ND0Zm"F!+@D'#H>oSiKgtC%JLsN'"1ppfRnB%S/8Rno\/f-j]J43?FADCu>9<[M%?[XPD^CrWDGDBobEY'i=p)>b#oG^Fop'(r\\Cc2Z)iuJ#K/GoS%MgsT^i;f%S48.(J1+Bi7\>5Ag^T!5YRk&ifpSkG`NZ%2O(G?q%(p2[/B(]a<`Y&LbV'r91k+D#L+KC?a1'U9;1b=]p9??)]q7"PA+X=)K\dAUJ"NL@\Q+\N=l1A<=PVVmX6Ue9o?sd^iNlN&c4Fi(u%Mo(97:n`]frh"s5`IARB(J<chFqcY[HV:rY-*ql^POSe(?S-4GP,^$K]b1XGWd;E&(_q4"_HddIcBY#Mh`)hg!+jnrH#Z!0n^LiU%,dk]7-nN.BoB.u,.EjZ8M\+@6.t%29>*-?*gk&@+6/i#r1_h/ug%NKL7amYW)fRL/N>CNOS)p8a'`bW8X*fESQ`b?]hQHu@mVW$`%n$K`P)r]cS79J>%Gc#V,[UmCdU%3qUU+Q^fAOC7<?jb>djFYMj@ZVU7CpUcV"EB\u6aM2a[VCEASHVU&A,UKb`5=Wg03aV1"\UC-%+BYJ&JHRt9'7k2>GYfEEB#7V7eRZEg-o4Eq)+ihX6j`Nia`-^UCdN#j#r&;KPG.Wph%n22UA+m3->0nIgVI`,p].HBZoS4IeTlik%P[^>?\RYhK=Zpf6-LKW*T<p=FlOR`$^#TmAZ!@Sl,]C0W7iP)\fAV_+,%O*f_](IRT[<PQ)oC@K;YW;c!NhAdljiJrkn!73efEV6%XW:4)f<6F#4[X_G[0OC*_tGk;OkF'O5J5atoS;gJlOIZCL]b,3ZN24YLL^I(pQPDJrS5Z9&d<+(<+/=6GD<-m^.DL9bB.'O?S@or%LrgWb(+.X8&(UM'<kkY$RTk3Z&dF^aOq.ej%P"fPJe#Jm0Zl"XSn!)AUl-u$7CU7uF!,slK*a<4\L9`V8_O>?bN6q:@\GUCCUK(n%,"0l+q*R>]<d0%Qji/DRNC=]6>,r0+U_Ed]=hr3WjDilb&gI#<g"S4VE-QYdOVp^[*/,]hb6?9'VJgtnRr-OHI=5]&r=LsjmDitV%n>in'BDCh0\OC!.VK)hB?33eZAE[/SN'pC?JK,:?fkIr/ea&@`^h*^?##d`*J?HHTE=CJfCaR+SJ`@(Q0p\bi`VZ_@F';md-G[sW%?"L"iaQu-j;?hi.,t2]A,dR3F:T0hH==C*"d3E]GH'0FI7F/mdRddSe<b)@OZMVH@LEiLna??(05\JkYm67lD_EcJb<E6.l'rfTn%LOP/T%9t#n6r=c*'.NXT_[0&E*320n3uVp(77h?COi.uf[V]YfDh:eIbDSMc.Kml*4ghUbd1HkXO/aJ-D:cH$).]*%[U"QElU_()%J5l(7Y_5c;H@$lT1qRgiVSs$3DUH_U%pq,D.up%hH'qL>E2Ei;ar/XERt3i6T^A/^r*mQ2?]2AB\lfscPQoHU$ZQ.HaE0ukb]NN*%]WN`a3[&41\,q']&naCKLb*q9k=+81EtPATE5BW1a)c/FLX+=S%ehh"\7_0CT=p5Ii>^N*YUW;<*MoGHX[\,oAb07+<`0l=TY(WR%B=k\Of9_E\!SC0k"GEqMBV3!*4OQ5F_JiaYkd#&Wpj@*DZ08g+AN!@H9c-hh<CmO>fE8,r2loIa,'m\(Hn#9\nU7UC0T0d'DiV$?%L5Bc34UmbfZK(SDA/&/J]oH41kS23!)t9uh6+/lg!-o>I6\V")(79r$[k0@:_LN)K*JmmV[C9[,Z*22ZCD@&(+RFJ9k!?hDKoQO'%ii^3[n;PERaJL.@#'X]G""Xm/4<rB:@#6b>B1Za:^:&5<]!J=rNPDF<EEE@"""MB[s'=.oPkib/I$7/AhDI5)1B2<\/doNkIFlYS%c7X'tScXWH8a]$3>h+n=j:W??oN#1>M7ojOjdS5*J\.^YhN_>\+245fQg(%2>;90ubneZPU0APO$Q>*u4!+map\Q!_.QY"d%i4-9%g;\>?\t/;q?+t#c1Z.j&p!Yk--g3\Ao-$oUoR)eMk<*+\o1[IFE]L#GU03qL&_X*ec^>24?R?W^[%X1;-<-HAP>NDDRZXtqh(UXQ%XC?>uWS60Qre#Nc;R/*B]EuM/544a@[q,U>\uVjip=KX!Wlo\u8-7hD>\In^hn'R+\Z]Ng[fcjc_L<WU_NskhJh<\[fP$9K=U;7^%@=e1/p3O3Pe=uia#%^;6k_#g2N4!++cC&VS/>WthHVX,U&\&lDn7E]qh0+c<n]JEB$EqF8q-;X&n#X;=m4mD1+`d9qoPPGM69@hS%UVkC*--<S/&B\>.?4\<ace;N(]sITL@p9I1rnB*"b:T6amccG6eERX*BC"F-5.SQeJnV%Il_B3J'eofTI`EY36:!U6*cb1+j.45B%PLK!c0)bpC+?5A!K8Y*&Z3ai-ZQ.,d+j8Ptlo9)i(bXNZB%jYK],sXQ%@6G.6$OgD^rJeW0D2Zo$DOjJ3V;d@6,&cEU:1ha3s/%B%@26tJAl3]4T4-9i>&2sji/@MX,T=:qaL!iucMh"lZpZ6ZXu-_('+rI?I)3Ms@b3I.?AmLXGR+oiAP]4ZI=su?7O.Y9B?V)QIW3GM%''P;Ik?X3[DM3MlLnVWqe:M+`,uuU=QJcEWH+H5VWY%\)3!l;-8s\77U<io27T:i;:;EhJ(Ml@OG$B?,ZRqb5jhc1Xn^f!jRlo0?%.Fi3tkO\67[XU*,*(uXaa*h*pUMcF5Cn2YIOsDLmVX@2=,e'#Y-R"CWo:4,-7,/Qh8#;i_a4gued\_D=mF"rRcCqd"BAqdUS_mG.%+S_+@(/F3JG#B*GbF_YH)=U",R$7A^K&K,NaP&m%^+-Zfk)?;/[J[U/7$oqkM;go,AVlnG^]T*U1(25[#Nl?;S</ua+WC!sk7_it%G2MH_\XCTcCAK'g\LG@dc"$,mmB#=H!uIV6_Y`r1h(j1OJDJ%2\D2?rGIFhEnL7F^\kZ*`8P/o.`U:oZGurkO'm7D5=7bUtoK0$1%_l>(KosX-OXJ$'F\`uak**,4rf"(5#Wi+sel355BYBmDslcs"p<]r&5Wi$I8C+A&>VeoQ/SZOnqq['9:NnsL:SSJIU5'$<kf5@MO%6<C&elYIrbWH7G^4-SO$I[@0Xm\nW:QDX(F&3P\I^U8Mcf5gr1gol#he]1Z#gO7UjXD@R2^9a?1rj6gK?3'\:ea#6O[E.%IotK]_%N9s\0aH+BA:Y2mbZbU#&_ffD\TIerd4nt-!Z6u@>[d7F"(Wa&O6$4064mA$:AIf.L0B]XU=dg!.$'erPT=-p-68$K!qe0L2X_uga%[Vjc:"P[;,*c.q4Z7"3!^?hcZr4+S^qun1Y_Q]tWoh2`$cV'bs'Up:9MBK^oon-<S#o;D1DDJ#ObEP`tOqs@n!#)eg(ZT\oL/aAR%8h,!n\e]DWi]]nP)Y!FQcr$%$Gs0H;Oi5V76eJNOI)@d0kQ8;ZId;M[EHc8k[];XtF8"q"(6aiq9f321GMEF[IY'p@dQGF1ELJj[%2L'J5`S.EQ^=24EHAiC\Yd,.f`%a,3#Z:tuhN!h.]&h:5_ScNjRIq%1Y=Pd@Lh-b$mbTJS[%$g2,!J.1&3.2A!7'nuP"S8/^mQ]3%&n@gjF>919,j>TP(*u5-*T8UN`anj?j:mfq\QWoQoM-)n_'V;r$1'@#02Cq#Fr'Ru*kFl/V\15tCaj"Q.oHa?5hs:>a<lbdl,Sgd%Hc+ED@KdRZ`rq(EGs,fK68ET<<1uW;64<HhP`KWG:uZ'&D4C*Nh,W;S5Go`kXH(HYe4sEtfU/6n@fUm=HR/0f,C/7;'(2#BN9cB\%7io!uN>qZ$J75+0c9c@P$q%0<[Q+9YDQ<b8(A&#V[Mf-r(3*FGM17ju1,kR+alB"a%<<+ZD@C.G``(&sR(_QW_%P9eedD\uO-.S&%X+e3?#-Nm>(k[9bLU'u,Ii["08e/SKNV`)&cN+A&+Y_2F3"uXe-m7Z+`Z\LfpD#b55o]r#*Qq\6NSPGNpmU7lSJFp.'jAn`i9"i6%h(&fJW3gD5=CUt<QeF=/7'L&3/N-[$QUFp?/4c`Fo+P\%3:(\_NZ2JA[26jQbs)^QI\Nt]Cq^+I-\s79hML0)*[@S<c(WHWi0@KB%T39-KNE=`[m`C&cp/A?+_EQ)Y/<nDFL'A-u8:"\,cGL-M.L(Hj^_.'sEa4.1eL;HE.BNaiJQl4[Cfs150WgSY6D0?U%71rhgd=R]%2uEqJ74u(WRi[1d_*g-/1qeSG\*LIR<1Rp51f(B6"11+RBI`;sb6QrHf%!Nu8$@(_,nh9YGsLR[1,]+Cfq<F$"GtE+3UXKDE(+:L%800q^SSg4j0*[f>QGgEe[[5f"\?P$bNYba!n_n/tI7]keh,RUP,#%a)WA3Omc>kRI\+]?n#KVV2)\Omf\>budJm%=OH`1Tb%8k'5%U^Kak_CJ_Dn)@%#]bV[0kL0)$,CucTn%K*EA<<??=K((uqBcNCDVNu+JW6V,dl2i3NLs#(,iO8K2r=`b6>;p-Er:Y?=/Tu"Yi<OU%2bB*Ko"ArC]k/=dVq7'`7ec>?UrL?cY/6R'hDYJKa2bf1P">?5I1q-G;so'tc>rb.S]uNqr6cW=h^%;Qp:YhedckiARt+pXGTlZQ%'%QL>^.CY^5PDet<3&saI?OfjUV$CMM'Rl52bD!"bVn>]"&Afsb;W#S"GN:_P)pQ\]l0&^Z$l@@?kZeDq'NJEhDaDAjmJVrmjW2*%HkTVh+Z80<HHaPk8^mh1I1qQ*.\1L0@G9/c2o/nadeb@j(Jh__!g4?C':j')=K:h<'4TCZ@tOMG_Z&Ya>bAVg-CBD$GE)uAagU"G%P6;s\GE*!,<iNcB6KE@(4!pJ\rpH.Y[`^D!Xn7V[/BZs1`rpmS&sAeq_P]qq@tNkPTm'1<8`B*)i!gE.2oc%:iV8jOJq4Q9iGqUW%LQg?H*0\;d;t$+3o.mW8*#$O'ag5;T'k<%W`rql1/pG>]Z/p8oQm?WE9(/-hQKFQ>-?DkbW>=AQ-J[b+h(dk5`SN?.&p'URJf-6<%eE*':op3lX\JBF29X"X*m-#E&&eo-MQs9aF*0Y0m\K$gO9O.%R?k'>C=E@1*Q/k,8N_*]&TQa(;&LOA8-Ep$b[_pJoo+ZMkjC[?O%F5;"#-7!=%hD%UgS^9GFI"6Ne9Y*_Qa!?eQhE*'@hWioOJW0YhdkP:S]@]1l,`/CfA&86V]jlYRaIrLoEo9<AjEim6gsb83]..-p%>WO4!/$@YI'5X?k?B,?S(GW*0'X:aIm;u%+/@O1m-9V3Sn!KWJ7H^&^m`+G<VMa`T<D*7m;Y"akP5jDh,tOG%#`jGg'p_\[n.q>*%P&FdN7KJ$d=@2Ps>?Css_0cV`W/m<dlJn%;_`ke+(RMqqI4/0%6@&SS0%n$"Zlk#c)+?63n$o*R=5?beGYu&[gnGE2fA3/6l'V(?%c_pu(G@>Cp&bH$a'tZm\S`Pf&3h&Pa)Zc_P""5_:T*n"g!ZA_BA%f_lkY[%3pF@egC=Nl]5QQd`NFu>p[4?G/9/%i@#YWNs1s(f`%YQU_hU4EjfQ>De\^P+!/";7SM@0pI7dk*,%V$pc=5,Z/L-+)IE'&JDH(gU7L&Njc@!/;eEJp[r!Y/e2l'"lCBU!"1:i-elQQ9aTA%$t78SK7@0lCe$Oe:tm>%KJ"g,0Nku@-2;`*`9EG^R!$[lRm=7#p!$;)"*bfWgRVde.&BdFY_u46.R1s+35H$XDSZXTb=^$-Cr2%n%\'W/BQgKZ)BIfr>9UiWWjsr:A:?d<[1uU6d]q1o(%%2F5/Mt:r]-0#a:@NT<:"Z06(7J(,1:Y".9fTqi5IAc?X2Eg]'7<QuQ_0rX%Ak'=b-CBY[(7JXWOp?)_-<i71lkZ$d<qR5sFI!]2>UBhQYl/IKd"FJdklVS_cn-s1,3o=EX9(Th-="<6?udjh(7;=7nJ6KoQsdNS%\%q&C[MG68)p]7d?lda$@"MBTqnN?l.!#X*!Ya5G/MMb;#T<OTR'=uVB';5_9OLL:>]E>RODOZ:di"Ie-<8q=QGCB:"(t`Q5<jfI%h1Jp6Jp.U3YQU8/#YSPe*40[=-*WV<=FtOfnoYb8E-uSD$,1u*`?k:Sq[f*5;nL!pQipXIY-8&@A%IFAli>If-(&Vk_hKZmU!>Da%PZM+A,J$8n7Pc[Ul$nUa:>_e(94i\6F(tOM!OX/d%-;.P;50EEo(G/7\[9^Y,-1^uUgY\t[U%1`"Q!G);Pjd7,F7J';t>A&q9HKg%ZS^S$T3o%M[>2hd&0<?+G:t0#H:M5E@mg[[haOT*&e/o_Va\b>=?X4.'99`4GG&;F[VCIFNQu)q*WF>rr&+Hd;6WFk48"rI]aN82%;KtGQId;82T<djD*?SLPO=71^_em*rWL4P@)QsRGOG9)3I(GnW&kEt"S`Ri!,8>:b^t>4FFLTR,['j97[LYRS3%_9\BiF2BfJ^M@%(M^;GKQj%EoitVNgq>V8DVd0r%::.3!N>CkZse=S;-a@(i>sF1]][iiiC9?2Xjm:VlsWc$"a"gip&o*AU".]1J:)3\B?5D^rc9'a%o3WREB=N@4k_KbFOj8,u%((Ck<dADkmZ#W:9:[M_8()l/0\95n%7NVj7f3,l+im3`mt7d>Idc4hVkkKMe(3nPQ`[Bqp?U=&CsUJ3%fCklhWbsJ2XaGKUILBlmdr-,%XkRaAY4bR_>B_a#om=5f6&@IjILAcFEdp7=3PE"*_B]Q!/I7&ZE^e9i\Lc>JFP9Pn.Jn!]gh\sr%P1jFpN^m]T"T>n`NRYmBkG.'YC&8o;D#`/[derW"C8G@Z;q<@q2Lc]/Lp.#o`rSrKb"XWc'Pr:,2(WLN#5>!X1<FF5OZlTX>*tF'%$oU=A;SoNgPR<jk'rraK+!VPkNF.s3@Q=\QGLDBMdMbGBDsHm;(=]L'#qVf<_$=G)?FG)Q8gpnWSt>J.,inJt2l(+E,386:oPl<m%*PF@O!c=0kVQs6gHt@$V*gRK7":-(4J:uL47c_9kEepeAAZb3qp+=eo;s?4I1CoE9/Y!Oh^)itM^4seGS!RN\:6?f'R0M4`+]K>U%(.DH_bdNeo#0Sa:+2#`OaLcPhhp"XBa<Zs\!DSrI@hA!%'hhi\,g+AXZg=Mj"!0WBk%1RjJ>ES/fN]FJV*.n!fm[^XqK8N)B[J(U%)E#6)-1?dNIBKBi$S?$V+VE%r[Qr\P:8K/]el.^jE8"pIP7(n35mO=^<)]XO')b1N@8PXA+r738LW@<m]CCnIgead1U<ZpJ5>nh4%=-]aq8%pq=a/0-IfZ&Z;@`g(8OO8>#:k%!]cj\$l<&[an5VtU,oY7?nkTOO4s!Dq#+ZeaE&:?d7m2'Vk>tNY8io-,#V)S]a:Bi[+%e+4T4q=]>q'NPVR*I&Fp(45F`2ckte%;AK-5(LU[+AP*1/8Ssqi%J..D)#"_Vr=SZDN^q2cN&33HBZ+r"m;L47)$#r'iI%RH^.Eo%UI[b2[F>X;br1K@agluAJ9rDlL]liZ2?m$#Uq/SY'K.BG3[A%1GOE+LP@No5aPM?V&(."KicLHs8,+@;"B_&"^jX=^1'LiCliIGJ%Y<;o2ZhQ#j\Zc;F8J2%RNH]^Aa&50;"$-uFSOJ#MmB%LEmB(WL?6ojufeejqi0E#l`J`;@0llmhA.LmGW4Wm,`<u<9,0']IM53(8%XgdEhKAu9e9N8dhMm-D[%;HgPHq<halb7HL&+<06&bAc+8V6HFo1B#L:d>!<LFLMA9\:WW/&XMl!)fKqZ]O>M/:1cs-/@\2RukMV%"RK'7K>(KrQ@GQL;VN#9oU[(-BTiZ.>NA5H[S-7B1\]A@h!s,dVHqgK=EP-S:EeL*JJ1ot7L39Z?k=UG=0$GL@IqUD&iP9p.F\K?%T+o>/g(E"dd=b2<eDU321*#pfNY*YhbUEQ5EGB>1La!5A0RBM!0:CU=AOY7se=\UhW?S^W:&[3.T0.XFfp*bYX8PdtFC&^]<%t0[%iiK4KX\is+5rg7W]D0[#DusWL1tuq\'D@msW=W]s"6\ZmV3erA<L.P>P*;,LhRqfTr2.c(47SAF$t<\%TZ$;r:Uh5;(qsF8d:&@?%Mj$dLS*3'(6eSIGFR9Kid>\[j;J>&,TU_FNF\p%Q7Vdi`-3))b_TH904]9t[37Dfs&[P)+a=BI7H'D!=3un,,:N#O%=cieR6O^9=%483KNJ1:TiZI"&uA3.YcI4@Q_p]0i"89=6Q5Z6>&ae#/A3XHbQ2/(oF;.tO"eRHcg8GE=01+8.BgSb*i?B]P;no))=3&WL6NVCL0%=t3<U:C?g4CdLB[e^uVUV^:(FY=^DOe.\C%MTQ+0OAC\K,Ui_ZBZ^hOK4t!VOVZLBc)sY?9qemJo>FBB$drV<HD%D(.OI,dZ"aPA%e?i2=pMEW8Tp+f5eP*8kqUda)?`,8F$S0'_,/fi/iLCah:jSqiOj:_Nkn!C<pKCX7?E8^gGULFtdmI<\7S+3YRZr=:)3o)$%a/%g%Xj<r('O\e`mFEcIG/jNSIm`#m$#][8$W7=e-VH="n$&chD,#=1+e0Rq#q93W)j0#oQ`IrJNmeinZu9u\.&GA-B)9tBKsAjF/o8oN%V0M7<N@:s8P$6N(Do35QIqB]"L"aUHZFi6o#pcMM)K"/\btCctjiOPOdm=QIffN<E'[4E2%Br[?`Aoe/fWOf>X2I-gId$c-5NE^]%,EFRRMCDneh<YsVU4(?g_+$#;NJpaL"<^1E_Pj>M]2VZpc8q4Lmden[l6jncFTAL7]J&'\j,ZOq?@*ulnAhB^*4&QT)XNK[K0(P#%'i]a:7@O$C4@R6$O=sGp*gCFncQu3G+\K9\O&Ud0PO`^TYMsV]iK/qn7>X`iiUu53E^s>62K$D2%8;e+'#N+Y'6?qgHP9JU+0&O4%aR'QH"%:Z3OJg&8,2b@%e_WEW.%dPXWVKe4.*UT*kg`!@Rqc#"Dh+PQR6;U]5*(FsSV>G5`EDqN2K=D(iXE&9+p5I_='V@@(o.;o%c/.R`(e?L!ZdMXU",dtabJ##UGM&8iiBs:D-7m*d@euJEHt)ttVk.(Ihmqt`G4e.C^,9#5inV<?:.DOnQ+Un2fSNS00$HU\jGlL@%C%)ZJ"6k?uoE`qK0dr8)gtJjlktZL\fQR,!-G[h(;0WINFu4W$jnJlTH8Kim)q-1]leZh)]q@R%L-OgQ(,k\T3^Gc.S'?sfICqCA%Hl[-u3t-bsCH,3\hjIG4pg#isZ=Xid4kl76>tL"Wk/WZW#'HMX<2Hh]00(Pl6`R;liW`1H9qeK*.[ZkY`!imS7+gU.VeXNX[BD%p%+f$RGG9'P_8X-5B9X5^"[@XpEfM&W6Pns@B[QN?"U-78Pd!l*2cMgq3)_XKJCSOS6<[IhZ"t7=,/l'&6=bDVL9n&XJ(37t"/P/Jg%W)#l>`!(X+B9-nO<'Y@S[VXpTZ2^<CF^.C7,'Y1Z`PLq=QF(J^4-XW=C'7lI;l/3.\ih.LQrSsq/DdYV#?<N"qb9.OYa$?`<)eX4%%JQ6q@?r\g40TQLouW-%<t_?qF'og[b.q-(N7cX6I:`qebJ*'<3I![eHRl.=</E=o4'8gZSrt,l(V&[89fMUN$2uW)V6G(g[9hPa%)d[bAZG]-I1(_lqXSV>;XJMrk'ZUOI$@,u9'i\sJ_bMa+`'0=&5@`N>+;Mf>/<kY)BPsiK"VZg4E5pHZIL@%q.`/JW:1BSgeDNWX%3;*P&G&Q9fZ)6S5fDmGN:]>[a8u7d^9tZTd+L.'_i3h3.a[>",nnP;Er"-OjYhYfiQcM0fFog7j`l1%rQ4ENlO&NR02[`[_99NUi%!:]'E9+;P#.-@rfL6hL@%ui5KQ)k^WqJ:.VU3*NI/(gKKGP*eLNpVN=JWL6Z99u,-9fnK%UR,:i%erLM*H0]5KOiS"!CO=r7EEHY%@NXq*QZSMh_#k.0F"kp'l@i.j2+Mg/f>f?fSpr_)].Veh!+7<$)]%ZA7jV#/!3O)*\rC3l+saRZ>+pVJF?]3PPWi]K'DNM;!=;>5%J*+kRC@s'P6nAqQ^#4c:XAs%AaZqNAW)g@+b<'jg$WPp<2N+;&DS$+rd.e,p>/<u[lb2;a?02&hl91U:c"nsRXWLS00*2%$Ym4KB%Jcgn&.XH'C($-`n.6sXXZkl_T2D(@ljV@3?hW`3;'<2CoP+j@'32X-hj_m&.Nkhc6eVZWA5_qOl.f&2YP52#_1[?nj\*qhHUb+(,%:-TV^JCK]V1l4/"&u0]H,/[0D@siO">aeC5($-g[_Hq,C1XCB)m&bUEUX1rGdT5,EB@fQ(W0mrnOfc?+#s:JYq?Y:dp^]fR5b"N1%RV3P&\$BsbC[FF#g(_D(ERH,NaubXG%llK5?-45!G1Ei+V(fF\Y4SQkEfseti3Vp^8iG?o3%"QMW<rop@ZHafTn?+mbt_%TH]5f;%<@L7YKXBEN-VM/XF*J!-7E[:<([O-gpRC(9LS?*/RL?th0gbjcgLg$&kha1c7;`bC]&\7jh8$)X%\i\G9SX:oN\2ZWMbleO5D8S;%/Srgm56jDXpP$0b`P=&5(:=C@\pRP6/Iuc%&1WSX2SoB+oCc/-c1@85?d,_J6PGU@CWafj\o>X<$?$3#=4AbH)t=XVlR9\2QL`1*%>KIiQYD,ADSPV==IT,/mB3a%6e";Blr5Lrk0KX(i:h]cJC0&:@4;Pb'Pr,hMk#:\C(9Nhk<ISnGU-uJ7Lk\tM,AXrYeX0KZJ6-pL%ms=2*@>;s/Sm3M&YH\JSUT=)l<)$*PR^h)uK["r8&ek(1DcN^/AW`A-6euTmMj7ZZ5o0f#"=Xun2tIgPP9`R6a7eZM@n+Yo(H@AB%hUOmQV9$M`L6f&^Q5q+MMRDYr;_4/</lmh;;7VbDO+!7+Gd2!X272:12eOrZD"e@<WA$oh!_cQ%_X=#(hMF]HcRtgT>sGZN2N\H=%J4%=gHO^enBjfUe?HEmu&]\#;=17L$,.g!FE83s&5Xti"Lkrt_HUR8L5HHqJ88J\Be1?us(uP<Gp>,`2$nEk"<b_ltrYHeh`_ffG%SP?81bq$g2/B0OI!+YU:n&sB8:=njcl*j4uTqrT&U%haW/k.7n*<TJi'tlY38uXCG-P=\9Ad,1P`b80Tm^5oi3$142Q6g`)B\BVn%"$7J(I4\)dQ=pg7)E,/bJ<GWA!d!8%o!-8JV[4m`J:J2B)U0@nrO]'gda6<$mWPBO[/h"McIo82.T'fKc2$IshF!m;#1k0Ug@5Jk%OY9tl70&Wtg(M#/3bpu6gTKrRaM1/LLKBMe'nD;$n>p@k<(%tYfWk;kpM(7sju<.1)1Cs!%gKf]TdUmkJb^+!4suWml'/Cb6"'uu%%G@*g8c(!C$<uQ'R-^0hA8AG9F?p"lZPFofK(?g8A@#3cJgingS!!Zj@?ZKU)8SV`iPif'#oe,qNL^8*S1eWn`ps2=Ft!=13f[8`%4%]i].hs$6]CI/iIc*E.K9e#"9L$=XjKD'Np0^I$n4#QlmY_do@J^mPItLf'QklnJ=T'\g>YHJOjU%Cf"d->T'\FnCD2?pLs6$U?%0?D:]WnF$O/=>c%MP(9f:Z;U\jC4^^_FlY<ltM!ZdBYeIV(4=Z"015tp;9P"!>`Z`r%2SD_c!NO^s0EEE]=hj*WZihTb(c)<RYF+%'1ejSVm%\+%<.HOo>!IGIXH3659:e[<Dd&Uq,<OT-T]']b((NK/29/3j-1"i&H$E^WXXV:=I_MSd7h-/eSkFM_H7:@8kqUr/q1A]%=\=X\l$%3=UZdEe-(E.lZYcu_jeF%h$$Oi#W!noM5+r<MPORGn.'mAKVjk!KZ!Cq0orLJ`[U+sNi&k_+DmDLtNh8?L[j]$MMa#A2%<r6aaWH#kR.NJV+[TY7c%EN^9o?b=DN'-1LAtH$qS+_HH@^$#p:[HpIa0h1]G.AP_'UMiAZL\J_Vn4,a"LJ<:R<Wo(i1jG<E4L(e%U800dJ/,4dD$F(di9dsIrE`^NN`@XmB'Fjm4VM+%N>nohlr[-K:DWV@B#b5i\QD3k8I3mN7$[l`;fZbH['7UO2f]^_MH(P4b\H)?%PeU^T0%ALTNCFZk$MjO5"BK4WA$Ys.@LQY3XbD0^Qn,!:f)VSmZ=L$;i5[,RJF(8C[)#)p`bN:.UOAA.Wcdgm+,"4WO.0IeSt*ML%D1MkSC1E%SQ:$@u-XBQ+.U&gC8$6-o/W$B4<0j@)KuT6I-<!\^7*l[V/7PIf`rueSW@7)R/0HLaXLJ+H(,s:aQ8$;Jl0Z4MPTI4>%)#n't"W4%c)_>`JO2D5`Ek?'FmJ7:hL9`,,\<Ca:gN*[6>:]n(a@9H?$m2M4P#,/B=4p\3F1P0,e?EnuB!TMHG+Z^ZONt]<JhM+[%d<\]rR:24?*3Rs(%cH&b/t2h<V:t2.5Pa?61LirX#HK8X_5+1E6cD=HV6,6-!BI7*a+DXY*0Om^CaZ9\N!E"s^<N>iGI)-GT)=;l%,KcMIZ\`[c-`ZEL=m94b&m1N1&ItII7i.6qQG@mL^hgWV"i=lp7N$+E@C_IB#%BQ2]"%T`Z"9cb&VZ.+`0Om'OZGtrBkSf<Sqho,%@\bb02E8126R`f6_OhE+PgdCgP+;KtZ&_pQF,3VGV&Qrn=VFWkfK9lRnpIhZVYgS*4Ph[%]F.W2/JZCh]a@iG$U>ZMERSd8TtAaE%"d#r^I8lM8%[Bqc-OJL6^dkiE&0/+AWp6**3gpE1"dS5P<D/a7#i[(V_.kFJWeqA$aC'(O+=LE:S$,T-,OpB8Vo0pd2nuC3fRjJ6%U-2Zn<:\o5Q+*Rdf\-j"S_CZJMHBT>Rt1a=[j:=f-3P?9f)%_@C\3)Ep*EfHA#<^/BtWoQ5(uN;4-!r1V&6;)r7gS#s%n[H07Z[b%7&>hKg3"<X9RJ>Y18dY*'^@0q3i6EMPjKs*4/[R0.H5[uq=RInq>SZ(KI!"LB]!CTmQ%,Ia#`fKAuAZiXAu-5OU\qabhg(UXPNJd%?]T>qDU.>!dXA<A7W=JI*-7%UfR<\I2]7cc^E1Q$fpG-2A_P.?gaZZTcYL5.aaW&eA--A%RC"Er[a)rgBtH+'2l-G%#!4dJ7_^!C%oJ?eTEu=WE(W*T,Crom2ZkfuY1ZZaK-?KX3lYt$ERt$d,O;1i^^3b@RY^0R;>4:lbTHR!"p'PDZKYlGE_s:<Tb=+iS>74n<=lAdK%,-^9a"`6\3V:]^Q_r4l+Ci`Q7"b,e$E/Yt'3-1$Jhkl3PNbUemNIC\\n7/HQZ*n3Kdng(7MI^e-BiU6u's6WHem&2Z(!0LQ[(5*Q%(?O],h%-X3$L^Ej57YrAa2B'E?]kge.`0eI79GpK%0Q4\D*a5M8JGNm2:Z05A#r3?@5#d;&sXX:LXkf0\il$A&e2.4GZ5ggR@5EK%etR_Y6q^k+Rm:s)<gj2l`2N82\NqMG?Ljd1[5LE4+fC\-7VBK],TMArTaFN8:3$D"`Y=,.F=HH(ig'l46c28$1&:k_n0](b3&hLa%Ic(:&rAcd,V?K(^![ao6"\Y_r"^A"nIgZ5!E1L_M$WLL`H9GtU!]fI4blcad*I#oo/ql2779INbaeTG<Jer5/;MB8t\e_ZPQn0s:%0]AmV"b&S7m3ZY6Ldq*.mC@KW%_FCVfE38Z!`^T%`X5"s6$Y^JCp^k;A(KJj+i")Kis>lm>*@&5NB@^D%lp?69X3fSoYp,S&r42;%h[]L5<JX?iE<NaO/E:1p`LKe[(ch<4h28t(J.B""Of)\)C)aEAUHP*oKJs^h`SY:al>pLK`aY#B"%jo^%LmM`U`Lo3m;#;<>nM</%QLDTl(2e,f$a1tt9B,J8:S&uY1XUKF6dM"]26m!Q^7OTB.h_SMoH(!i/&M(=<^'F-BA2W=D4SeP,=?WKUE.Ib+ucLB:l9KDZ37ML%(R$01Qfs@B&Rq%n93WPJJWNsAf'IZ0YV9CKSX^-ekA$2RKBE>=U"Wf#cgaD-T&gC?Q&iZ`\Qid\iX83p,1=j]R1QFq+sJg9Z+3J`%%C!V-I'g30DA^VJ$mRNXK`l)I)RnNXH*H8JMmHY7i.><h6Q0?O(D]sM8aEu[i\c3VM$"<n9_JSqZ"/\CjAPXV72C4:`.TV``2qU\%TgY)b9#\T;VIGMn?.Ac*L4?LC"2!D:6\p"Ch>jYOaqf]bY`Jl,U7q'7].FCT86?7KH?3*<:iAtPA?rh:Q7!9'W?mLsmJ&uT)p_QX%`$/+C"kdnumno83M\7X_KgAQM$9"C9.+qY5/1DJT&Mh%gc]VZ?Q&Fa>9`!OhC=j]J$Rb_=2TV3lGe@ln`&.;CE;E"Np-r`qL)i6m%#\TafP)VGB(0A/g(&N"585:_Y)q4BN%3P2egAHue3O1obj,2\2V339`+^7YAj.IWPPV"$m'g6ttJ@m*QhnR!+hGKV;KG^t^,C4E!%GePbLTHdY4l`n<kcFD=(SGMpgK(Y.FrE+\\mtfYXDfE+.o^0[3UH8I$^E*cimfF(`ieH?Vki*2,r:O/8Q"MrFLj=IH"rMbU:C@Im%@]X2^p):%r@_*r>pBhj',KNq7o/d`dD$=$KUY9AIqZN"Q5kH;Lro4q[rZ/EHZ,H?s%"OBr:#O;Cq"TS`E9AP2&=V8[1W*Xq6-NSj%M,1Bc>qEN(1OinDH-BNT"^bd_Q+S]:-NcNnl`oHRN&6lX$hO(Z-o:<B?HpF&q0FS?3YR?_+SraQa?Ut[83>bN/"3D,,<tG#A213r%:,=,0j@t&M_lgRJYeD//T%6<kqM+GrYehaHfSWrmF3nNjg;mlQ>B8RiB&(Fa5<#k6^)edWhTXRj=ab3]mbc(sr:l":G\7s&G!C![%BAVXhDL>Z/+:"X:&dEP<jik6)H'rT3RD8R3A9j2?d#W)^UN^&/f4.*1Sb]7#(@0%aSb]K?f'LJ[S`mOUMXJ^K?#b;]N8V/kDg5e/%Ik3V$"&W4YDe(Z-(sdD4o\4s\4`d^>*\/T2bgp)u\pN$&bR:&rj)5<cq928,+C@8>?7Hgd67)h-")QldRPEdtr_rY%dBXTKe1iHV%p10>PnMp/d=FcET;BX.M0L7O&J3>eaJK`$D2A9rc35RqB`U+;1U.JP`f!)8Sk@[\cqKT)aWWk&U;=M^rZ1`!!`)J!+,T1Q'+qq?3%f<W=$X-WsBie_r0+U%rR5[a>-MNV[SKV3&'1Q?6C6g,";,bYJ^/P51Iek-Aq)RK+&W*TH+c+%:4/qPX+cFAt#TFKOo2GH5-:o\!G%AP(%NE&9.D`/(H'E0F!__-<5]b)FD8b$r?3I:LQXqCZnhJk=_N;RgG,G8`oC$k[OoMcpEZNM9>n6=*863/Fm6DRS@?*7K[T]-B.F%+QrV\E6gToo]$nSkRCnqYlpa18Caoa$I1[U?:S,agLGua^996!!tJC^D?fFPJDNBSpMC3H*[/HD9;(e\8,dh95g'hFGm/\(J>?g#%obq^2K<e#*p'TY>K>8k-p^0d1"J(UhoF\h:p'o+A%Yapb!TlmOrRYN_]q=9Z1Lt0R's3!V.sTJJ@[_72.koH]R@7Pa/+D'td@+HJ%'A2X<)bAU%3;0V/QVAU0YK%!M2T+46R(!qM2hU9o&A&g92dl:oJA)op[t"[c!JD]AE/#QsJAnu4Wc<\UIXD6Z]Yc/*;2nu,)3DC\%D6C[F,62fh':lt8'B!s993m'L<rghU$?h*Fc>_J<F8NBIk"bF%YK$_*3s1&KK*tJJiYd!RJgZU%jr*AF_P'CH^Vcr+Qf.-@K)P3K%;#:acrd(Y2h_Qs6%3HZXjsqSN$s0&dm5+81)gM8dU7[#1,96`#$/-J_r?"[\d8>Vil`nkfSb5ZXWi*0]l:O9`V6W-sZ-IZtZf9bD%QYqthS+Q*"'BbLPG]bh(]MQ"R.8q`RE,B.j-6d!*9Ja"d+2TUJ7@Pb]5'.jSp?SAV_c#%T+JN^s[H#PD^NFT'DFi,F&I?NR4`<7K%4Af<pZ`Yos+`k,Wahj8a]n0Xg^*XG>'@H\Z.dc&fm645Ac7[N4.8)NkBNK&i%cAQO1SAutZeb4T$S!ndK,d>Z6ZhCIIbag239G&O%3Po+>VDEeT*91W@LJUY=/TskrYoTT1ap%GMb$2;+_Ib<7fiiM2c-#`Iac`L%%+!o#%s"f@9NlG<8&"@YaW5Z=Dr7dGmi:8ha-nG>%Ef!kFj-c/p17)WCmZP#j@.rIP^Mcc2nAlpT=>GoWdJQ;up5SM;*@H*mfm^iY?#XsWB(*h@rV2[+]]'U^H,oA(Eq8]h56tu;WE0@;%5"](]A2$K,M5:X"XAj2'ZWM!LN62tZO72]s7ZEBnLuVhoHfCc/?iTfumiR&SGQ0,jpV6O9s7-*/J,7Wds6?d/J,$p2q;^B3l+d5n%O8nhC:Odikm6CO=lVG:onaHGechOF<Fo9F$J,ACnrPS[7q`k,Fpp5JMIpb9SBp\kY%tF2Cs5W/>!kdS3^&~>%AI9_PrivateDataEnd